{"config":{"lang":["en"],"separator":"[\\s\\-\\.]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Open Banking Connector is a fully open-source, free-to-use UK Open Banking client (connection layer) that simplifies connections to UK Open Banking APIs.</p> <p>It is self-deployed (runs as a component in your backend infrastructure) and released via a Docker image built entirely from the public source code. Because it runs locally, it has great performance (including low latency) as well as privacy/security benefits because bank data is not passed through another organisation. And fully-transparent source code allows you to see what the code is doing and even build it yourself using the included Dockerfile.</p> <p>It provides internal HTTP APIs based on the UK Open Banking APIs but with two major simplifications:</p> <ol> <li>bank profiles allow Open Banking Connector to support differing bank implementations and behaviours including non-uniform spec versions and quirks/unexpected behaviours. This means you see a single, unified multi-bank API with these issues taken care of saving the considerable effort required for individual bank integrations.</li> <li>security profile (auth) concerns including access token acquisition and management are taken care of transparently (invisibly) isolating these from the rest of your backend and saving you the effort of implementing these.</li> </ol> <p>It is designed for use in the cloud and is ideally suited for deployment in a Kubernetes cluster.</p>"},{"location":"#uses","title":"Uses","text":"<p>Open Banking Connector can be used:</p> <ul> <li>as a connectivity layer enabling your Open Banking application to connect to UK bank APIs</li> <li>as a tool for creating and managing bank registrations (OAuth2 clients) for use by other software (perhaps your own).</li> </ul> <p>The Open Banking Connector repo also contains a .NET project for bank tests. This is used in the development of Open Banking Connector as a regression test suite. Please contact us if you are interested in using this.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>To access UK Open Banking APIs, you will need to have an appropriate authorisation/registration with the FCA which gives you access to the UK Open Banking directory. To use bank sandboxes, you simply need to register with OBIE to use the UK Open Banking directory sandbox.</p> <p>Open Banking Connector needs to be hosted in your back-end and requires access to a database and configuration. Please see infrastructure requirements for more information.</p>"},{"location":"#philosophy-and-business-model","title":"Philosophy and business model","text":"<p>Open Banking Connector was conceived following difficulties encountered when integrating with different bank APIs. It seemed pointless that everyone should have the burden of individually integrating with each bank - why couldn't we all contribute to a community effort instead?</p> <p>In particular, bank profiles (which capture bank-specific behaviours) were created so that new ones could be added and existing ones updated by the community, perhaps even by the banks themselves.</p> <p>The product is fully free-to-use but we ask customers to fund new features and bank integrations either by direct code contributions (please contact us) or by contracting us (Finnovation Labs) to do the work.</p> <p>Finnovation Labs also offers paid support, training and consultancy services.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>This documentation is published on the docs website based on Markdown source code in the docs directory of the GitHub repo.</p> <p>Please raise a GitHub issue if you experience any problems or have any feedback.</p>"},{"location":"bank-integrations/","title":"Bank Integrations","text":"<p>The table below shows the banks which have been integrated with Open Banking Connector.</p> <p>UK Open Banking uses the Financial-grade API security profile. In this profile, APIs are provided by an OIDC Issuer. In general, a bank will provision an OIDC Issuer per banking brand but sometimes also per mobile app to allow for different auth URLs (which can then redirect to different mobile apps).</p> <p>In Open Banking Connector banks are identified by bank profiles. These are also given below.</p> Bank Group Brand/App (OIDC Issuer) Sandbox? Bank Profile APIs Barclays PersonalWealthBarclaycardBusinessCorporateBarclaycard\u00a0Commercial\u00a0Payments Barclays_PersonalBarclays_WealthBarclays_BarclaycardBarclays_BusinessBarclays_CorporateBarclays_BarclaycardCommercialPayments AISP,PISP (domestic payments),VRP Co-operative SandboxCo-operativeSmile Cooperative_CooperativeSandboxCooperative_CooperativeCooperative_Smile AISP HSBC FirstDirectUK PersonalUK BusinessUK KineticHSBCnet UK Hsbc_FirstDirectHsbc_UkPersonalHsbc_UkBusinessHsbc_UkKineticHsbc_HsbcNetUk AISP,PISP (domestic payments),VRP Lloyds Lloyds PersonalLloyds BusinessLloyds CommercialHalifax PersonalBank\u00a0of\u00a0Scotland\u00a0PersonalBank\u00a0of\u00a0Scotland\u00a0BusinessBank\u00a0of\u00a0Scotland\u00a0CommercialMBNA Personal Lloyds_LloydsPersonalLloyds_LloydsBusinessLloyds_LloydsCommericalLloyds_HalifaxPersonalLloyds_BankOfScotlandPersonalLloyds_BankOfScotlandBusinessLloyds_BankOfScotlandCommericalLloyds_MbnaPersonal AISP,PISP (domestic payments),VRP Monzo All brands Monzo_Monzo AISP,PISP (domestic payments),VRP Nationwide All brands Nationwide_Nationwide AISP,PISP (domestic payments),VRP NatWest NatWest SandboxRBS SandboxNatWestNatWest BanklineNatWest ClearSpendRBSRBS BanklineRBS ClearSpendThe OneNatWest OneVirgin OneUlster Bank NIUlster Bank NI BanklineUlster\u00a0Bank\u00a0NI\u00a0ClearSpendMettle (under test)Coutts (under test) NatWest_NatWestSandboxNatWest_RoyalBankOfScotlandSandboxNatWest_NatWestNatWest_NatWestBanklineNatWest_NatWestClearSpendNatWest_RoyalBankOfScotlandNatWest_RoyalBankOfScotlandBanklineNatWest_RoyalBankOfScotlandClearSpendNatWest_TheOneNatWest_NatWestOneNatWest_VirginOneNatWest_UlsterBankNiNatWest_UlsterBankNiBanklineNatWest_UlsterBankNiClearSpendNatWest_MettleNatWest_Coutts AISP,PISP (domestic payments),VRP OBIE Model Bank (2023) (under test) Obie_Model2023 AISP,PISP (domestic payments),VRP Revolut All brands Revolut_Revolut AISP Santander All brands Santander_Santander AISP,PISP (domestic payments),VRP Starling All brands Starling_Starling AISP"},{"location":"apis/","title":"APIs","text":""},{"location":"apis/#overview","title":"Overview","text":"<p>Open Banking Connector provides a set of HTTP APIs. Mostly these act as outer APIs providing replacement endpoints for endpoints provided by UK Open Banking APIs. These replacement endpoints wrap calls to UK Open Banking API endpoints as well as extra calls for token acquisition etc. Aside from the Management and Auth Context APIs, Open Banking Connector APIs aim to mirror their UK Open Banking equivalents as much as possible.</p> <p>The APIs provided are as follows:</p> API Description Management This API provides endpoints for setup including replacement endpoints for endpoints provided in the UK Open Banking Dynamic Client Registration API Account and Transaction This API aims to mirror the UK Open Banking Account and Transaction API. Payment Initiation This API aims to mirror the UK Open Banking Payment Initiation API. Variable Recurring Payments This API aims to mirror the UK Open Banking Variable Recurring Payments API. Auth Contexts API This API provides endpoints for handling bank OAuth2 redirects that occur following end-user auth"},{"location":"apis/#security","title":"Security","text":"<p>The Open Banking Connector APIs are internal (i.e. non-internet-accessible) APIs for consumption within your back-end infrastructure. They should definitely not (!) be exposed to the internet in any way. This is very important as these endpoints provide access to Open Banking APIs.</p> <p>The APIs are provided as HTTP rather than HTTPS APIs as customers are expected to configure HTTPS via an outer wrapper (e.g. using Kubernetes or a reverse proxy) to enable easier certificate configuration and to set up features such as MTLS.</p> <p>As internal APIs, they do not require tokens but should obviously be secured as appropriate, e.g. via MTLS, firewalls, AWS security groups etc.</p> <p>Internally, Open Banking Connector acquires and uses tokens to access UK Open Banking APIs. As a security feature, these tokens are not retrievable via the Open Banking Connector APIs. So, for example, when reading (GETing) a consent such as an Account Access Consent, tokens will not be included in the consent payload. To inspect them (in encrypted form), you will need to query the database directly.</p>"},{"location":"apis/account-and-transaction/","title":"Account and Transaction API","text":"<p>The Account and Transaction API provides access to UK Open Banking Account and Transaction API functionality.</p>"},{"location":"apis/account-and-transaction/#openapi-spec","title":"OpenAPI Spec","text":"<p>An OpenAPI spec for the Account and Transaction API showing the endpoints and data types is provided here. This is a static capture of the API at a given release (see grey box at top right of OpenAPI spec for which release).</p> <p>For any running version of Open Banking Connector, the OpenAPI spec for the currently-running software is provided at <code>GET /swagger/index.html</code>.</p>"},{"location":"apis/account-and-transaction/#relationship-to-uk-open-banking-account-and-transaction-api","title":"Relationship to UK Open Banking Account and Transaction API","text":"<p>The UK Open Banking Account and Transaction (AISP) API is defined here.</p> <p>Open Banking Connector provides replacement endpoints for the UK OB AISP endpoints as shown in the following table. The replacement endpoints, where relevant, use data types from UK OB AISP API version v3.1.10. When calling external (bank) APIs, Open Banking Connector performs request/response payload translation for any banks supporting earlier API versions.</p> UK OB AISP endpoint Replacement Open Banking Connector endpoint POST /account-access-consents POST /aisp/account-access-consents GET /account-access-consents/{ConsentId} GET /aisp/account-access-consents/{accountAccessConsentId} DELETE /account-access-consents/{ConsentId} DELETE /aisp/account-access-consents/{accountAccessConsentId} GET /accounts GET /aisp/accounts GET /accounts/{AccountId} GET /aisp/accounts/{externalApiAccountId} GET /balances GET /aisp/balances GET /accounts/{AccountId}/balances GET /aisp/accounts/{externalApiAccountId}/balances GET /direct-debits GET /aisp/direct-debits GET /accounts/{AccountId}/direct-debits GET /aisp/accounts/{externalApiAccountId}/direct-debits GET /party GET /aisp/party GET /accounts/{AccountId}/party GET /aisp/accounts/{externalApiAccountId}/party GET /accounts/{AccountId}/parties GET /aisp/accounts/{externalApiAccountId}/parties GET /standing-orders GET /aisp/standing-orders GET /accounts/{AccountId}/standing-orders GET /aisp/accounts/{externalApiAccountId}/standing-orders GET /transactions GET /aisp/transactions GET /accounts/{AccountId}/transactions GET /aisp/accounts/{externalApiAccountId}/transactions GET /accounts/{AccountId}/statements/{StatementId}/transactions GET /aisp/accounts/{externalApiAccountId}/statements/{externalApiStatementId}/transactions <p>All replacement Open Banking Connector endpoints handle behaviour and spec variations between banks meaning the same API calls can be used regardless of bank. Bank-specific differences are determined by a bank's bank profile.</p> <p>In the UK OB AISP API, resource endpoints such as <code>GET /accounts</code> require a consent-specific bearer token supplied in the <code>Authorization</code> header. Corresponding Open Banking Connector endpoints instead require the <code>x-obc-account-access-consent-id</code> header to be populated with the relevant account access consent ID (<code>Id</code> returned from POST /aisp/account-access-consents).</p> <p>The Open Banking Connector API provides two additional endpoints that are not UK OB replacements: POST /aisp/account-access-consent-auth-contexts and GET /aisp/account-access-consent-auth-contexts/{accountAccessConsentAuthContextId}. These respectively create and read an auth context which is a time-limited session for end-user authentication. Calling POST /aisp/account-access-consent-auth-contexts creates an auth context and returns a URL which can be used for end-user auth.</p>"},{"location":"apis/account-and-transaction/#mappings-to-database-objects","title":"Mappings to database objects","text":"<p>The following endpoints create/read/delete records in the account_access_consent database table:</p> <ul> <li>POST /aisp/account-access-consents</li> <li>GET/aisp/account-access-consents/{accountAccessConsentId}</li> <li>DELETE /aisp/account-access-consents/{accountAccessConsentId}</li> </ul> <p>The following endpoints create/read records of kind <code>AccountAccessConsentAuthContext</code> in the auth_context table (these records are deleted automatically following successful auth):</p> <ul> <li>POST /aisp/account-access-consent-auth-contexts</li> <li>GET /aisp/account-access-consent-auth-contexts/{accountAccessConsentAuthContextId}</li> </ul>"},{"location":"apis/account-and-transaction/#external-bank-api-operations","title":"External (bank) API operations","text":"<p>All replacement Open Banking Connector endpoints included in the table above perform a call to the relevant external (bank) API endpoint listed. Additionally, calls are made to the external API token endpoint as required.</p> <p>In the case of DELETE /aisp/account-access-consents/{accountAccessConsentId}, the header <code>x-obc-include-external-api-operation</code> can be used to avoid deleting an account access consent at the external API (the default behaviour). When <code>x-obc-include-external-api-operation</code> is <code>false</code>, only the local database object will be deleted. </p>"},{"location":"apis/account-and-transaction/openapi/","title":"OpenAPI spec","text":""},{"location":"apis/auth-contexts/","title":"Auth Contexts API","text":"<p>The Auth Contexts API provides endpoints for managing auth contexts.</p>"},{"location":"apis/auth-contexts/#openapi-spec","title":"OpenAPI Spec","text":"<p>An OpenAPI spec for the Auth Contexts API showing the endpoints and data types is provided here. This is a static capture of the API at a given release (see grey box at top right of OpenAPI spec for which release).</p> <p>For any running version of Open Banking Connector, the OpenAPI spec for the currently-running software is provided at <code>GET /swagger/index.html</code>.</p>"},{"location":"apis/auth-contexts/openapi/","title":"OpenAPI spec","text":""},{"location":"apis/management/","title":"Management API","text":"<p>The Management API allows you to create, read, and delete management (setup) objects in Open Banking Connector.</p>"},{"location":"apis/management/#openapi-spec","title":"OpenAPI Spec","text":"<p>An OpenAPI spec for the Management API showing the endpoints and data types is provided here. This is a static capture of the API at a given release (see grey box at top right of OpenAPI spec for which release).</p> <p>For any running version of Open Banking Connector, the OpenAPI spec for the currently-running software is provided at <code>GET /swagger/index.html</code>.</p>"},{"location":"apis/management/#relationship-to-uk-open-banking-dynamic-client-registration-api","title":"Relationship to UK Open Banking Dynamic Client Registration API","text":"<p>The UK Open Banking Dynamic Client Registration (DCR) API is defined here.</p> <p>Open Banking Connector provides replacement endpoints for the UK OB DCR endpoints as shown below. The replacement endpoints, where relevant, use data types from the latest UK OB DCR v3.3 API. When calling external (bank) APIs, Open Banking Connector performs request/response payload translation for any banks supporting earlier API versions.</p> UK OB DCR endpoint Replacement Open Banking Connector endpoint POST /register POST /config/bank-registrations GET /register/{ClientId} GET /config/bank-registrations/{bankRegistrationId} DELETE /register/{ClientId} DELETE /config/bank-registrations/{bankRegistrationId} <p>All the replacement Open Banking Connector endpoints handle behaviour and spec variations between banks meaning the same API calls can be used regardless of bank. Bank-specific differences are determined by a bank's bank profile.</p> <p>There are some further major differences when creating a bank registration/OAuth2 client using POST /config/bank-registrations.</p> <p>Firstly, Open Banking Connector can infer most of the payload to send to the bank during DCR from only a few request properties. This means the creation of a new BankRegistration (OAuth2 client) is usually as simple as: <pre><code>POST /config/bank-registrations HTTP/1.1\n# standard headers omitted\n{\n  \"BankProfile\": \"Obie_Modelo\",\n  \"SoftwareStatementProfileId\": \"All\"\n}\n</code></pre> where only the bank's bank profile and ID of the software statement profile are required. Other optional properties are available but generally not necessary to use. </p> <p>Secondly, Open Banking Connector knows when to \"re-use\" an existing external (bank) API OAuth2 client rather than create a new one meaning the user can happily call <code>POST /config/bank-registrations</code> for each bank they want to use without any further knowledge <sup>1</sup>. This client re-use is completely transparent to the user. It can be overridden using the <code>ForceDynamicClientRegistration</code> property.</p> <p>Finally, Open Banking Connector allows an existing OAuth2 client created externally to be passed in using the <code>ExternalApiObject</code> property. This is useful when DCR is not supported by the bank or an OAuth2 client has been created elsewhere. When <code>ExternalApiObject</code> is non-null, DCR is not performed.</p>"},{"location":"apis/management/#mappings-to-database-objects","title":"Mappings to database objects","text":"<p>A successful call to <code>POST /config/bank-registrations</code> always creates a record in the database <code>bank_registration</code> table even when DCR is not performed (i.e. an existing client has been supplied or re-used).</p> <p>Likewise, GET /config/bank-registrations/{bankRegistrationId} and DELETE /config/bank-registrations/{bankRegistrationId} can be used to read and delete database <code>bank_registration</code> records. </p>"},{"location":"apis/management/#external-bank-api-operations","title":"External (bank) API operations","text":"<p>When <code>POST /config/bank-registrations</code> causes DCR to be performed, a call will be made to the external (bank) API <code>POST /register</code> endpoint and the property <code>ExternalApiResponse</code> will be included in the response. Otherwise just the local database object will be returned.</p> <p>Where supported and specified by the bank profile (or forced via header <code>x-obc-include-external-api-operation</code>), GET /config/bank-registrations/{bankRegistrationId} will perform a call to the external (bank) API <code>GET /register</code> endpoint and the property <code>ExternalApiResponse</code> will be included in the response. Otherwise just the local database object will be returned.</p> <p>Where supported and specified by the bank profile (or forced via header <code>x-obc-include-external-api-operation</code>), DELETE /config/bank-registrations/{bankRegistrationId} will perform a call to the external (bank) API <code>DELETE /register/{ClientId}</code> endpoint. Otherwise just the local database object will be deleted.</p> <p>Note that only a few banks support <code>GET /register/{ClientId}</code> and <code>DELETE /register/{ClientId}</code> and so in most cases GET /config/bank-registrations/{bankRegistrationId} and DELETE /config/bank-registrations/{bankRegistrationId} will not result in external (bank) API calls.</p> <ol> <li> <p>Why is this re-use necessary or desirable? Some bank groups (e.g. <code>NatWest</code>) expect/require the same OAuth2 client to re-used between sets of banks (e.g. <code>NatWest_RoyalBankOfScotland</code> and <code>NatWest_VirginOne</code>). Also performing DCR twice for the same bank might, depending on bank behaviour, result in re-generating the previous OAuth2 client (with same ID). For at least one bank, though, using the same client for both AISP and PISP is not allowed. Open Banking Connector has an internal concept of bank registration groups. These are essentially rules which determine when OAuth2 clients can be re-used (shared) by default. These are designed to ensure <code>POST /config/bank-registrations</code> can be called safely for all banks and only creates new OAuth2 clients where necessary.\u00a0\u21a9</p> </li> </ol>"},{"location":"apis/management/openapi/","title":"OpenAPI spec","text":""},{"location":"apis/payment-initiation/","title":"Payment Initiation API","text":"<p>The Payment Initiation API provides access to UK Open Banking Payment Initiation API functionality.</p>"},{"location":"apis/payment-initiation/#openapi-spec","title":"OpenAPI Spec","text":"<p>An OpenAPI spec for the Payment Initiation API showing the endpoints and data types is provided here. This is a static capture of the API at a given release (see grey box at top right of OpenAPI spec for which release).</p> <p>For any running version of Open Banking Connector, the OpenAPI spec for the currently-running software is provided at <code>GET /swagger/index.html</code>.</p>"},{"location":"apis/payment-initiation/#relationship-to-uk-open-banking-payment-initiation-api","title":"Relationship to UK Open Banking Payment Initiation API","text":"<p>The UK Open Banking Payment Initiation (PISP) API is defined here.</p> <p>Open Banking Connector provides replacement endpoints for the UK OB PISP endpoints as shown in the following table. The replacement endpoints, where relevant, use data types from UK OB PISP API version v3.1.6. When calling external (bank) APIs, Open Banking Connector performs request/response payload translation for any banks supporting earlier API versions.</p> UK OB PISP endpoint Replacement Open Banking Connector endpoint POST /domestic-payment-consents POST /pisp/domestic-payment-consents GET /domestic-payment-consents/{ConsentId} GET /pisp/domestic-payment-consents/{domesticPaymentConsentId} POST /domestic-payments POST /pisp/domestic-payments GET /domestic-payments/{DomesticPaymentId} GET /pisp/domestic-payments/{externalApiId} <p>All replacement Open Banking Connector endpoints handle behaviour and spec variations between banks meaning the same API calls can be used regardless of bank. Bank-specific differences are determined by a bank's bank profile.</p> <p>In the UK OB PISP API, some resource endpoints such as <code>POST /domestic-payments</code> require a consent-specific bearer token supplied in the <code>Authorization</code> header. Corresponding Open Banking Connector endpoints instead require the <code>x-obc-domestic-payment-consent-id</code> header to be populated with the relevant domestic payment consent ID (<code>Id</code> returned from POST /pisp/domestic-payment-consents).</p> <p>The Open Banking Connector API provides two additional endpoints that are not UK OB replacements: POST /pisp/domestic-payment-consent-auth-contexts and GET /pisp/domestic-payment-consent-auth-contexts/{domesticPaymentConsentAuthContextId}. These respectively create and read an auth context which is a time-limited session for end-user authentication. Calling POST /pisp/domestic-payment-consent-auth-contexts creates an auth context and returns a URL which can be used for end-user auth.</p>"},{"location":"apis/payment-initiation/#mappings-to-database-objects","title":"Mappings to database objects","text":"<p>The following endpoints create/read records in the domestic_payment_consent database table:</p> <ul> <li>POST /pisp/domestic-payment-consents</li> <li>GET /pisp/domestic-payment-consents/{domesticPaymentConsentId}</li> </ul> <p>The following endpoints create/read records of kind <code>DomesticPaymentConsentAuthContext</code> in the auth_context table (these records are deleted automatically following successful auth):</p> <ul> <li>POST /pisp/domestic-payment-consent-auth-contexts</li> <li>GET /pisp/domestic-payment-consent-auth-contexts/{domesticPaymentConsentAuthContextId}</li> </ul>"},{"location":"apis/payment-initiation/#external-bank-api-operations","title":"External (bank) API operations","text":"<p>All replacement Open Banking Connector endpoints included in the table above perform a call to the relevant external (bank) API endpoint listed. Additionally, calls are made to the external API token endpoint as required.</p>"},{"location":"apis/payment-initiation/openapi/","title":"OpenAPI spec","text":""},{"location":"apis/variable-recurring-payments/","title":"Variable Recurring Payments API","text":"<p>The Variable Recurring Payments API provides access to UK Open Banking Variable Recurring Payments API functionality.</p>"},{"location":"apis/variable-recurring-payments/#openapi-spec","title":"OpenAPI Spec","text":"<p>An OpenAPI spec for the Variable Recurring Payments API showing the endpoints and data types is provided here. This is a static capture of the API at a given release (see grey box at top right of OpenAPI spec for which release).</p> <p>For any running version of Open Banking Connector, the OpenAPI spec for the currently-running software is provided at <code>GET /swagger/index.html</code>.</p>"},{"location":"apis/variable-recurring-payments/#relationship-to-uk-open-banking-variable-recurring-payments-api","title":"Relationship to UK Open Banking Variable Recurring Payments API","text":"<p>The UK Open Banking Variable Recurring Payments (VRP) API is defined here.</p> <p>Open Banking Connector provides replacement endpoints for the UK OB VRP endpoints as shown in the following table. The replacement endpoints, where relevant, use data types from UK OB VRP API version v3.1.11. When calling external (bank) APIs, Open Banking Connector performs request/response payload translation for any banks supporting earlier API versions.</p> UK OB VRP endpoint Replacement Open Banking Connector endpoint Requires header <code>x-obc-domestic-vrp-consent-id</code>? POST /domestic-vrp-consents POST /vrp/domestic-vrp-consents GET /domestic-vrp-consents/{ConsentId} GET /vrp/domestic-vrp-consents/{domesticVrpConsentId} DELETE /domestic-vrp-consents/{ConsentId} DELETE /vrp/domestic-vrp-consents/{domesticVrpConsentId} POST /domestic-vrp-consents/{ConsentId}/funds-confirmation POST /vrp/domestic-vrp-consents/{domesticVrpConsentId}/funds-confirmation POST /domestic-vrps POST /vrp/domestic-vrps GET /domestic-vrps/{DomesticVRPId} GET /vrp/domestic-vrps/{externalApiId} GET /domestic-vrps/{DomesticVRPId}/payment-details GET /vrp/domestic-vrps/{externalApiId}/payment-details <p>Behavioural variations between banks are handled by Open Banking Connector via bank profiles. However this does not extend to data normalisation leaving you in full control over what is sent to a bank and with full visibility of what is received.</p> <p>GET endpoints for domestic VRPs require the header <code>x-obc-domestic-vrp-consent-id</code> to identify the related domestic VRP consent (use <code>Id</code> returned from POST /vrp/domestic-vrp-consents).</p> <p>The Open Banking Connector API provides two additional endpoints that are not UK OB replacements: POST /vrp/domestic-vrp-consent-auth-contexts and GET /vrp/domestic-vrp-consent-auth-contexts/{domesticVrpConsentAuthContextId}. These respectively create and read an auth context which is a time-limited session for end-user authentication. Calling POST /vrp/domestic-vrp-consent-auth-contexts creates an auth context and returns a URL which can be used for end-user auth.</p>"},{"location":"apis/variable-recurring-payments/openapi/","title":"OpenAPI spec","text":""},{"location":"configuration/","title":"Configuration &amp; secrets","text":"<p>Configuration and secrets are read-only settings that customise the behaviour of Open Banking Connector. This is in contrast to database access which is read-write.</p> <p>Secrets provide sensitive configuration but, from Open Banking Connector's perspective, configuration and secrets are unified in that any setting can be assigned a value by any configuration provider. (This does not mean the two should be stored together or supplied from the same source though - see secrets and security below).</p> <p>Here we give an overview of configuration in Open Banking Connector.</p>"},{"location":"configuration/#structure","title":"Structure","text":"<p>Configuration consists of settings which can be assigned values.</p> <p>These settings are organised by area into settings groups.</p> <p>Settings have a hierarchical naming structure where the first \"level\" is always OpenBankingConnector (essentially a namespace) and subsequent levels are separated by colons (:).</p> <p>Values are always representable as strings (although in JSON files, where applicable and optionally, they may be represented in natural form as numbers and booleans where applicable).</p> <p>Below is an example of a setting and value that configures the Open Banking Connector database provider to be <code>\"Sqlite\"</code>:</p> Setting Value OpenBankingConnector:Database:Provider <code>\"Sqlite\"</code>"},{"location":"configuration/#settings-groups","title":"Settings groups","text":"<p>Open Banking Connector configuration settings are collected into groups which are described on their own pages:</p> <ul> <li>database settings configure the database used by Open Banking Connector</li> <li>encryption key settings configure encryption keys used by Open Banking Connector</li> <li>configuration sources settings configure configuration sources used by Open   Banking Connector</li> <li>open telemetry settings configure Open Telemetry settings used by Open Banking   Connector</li> </ul>"},{"location":"configuration/#sources","title":"Sources","text":"<p>Open Banking Connector is written in .NET and by default uses ASP.NET Core default application configuration sources to collect configuration from a number of configuration providers in priority order.</p> <p>These include the command-line and environment variable providers as highest-priority providers.</p> <p>Configuration sources can be customised and added using configuration sources settings.</p>"},{"location":"configuration/#secrets-and-security","title":"Secrets and security","text":"<p>Some settings values are very sensitive, for example keys, and should be carefully and securely stored and managed.</p> <p>It is recommended to provide sensitive configuration (secrets) and standard configuration from different sources and not to store them together.</p> <p>For example, standard configuration could be supplied via environment variables and secrets from a cloud secrets provider.</p> <p>Even if environment variables are the vehicle for providing both (to decouple configuration and application), the secrets environment variables could e.g. be dynamically produced during application/pod startup and not stored with standard configuration.</p>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>When supplying configuration via environment variables, you should use double underscores (__) in place of colons (:) in settings names. So, for instance, the setting OpenBankingConnector:Database:Provider would be configured using environment variable <code>OpenBankingConnector__Database__Provider</code>. This is a .NET convention and explained here.</p>"},{"location":"configuration/configuration-sources-settings/","title":"Configuration sources settings","text":"<p>Configuration sources are an ASP.NET Core concept and are used in Open Banking Connector to provide configuration settings including secrets.</p> <p>Configuration sources settings are settings which adjust configuration sources used from the defaults given here. Any new configuration sources added will be added with lower priority than the default environment variable and command line sources.</p> <p>These settings should only be modified from a default configuration source, e.g. environemnt variables, so that they can be picked up. For example, specifying use of the AWS SSM parameter source via an AWS SSM parameter will not work.</p>"},{"location":"configuration/configuration-sources-settings/#settings","title":"Settings","text":"Name Valid Values Default Value(s) Description OpenBankingConnector:ConfigurationSources:UseUserSecrets {<code>\"true\"</code>, <code>\"false\"</code>} <code>\"false\"</code> (development environment) <p> <code>\"true\"</code> (otherwise) User secrets are a ASP.NET Core configuration source intended for use in development (see here). This setting allows user secrets to be explicitly included or excluded as desired. OpenBankingConnector:ConfigurationSources:AwsSsmParameterPrefix string <code>\"\"</code> A non-empty value specifies that AWS SSM parameters with the specified prefix will be used as a configuration source in Open Banking Connector. The specified prefix functions as a namespace, so for example an AWS SSM parameter <code>/&lt;specifiedPrefix&gt;/OpenBankingConnector/Database/EnsureDatabaseCreated</code> will map to Open Banking Connector setting <code>OpenBankingConnector:Database:EnsureDatabaseCreated</code>. When this configuration source is used, please ensure Open Banking Connector is run in an envrionment with an AWS IAM role/user which contains a suitable permissions policy<sup>1</sup>. <ol> <li> <p>Exmple AWS permission policy: <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"SSMPermissionStatement\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"ssm:GetParametersByPath\",\n            \"Resource\": \"arn:aws:ssm:eu-west-2:&lt;awsAccountId&gt;:parameter/&lt;specifiedPrefix&gt;/*\"\n        }\n    ]\n}\n</code></pre> \u21a9</p> </li> </ol>"},{"location":"configuration/database-settings/","title":"Database settings","text":"<p>Database settings are used to configure the database used by Open Banking Connector to read and write data.</p> <p>In non-development environments (the default), you will at least need to at least provide a connection string setting for the configured database provider.</p>"},{"location":"configuration/database-settings/#settings","title":"Settings","text":"Name Valid Values Default Value(s) Description OpenBankingConnector:Database:Provider {<code>\"Sqlite\"</code>, <code>\"PostgreSql\"</code>} <code>\"PostgreSql\"</code> Determines which database provider Open Banking Connector uses. OpenBankingConnector:Database:ConnectionStrings:{Provider} <p> where Provider \u2208 {Sqlite, PostgreSql} </p> string <code>\"Data Source=./sqliteTestDb.db\"</code> (development environment and Provider = <code>\"Sqlite\"</code>) <p> <code>\"Host=localhost;Database=test;</code><code>Username=postgres\"</code> (development environment and Provider = <code>\"PostgreSql\"</code>) <p> - (otherwise) Connection strings for each database provider. Open Banking Connector only reads the one for the provider specified by OpenBankingConnector:Database:Provider. The BankTests project, however, may use multiple connection strings to test with multiple databases. A list of connection string parameters for provider <code>PostgreSql</code> is given here. OpenBankingConnector:Database:EnsureDatabaseCreated {<code>\"true\"</code>, <code>\"false\"</code>} <code>\"false\"</code> At application start-up, ensure database is created if does not exist. OpenBankingConnector:Database:EnsureDatabaseMigrated {<code>\"true\"</code>, <code>\"false\"</code>} <code>\"true\"</code> At application start-up, apply pending migrations. Only supported for database providers with migration support (i.e. only PostgreSql at this time)."},{"location":"configuration/encryption-key-settings/","title":"Encryption keys settings","text":"<p>Encryption keys are used to encrypt sensitive information such as bank access and refresh tokens stored in the database at application level as part of defence-in-depth. It is assumed and recommended that database at-rest encryption is also used.</p> <p>(Note that bank endpoints accepting tokens also authenticate the client with MTLS as a further level of protection so unencrypted bank tokens are not usable in isolation.)</p> <p>Encryption is performed using the in-the-box .NET implementation of AES-256-GCM and keys should be 256 bits. Note that use of unique nonces is guaranteed at database level by the unique nonce field in the database encrypted_object table. Please do not hard-delete records in this table whose key_id field matches an encryption key still in use since it is very important for AES-GCM that nonces are never re-used for the same encryption key.</p> <p>Multiple encryption keys can be provided each with its own ID. This allows decryption of objects encrypted with previously-used keys. New objects will be encrypted with the key specified by OpenBankingConnector:Keys:CurrentEncryptionKeyId. Keys are specified as a base64-encoded string.</p> <p>It is up to the user to generate their own keys, but for example purposes the Kubernetes docs suggest that on Linux a base64-encoded key can be generated via the command <pre><code>head -c 32 /dev/urandom | base64\n</code></pre></p> <p>No encryption keys are configured by default and you will require at least one in order to use Open Banking Connector unless encryption is disabled. To create one, simply decide upon an ID and configure minimally the settings lacking defaults below.</p> <p>In the future we plan to support automated rotation of encryption keys which will automate re-encryption of objects and hard-deletion of object records corresponding to old keys.</p>"},{"location":"configuration/encryption-key-settings/#settings","title":"Settings","text":"Name Valid Values Default Value(s) Description OpenBankingConnector:Keys:CurrentEncryptionKeyId string - Encryption key to use for encrypting new objects. Specified by key ID. OpenBankingConnector:Keys:Encryption:{Id}:Value <p> where string Id is user-defined encryption key ID </p> string - Encryption key (256-bit) used for symmetric encryption (AES-256-GCM) of sensitive data in database such as bank tokens. Specified as a base64-encoded string. See above for example of how to generate. OpenBankingConnector:Keys:DisableEncryption {<code>\"true\"</code>, <code>\"false\"</code>} <code>\"false\"</code> Disable encryption of new objects (not recommended)."},{"location":"configuration/open-telemetry-settings/","title":"Open Telemetry settings","text":"<p>Open Telemetry settings configure support for Open Telemetry in Open Banking Connector.</p> <p>Open Telemetry allows centralised collection of logging, distributed tracing and metrics data from running applications/services such as Open Banking Connector. The data format is standardised and vendor-neutral.</p> <p>The service name used by Open Banking Connector for Open Telemetry can be customised using the setting <code>OpenBankingConnector:OpenTelemetry:ServiceName</code>. The service version used for Open Telemetry will be set to the product version of Open Banking Connector.</p>"},{"location":"configuration/open-telemetry-settings/#support-for-open-telemetry-logging","title":"Support for Open Telemetry logging","text":"<p>Support for Open Telemetry logging can be enabled by specifying an exporter URL in <code>OpenBankingConnector:OpenTelemetry:Logging:OtlpExporterUrl</code>.</p> <p>By default, Open Telemetry trace and span IDs (related to tracing) are included with all logs including console logs.</p>"},{"location":"configuration/open-telemetry-settings/#support-for-open-telemetry-tracing","title":"Support for Open Telemetry tracing","text":"<p>Support for Open Telemetry tracing can be enabled by setting <code>OpenBankingConnector:OpenTelemetry:UseConsoleExporter</code> to <code>true</code> (for console output) or specifying an exporter URL in <code>OpenBankingConnector:OpenTelemetry:Tracing:OtlpExporterUrl</code>. You can control the level of output by means of <code>OpenBankingConnector:OpenTelemetry:Tracing:ProviderFilter</code>.</p> <p>To propagate trace IDs from a service making requests to Open Banking Connector, please include the <code>traceparent</code> header as described here in requests to Open Banking Connector.</p>"},{"location":"configuration/open-telemetry-settings/#support-for-open-telemetry-metrics","title":"Support for Open Telemetry metrics","text":"<p>Support for Open Telemetry metrics can be enabled by setting <code>OpenBankingConnector:OpenTelemetry:UseConsoleExporter</code> to <code>true</code> (for console output) or specifying an exporter URL in <code>OpenBankingConnector:OpenTelemetry:Metrics:OtlpExporterUrl</code>. You can control the reporting frequency and type of metrics export by means of <code>OpenBankingConnector:OpenTelemetry:Metrics:MetricReaderExportIntervalMilliseconds</code> and <code>OpenBankingConnector:OpenTelemetry:Metrics:MetricReaderTemporality</code>.</p> <p>Currently only TPP Reporting metrics (see here for more info) are produced.</p>"},{"location":"configuration/open-telemetry-settings/#settings","title":"Settings","text":"Name Valid Values Default Value(s) Description OpenBankingConnector:OpenTelemetry:ServiceName string <code>\"OpenBankingConnector\"</code> Use to customise the service name used with Open Telemetry OpenBankingConnector:OpenTelemetry:ServiceNamespace string <code>\"FinnovationLabs\"</code> Use to customise the service namespace used with Open Telemetry OpenBankingConnector:OpenTelemetry:ServiceInstanceId string <code>\"Default\"</code> Use to customise the service instance ID used with Open Telemetry OpenBankingConnector:OpenTelemetry:UseConsoleExporter {<code>\"true\"</code>, <code>\"false\"</code>} <code>\"false\"</code> Add console exporter to tracing and metrics. Will send tracing and metrics output to the console. OpenBankingConnector:OpenTelemetry:Logging:OtlpExporterUrl string <code>\"\"</code> When non-empty, add OTLP (Open Telemetry Protocol) exporter to logging with target URL as specified. OpenBankingConnector:OpenTelemetry:Tracing:OtlpExporterUrl string <code>\"\"</code> When non-empty, add OTLP (Open Telemetry Protocol) exporter to tracing with target URL as specified. OpenBankingConnector:OpenTelemetry:Tracing:ProviderFilter int <code>\"3\"</code> (AspNetCore and HttpClient only) Use to control tracing providers. Provide sum of desired providers where AspNetCore (top-level) = 1, HttpClient (bank requests) = 2, EFCore (database ORM) = 4. OpenBankingConnector:OpenTelemetry:Metrics:OtlpExporterUrl string <code>\"\"</code> When non-empty, add OTLP (Open Telemetry Protocol) exporter to metrics with target URL as specified. OpenBankingConnector:OpenTelemetry:Metrics:MetricReaderExportIntervalMilliseconds int <code>\"30000\"</code> Use to control frequency of export of metrics data (e.g. daily, hourly or more frequently when testing). OpenBankingConnector:OpenTelemetry:Metrics:MetricReaderTemporality {<code>\"Cumulative\"</code>, <code>\"Delta\"</code>} <code>\"Cumulative\"</code> Use to control whether metric counters use cumulative or delta temporality for data export."},{"location":"contributor-info/","title":"Contributor info","text":"<p>Open Banking Connector is an open-source project and welcomes contributions. Please contact us for more information about contributing to this project.</p> <p>See the following sections for contributor guidance on:</p> <ul> <li>documentation</li> <li>developer setup</li> </ul>"},{"location":"contributor-info/developer-setup/","title":"Developer setup","text":"<p>Open Banking Connector is an open-source project and the open-source repo contains files necessary for developers to build and test Open Banking Connector.</p> <p>The provided C# solution <code>&lt;repo&gt;\\FinnovationLabs.OpenBanking.Library.Connector.sln</code> includes both the web app and a number of test projects. It will allow you to build and test Open Banking Connector locally.</p> <p>To run Open Banking Connector tests on a local machine, you will need to first do the following:</p> <ul> <li>Install Open Banking UK root certificates</li> </ul>"},{"location":"contributor-info/developer-setup/#environment-selection","title":"Environment selection","text":"<p>Open Banking Connector can be run using different environments such as <code>development</code> and <code>production</code>. In fact, its behaviour is only actually sensitive to whether it is run in the <code>development</code> environment.</p> <p>By default, Open Banking Connector uses the <code>production</code> environment which should be used for all production deployments.</p> <p>In the <code>development</code> environment, logging, error handling and configuration defaults etc are modified to suit the needs of local development and testing. The <code>development</code> environment should not be used in production deployments.</p> <p>Environment selection is not configured by Open Banking Connector settings but normally via the Microsoft <code>DOTNET_ENVIRONMENT</code> or <code>ASPNETCORE_ENVIRONMENT</code> environment variables. These are used to configure the <code>development</code> environment for local app running (in <code>&lt;repo&gt;\\src\\OpenBanking.WebApp.Connector\\Properties\\launchSettings.json</code>) and local app testing (in <code>&lt;repo&gt;\\.runsettings</code>).</p>"},{"location":"contributor-info/developer-setup/install-obuk-root-certs/","title":"Install Open Banking UK root certificates","text":"<p>When running Open Banking Connector as a local .NET application, Open Banking UK root certificates must be installed to check remote certs from banks when creating TLS connections.</p> <p>OB UK root certificates are available for both sandbox and production environments. Please install one or both root certificates according to the intended use case.</p> <p>Each OB UK root certificate also has a corresponding issuing certificate but installing the root certificate alone is sufficient.</p>"},{"location":"contributor-info/developer-setup/install-obuk-root-certs/#download-root-certificates","title":"Download root certificates","text":"<p>Root certificates should first be downloaded from OB UK.</p> <p>Sandbox root certificate: <pre><code># Download sandbox cert from https://openbanking.atlassian.net/wiki/spaces/DZ/pages/252018873/OB+Root+and+Issuing+Certificates+for+Sandbox\nwget -O open-banking-sandbox-root-ca.cer \"https://openbanking.atlassian.net/wiki/download/attachments/252018873/OB_SandBox_PP_Root%20CA.cer?version=1&amp;modificationDate=1525354123970&amp;cacheVersion=1&amp;api=v2\"\n# Check fingerprint\nif openssl x509 -inform DER -in ./open-banking-sandbox-root-ca.cer -noout -fingerprint -sha1 | grep -q '3C:97:AD:3F:63:9B:21:EF:00:F3:39:93:90:61:6C:8A:7D:0D:5F:03'; then echo \"success\"; else echo \"failure\"; return 1; fi\n</code></pre></p> <p>Production root certificate: <pre><code># Download production cert from https://openbanking.atlassian.net/wiki/spaces/DZ/pages/80544075/OB+Root+and+Issuing+Certificates+for+Production\nwget -O open-banking-prod-root-ca.cer \"https://openbanking.atlassian.net/wiki/download/attachments/80544075/OpenBankingRootCA.cer?version=1&amp;modificationDate=1516021348170&amp;cacheVersion=1&amp;api=v2\"\n# Check fingerprint\nif openssl x509 -inform PEM -in ./open-banking-prod-root-ca.cer -noout -fingerprint -sha1 | grep -q 'BD:D9:DA:6C:21:B9:11:32:F8:0E:8B:09:D7:2C:43:F0:34:6B:E4:1F'; then echo \"success\"; else echo \"failure\"; return 1; fi\n</code></pre></p>"},{"location":"contributor-info/developer-setup/install-obuk-root-certs/#install-root-certificates","title":"Install root certificates","text":""},{"location":"contributor-info/developer-setup/install-obuk-root-certs/#windows","title":"Windows","text":"<p>On Windows, open the certificate manager (certlm.msc) and right-click \"Trusted Root Certification Authorities / Certificates\" and choose to import the certificate.</p>"},{"location":"contributor-info/developer-setup/install-obuk-root-certs/#macos","title":"macOS","text":"<p>On macOS (Big Sur), double-click the cert to add to the System Keychain and right-click to enable \"Always Trust\".</p>"},{"location":"contributor-info/developer-setup/install-obuk-root-certs/#ubuntu-linux-server-and-wsl2","title":"Ubuntu Linux (server and WSL2)","text":"<pre><code># Convert and move certs\nsudo openssl x509 -inform DER -in ./open-banking-sandbox-root-ca.cer -out /usr/local/share/ca-certificates/open-banking-sandbox-root-ca.crt\nsudo openssl x509 -inform PEM -in ./open-banking-prod-root-ca.cer -out /usr/local/share/ca-certificates/open-banking-prod-root-ca.crt\n# Adjust permissions\nsudo chmod 644 /usr/local/share/ca-certificates/open-banking-sandbox-root-ca.crt\nsudo chmod 644 /usr/local/share/ca-certificates/open-banking-prod-root-ca.crt\n# Install\nsudo update-ca-certificates\n</code></pre>"},{"location":"contributor-info/developer-setup/install-postgresql/","title":"Install PosgreSQL","text":""},{"location":"contributor-info/developer-setup/install-postgresql/#macos","title":"macOS","text":"<p>Install Postgres.app.</p>"},{"location":"contributor-info/developer-setup/install-postgresql/#ubuntu-linux","title":"Ubuntu Linux","text":"<p>For WSL, do the following (based on https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-database#install-postgresql):</p> <pre><code>sudo apt install -y postgresql postgresql-contrib\n#sudo systemctl enable postgresql # should work when systemd support enabled?\nsudo service postgresql start\n</code></pre> <p>For WSL, can auto-start by adding this to <code>/etc/wsl.conf</code>: <pre><code>[boot]\ncommand = \"service postgresql start\"\n</code></pre></p> <p>If not using WSL, install using:</p> <pre><code>sudo apt install postgresql\n</code></pre> <p>You will need to set a password: <pre><code>sudo -u postgres psql # then use \"\\password\" to change (set) password\n</code></pre></p>"},{"location":"contributor-info/developer-setup/install-postgresql/#windows","title":"Windows","text":"<p>We suggest to use the WSL2 installation on Windows to avoid a conflict. This can be accessed at <code>localhost</code> by tools such as JetBrains DataGrip.</p>"},{"location":"contributor-info/developer-setup/use-secret-manager/","title":"Use Microsoft's secret manager","text":"<p>When running Open Banking Connector as a .NET application from source code, and when in the development environment, Microsoft's secret manager can be used to provide configuration/secrets.</p> <p>To use the secret manager, you will need a <code>secrets.json</code> file in the appropriate directory (if you do not have one already). The Microsoft documentation here gives the path for this directory. Please note that the UserSecretsId for the app is <code>aa921213-9461-4f9e-8fec-153624ec67ad</code> as given in the web app <code>.csproj</code> file.</p> <p>You can then add key-value pairs to the <code>secrets.json</code> file to supply configuration to Open Banking Connector.</p> <p>Here is an example of what such a file might look like after configuring a software statement profile, transport certificate profile and signing certificate profile:</p> <pre><code>{\n  \"OpenBankingConnector:TransportCertificateProfiles:New1:Certificate\": \"-----BEGIN CERTIFICATE-----\\nabc\\n-----END CERTIFICATE-----\\n\",\n  \"OpenBankingConnector:TransportCertificateProfiles:New1:AssociatedKey\": \"-----BEGIN PRIVATE KEY-----\\nabc\\n-----END PRIVATE KEY-----\\n\",\n  \"OpenBankingConnector:SoftwareStatementProfiles:All:TransportCertificateProfileId\": \"New1\",\n  \"OpenBankingConnector:SoftwareStatementProfiles:All:SoftwareStatement\": \"a.b.c\",\n  \"OpenBankingConnector:SoftwareStatementProfiles:All:SigningCertificateProfileId\": \"New2\",\n  \"OpenBankingConnector:SoftwareStatementProfiles:All:DefaultFragmentRedirectUrl\": \"https://example.com/auth/fragment-redirect\",\n  \"OpenBankingConnector:SigningCertificateProfiles:New2:AssociatedKeyId\": \"abc\",\n  \"OpenBankingConnector:SigningCertificateProfiles:New2:AssociatedKey\": \"-----BEGIN PRIVATE KEY-----\\nabc\\n-----END PRIVATE KEY-----\\n\"\n}\n</code></pre> <p>Important: Some settings values are very sensitive, for example keys, and should be carefully and securely stored and managed.  They should never be stored in-repo, for example in additional or modified <code>appsettings.json</code> files, due to the risk of disclosure. The secret manager is designed to store secrets out-of-repo during code development and testing where other configuration providers may not be available.</p>"},{"location":"contributor-info/documentation/","title":"Documentation","text":"<p>This section provides contributor information both on creating documentation and publishing it to the docs website.  </p> <p>Documentation is written in Markdown and stored in the repo <code>./docs</code> folder.</p> <p>The documentation is available publicly:</p> <ul> <li>on the GitHub repo (reflects latest commits)</li> <li>on the docs website (reflects capture of documentation most recently pushed to <code>gh_pages</code> branch)</li> </ul> <p>We here provide guidance for</p> <ul> <li>updating documentation in the <code>./docs</code> folder</li> <li>deploying documentation from the <code>./docs</code> folder to the docs website.  </li> </ul>"},{"location":"contributor-info/documentation/deploy-documentation/","title":"Deploy documentation","text":"<p>Here are the steps required to:</p> <ul> <li> <p>prepare for deployment </p> </li> <li> <p>deploy documentation to website</p> </li> </ul>"},{"location":"contributor-info/documentation/deploy-documentation/#pre-requisites","title":"Pre-requisites","text":"<p>To publish documentation to the website, you will need to have permission to push to the <code>gh-pages</code> branch of the repo.</p> <p>You will require Python 3 and Material for MkDocs (mkdocs-material).</p> <p>Assuming you have installed Python, you can install Material for MkDocs as follows:</p> <pre><code>pip install mkdocs-material\npip install mkdocs-git-revision-date-localized-plugin \npip install mkdocs-render-swagger-plugin\n</code></pre>"},{"location":"contributor-info/documentation/deploy-documentation/#prepare-for-deployment","title":"Prepare for deployment","text":""},{"location":"contributor-info/documentation/deploy-documentation/#preview-website","title":"Preview website","text":"<p>To deploy the website locally for inspection and testing, please <code>cd</code> to the repo root and run the following command: <pre><code>mkdocs serve\n</code></pre> This will return the URL you can use to preview the website. Commit and push any corrections or updates required.</p>"},{"location":"contributor-info/documentation/deploy-documentation/#deploy-website","title":"Deploy website","text":"<p>Assuming you have permissions to push to the repo <code>gh-pages</code> branch, you can update the public website on GitHub Pages using: <pre><code>mkdocs gh-deploy -m \"Message\" -r publicRemote --ignore-version # adjust commit message and remote as required \n</code></pre></p> <p>N.B. The <code>--ignore-version</code> flag is used to solve the problem of Mkdocs confusing the tag version with the Mkdocs version which stops the website from being deployed.</p>"},{"location":"contributor-info/documentation/update-documentation/","title":"Update documentation","text":"<p>To update documentation:</p> <ul> <li>edit files in the repo <code>./docs</code> folder</li> <li>update the <code>nav</code> section in the repo <code>./mkdocs.yml</code> file to specify sections and links.</li> </ul> <p>In the docs, please ensure links to other repo files are relative links. For example: <pre><code>[Page](./page.md)\n</code></pre></p> <p>Once docs are updated, you can deploy the documentation.</p>"},{"location":"get-started/","title":"Get started","text":"<p>On this page, we describe how to get started with Open Banking Connector.</p> <p>The basic steps provided here will get you up and running with Open Banking Connector:</p> <ol> <li>Set up basic configuration</li> <li>Run the Open Banking Connector container</li> <li>Add a software statement and certificates</li> <li>Create a bank registration</li> <li>Use an account access consent to access account data</li> <li>Use a domestic payment consent to make a payment</li> <li>Use a domestic VRP consent to make a payment</li> </ol>"},{"location":"get-started/#set-up-basic-configuration","title":"Set up basic configuration","text":"<p>To run Open Banking Connector, some basic configuration is required including database settings. Please set this up.</p>"},{"location":"get-started/#run-the-open-banking-connector-container","title":"Run the Open Banking Connector container","text":"<p>Using the basic configuration from the previous step, you can pull and run the Open Banking Connector Docker container.</p>"},{"location":"get-started/#add-a-software-statement-and-certificates","title":"Add a software statement and certificates","text":"<p>In order to communicate with banks, you will need:</p> <ul> <li>a software statement</li> <li>a signed OB WAC transport certificate and key (used for mutual TLS when communicating with banks)</li> <li>a signed OBSeal signing certificate and key (used to sign and validate JWTs sent to banks)</li> </ul> <p>These can be created using the UK Open Banking Directory and following the instructions there. (Note that the sandbox and production environments of the Open Banking Directory are separate so please create these in the right environment and in both environments if connecting to both sandbox and production bank APIs).</p> <p>Please create these and add them to Open Banking Connector.</p>"},{"location":"get-started/#create-a-bank-registration","title":"Create a bank registration","text":"<p>Before using a bank's APIs you need to create a relationship with a bank by creating a bank registration.</p>"},{"location":"get-started/#use-an-account-access-consent-to-access-account-data","title":"Use an account access consent to access account data","text":"<p>With a bank registration that supports account information retrieval, you can create and authorise an account access consent.</p> <p>Once an account access consent is authorised, you can use it to get account data.</p>"},{"location":"get-started/#use-a-domestic-payment-consent-to-make-a-payment","title":"Use a domestic payment consent to make a payment","text":"<p>With a bank registration that supports payments, you can create and authorise a domestic payment consent.</p> <p>Once the domestic payment consent is authorised, you can confirm funds and make a payment.</p>"},{"location":"get-started/#use-a-domestic-vrp-consent-to-make-a-payment","title":"Use a domestic VRP consent to make a payment","text":"<p>With a bank registration that supports payments, you can create and authorise a domestic VRP consent.</p> <p>Once the domestic VRP consent is authorised, you can confirm funds and make a payment.</p>"},{"location":"get-started/account-access-consents/","title":"Account access consents","text":""},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/","title":"Create and authorise an account access consent","text":"<p>To access end-user account data, you must first create and authorise an account access consent.</p> <p>For demonstration purposes, here we will use manual browser end-user auth (i.e. cut and paste auth URL into browser) which is suitable for sandboxes such as the OBIE Modelo model bank.</p> <p>Supporting end-user auth with real banks requires creating a suitable app - please see here for more info.</p>"},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#create-an-account-access-consent","title":"Create an account access consent","text":"<p>An account access consent specifies the permissions that you seek the end-user to authorise. Since the available permissions differ between banks, Open Banking Connector allows you to use the template \"MaximumPermissions\" as an alternative to listing them explicitly.</p> <p>This template alongside the bank registration ID can be used to create an account access consent.</p> <p>Upon creation, Open Banking Connector will provide you with an ID for the account access consent which you can then use to create an auth context (auth session) and, following auth, get account data.</p>"},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#example-with-postman-and-obie-modelo-model-bank","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#create-an-auth-context","title":"Create an auth context","text":"<p>Create an auth context (auth session) for your account access consent to begin end-user auth.</p> <p>Upon creation, Open Banking Connector will provide you with an auth URL for end-user auth.</p>"},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#example-with-postman-and-obie-modelo-model-bank_1","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#perform-end-user-auth","title":"Perform end-user auth","text":"<p>To perform manual end-user auth (suitable for sandboxes), copy the auth URL into a browser and go through authentication.</p> <p>When this is complete you will be redirected back to your redirect URL, which by default will be the default fragment redirect URL from the software statement profile used when creating the consent's bank registration. Even if no web page exists at this URL, you can still copy the URL fragment from your browser to obtain the bank redirect data. </p>"},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#supply-redirect-data-to-open-banking-connector","title":"Supply redirect data to Open Banking Connector","text":"<p>To complete end-user auth, pass on to Open Banking Connector the bank redirect data supplied by the bank as a fragment appended to the redirect URL. This needs to be done within 10 minutes of auth context creation or you will need to create a new auth context and attempt auth again.</p> <p>Upon receipt and successful validation of bank redirect data, Open Banking Connector will obtain tokens for the consent in preparation for requests to get account data.</p>"},{"location":"get-started/account-access-consents/create-and-authorise-account-access-consent/#example-with-postman-and-obie-modelo-model-bank_2","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/account-access-consents/get-account-data/","title":"Get account data","text":"<p>You can get account data once you have created and authorised an account access consent. The ID of the account access consent must be supplied as a header so Open Banking Connector can supply/obtain the correct token for the bank request.</p> <p>In this section, we first get a user's accounts.</p> <p>Once their accounts (and, crucially, bank account IDs) are obtained, we are then able to get account-specific data.</p> <p>We here show getting balances for first user account obtained as an example of how to get account-specific data. Transactions, standing orders, etc may be obtained similarly.</p>"},{"location":"get-started/account-access-consents/get-account-data/#get-accounts","title":"Get accounts","text":"<p>We get a user's accounts by specifying the ID of the authorised consent.</p> <p>The data returned will include the external (bank) account IDs which can be used subsequently to retrieve account-specific data.</p>"},{"location":"get-started/account-access-consents/get-account-data/#example-with-postman-and-obie-modelo-model-bank","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/account-access-consents/get-account-data/#get-balances","title":"Get balances","text":"<p>Using an external (bank) account ID obtained from user accounts, we can obtain the balances associated with an account.</p>"},{"location":"get-started/account-access-consents/get-account-data/#example-with-postman-and-obie-modelo-model-bank_1","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/add-software-statement-and-certificates/","title":"Add software statement and certificates","text":"<p>Before creating a bank registration, you will need to add at least one software statement to Open Banking Connector. In UK Open Banking, a software statement identifies a third-party provider (TPP) application which can create registrations (OAuth2 clients) with banks. A TPP can have multiple software statements (applications) and this is fully supported by Open Banking Connector.</p> <p>Each software statement must refer to both an OBWAC transport certificate and an OBSeal signing certificate - these will then be used in conjunction with that software statement. These should be added to Open Banking Connector before adding the software statement that refers to them. Each certificate (OBWAC or OBSeal) can be used by more than one software statement.</p> <p>Note that the OBWAC and OBSeal certificate objects added to Open Banking Connector must each include a key SecretSource (supported sources at time of writing are environment variables (not recommended) and AWS SSM secrets, others can be easily added as required).</p> <p>Follow the instructions in the UK Open Banking Directory to create required software statements, signed OBWAC certificates (including keys) and signed OBSeal certificates (including keys). Note that the sandbox and production environments of the Open Banking Directory are separate so please create things in the right environment depending on intended use. You can then add them to Open Banking Connector.</p> <p>Below are instructions on how to add an OBWAC certificate, OBSeal certificate and software statement to Open Banking Connector.</p>"},{"location":"get-started/add-software-statement-and-certificates/#add-an-obwac-transport-certificate","title":"Add an OBWAC transport certificate","text":"<p>An OBWAC transport certificate is used for mutual TLS when communicating with banks.</p> <p>You can add an OBWAC transport certificate using the  <code>POST /manage/obwac-certificates</code> endpoint.</p> <p>Upon adding, Open Banking Connector will provide you with an ID for the OBWAC transport certificate which you can then use when adding a software statement.</p>"},{"location":"get-started/add-software-statement-and-certificates/#example-postman-request","title":"Example Postman request","text":""},{"location":"get-started/add-software-statement-and-certificates/#add-an-obseal-signing-certificate","title":"Add an OBSeal signing certificate","text":"<p>An OBSeal signing certificate and its associated key is used to sign and validate JWTs sent to banks.</p> <p>You can add an OBSeal signing certificate using the  <code>POST /manage/obseal-certificates</code> endpoint.</p> <p>Upon adding, Open Banking Connector will provide you with an ID for the OBSeal signing certificate which you can then use when adding a software statement.</p>"},{"location":"get-started/add-software-statement-and-certificates/#example-postman-request_1","title":"Example Postman request","text":""},{"location":"get-started/add-software-statement-and-certificates/#add-a-software-statement","title":"Add a software statement","text":"<p>In UK Open Banking, a software statement identifies a third-party provider (TPP) application that can create registrations (OAuth2 clients) with banks. A TPP can create and use multiple software statements and this is fully supported by Open Banking Connector.</p> <p>You can add a software statement using the <code>POST /manage/software-statements</code> endpoint.</p> <p>Upon adding, Open Banking Connector will provide you with an ID for the software statement which you can then use when creating a bank registration.</p> <p>Note that software statements are validated on application start-up so please be alert to warning and error messages related to these.</p>"},{"location":"get-started/add-software-statement-and-certificates/#example-postman-request_2","title":"Example Postman request","text":""},{"location":"get-started/create-bank-registration/","title":"Create a bank registration","text":"<p>To access Open Banking APIs provided by a bank, you need to create a bank registration (OAuth2 client) which establishes a relationship between you and the bank.</p> <p>To do this, first identify the bank profile for the bank you wish to connect to. Bank profiles are listed in the bank integrations table.</p> <p>Each bank registration requires the ID of a previously-added software statement.</p> <p>You can then use the bank profile and software statement ID to create a new bank registration.</p> <p>Upon creation, Open Banking Connector will provide you with an ID for the bank registration which you can then use to create consents.</p>"},{"location":"get-started/create-bank-registration/#example-with-postman-and-obie-modelo-model-bank","title":"Example with Postman and OBIE Modelo model bank","text":""},{"location":"get-started/domestic-payment-consents/","title":"Domestic payment consents","text":""},{"location":"get-started/domestic-payment-consents/confirm-funds-and-make-payment/","title":"Confirm funds and make a payment","text":"<p>Before making a payment, you may optionally perform a confirmation of funds (CoF) check.</p> <p>You can then make the payment.</p> <p>After making a payment, you can check the payment status by \"reading\" the payment.</p>"},{"location":"get-started/domestic-payment-consents/confirm-funds-and-make-payment/#confirm-funds","title":"Confirm funds","text":"<p>You can confirm availability of end-user funds for a given payment amount by \"reading\" a domestic payment consent funds confirmation. This request will be passed to the bank and the bank will respond indicating if funds are available. You can do this using the example request below which is made to the <code>GET /pisp/domestic-payment-consents/{{domestic payment consent ID}}/funds-confirmation</code> endpoint.</p> <pre><code># Read domestic payment consent funds confirmation\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nGET http://{{host}}/pisp/domestic-payment-consents/{{domestic payment consent ID}}/funds-confirmation\nContent-Type: application/json\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with a response which will include ExternalApiResponse.Data.FundsAvailableResult.FundsAvailable (assuming that this is provided by the bank). This will equal <code>true</code> if funds are available.</p>"},{"location":"get-started/domestic-payment-consents/confirm-funds-and-make-payment/#make-a-payment","title":"Make a payment","text":"<p>You can make a payment by \"creating\" a domestic payment. You can do this using the example request below which is made to the <code>POST /pisp/domestic-payments</code> endpoint. It is important that the \"Initiation\" and \"Risk\" sections match those of the corresponding consent.</p> <pre><code># Create domestic payment\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\n# Note 2: the parameter ExternalApiRequest.Data.ConsentId, if left empty (which is recommended), will be auto-populated by Open Banking Connector.\n\nPOST http://{{host}}/pisp/domestic-payments\nContent-Type: application/json\n\n{\n  \"DomesticPaymentConsentId\": \"{{domestic payment consent ID}}\",\n  \"ExternalApiRequest\": {\n    \"Data\": {\n      \"ConsentId\": \"\",\n      \"Initiation\": {\n        \"InstructionIdentification\": \"{{instruction ID text}}\",\n        \"EndToEndIdentification\": \"{{end-to-end ID text}}\",\n        \"InstructedAmount\": {\n          \"Amount\": \"{{payment amount, e.g. 5.00}}\",\n          \"Currency\": \"GBP\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"{{sort code followed by account number as 14-digit number}}\",\n          \"Name\": \"{{account holder's name, e.g. John Smith}}\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"{{reference text}}\"\n        }\n      }\n    },\n    \"Risk\": {\n      \"PaymentContextCode\": \"TransferToSelf\",\n      \"ContractPresentIndicator\": \"true\"\n    }\n  }\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with a response including ExternalApiResponse.Data.DomesticPaymentId which is the external API (bank) ID of the domestic payment.</p>"},{"location":"get-started/domestic-payment-consents/confirm-funds-and-make-payment/#check-payment-status-by-reading-payment","title":"Check payment status by reading payment","text":"<p>The status of a payment usually changes with time from a pending/unsettled status to a settled or rejected status. You can check the status of a payment by \"reading\" the domestic payment. You can do this using the example request below which is made to the <code>GET /pisp/domestic-payments/{{domestic payment external API ID}}</code> endpoint.</p> <pre><code># Read domestic payment\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nGET http://{{host}}/pisp/domestic-payments/{{domestic payment external API ID}}\nx-obc-domestic-payment-consent-id: {{domestic payment consent ID}}\n</code></pre> <p>Upon reading, Open Banking Connector will provide you with a response including ExternalApiResponse.Data.Status which is the status of the domestic payment.</p>"},{"location":"get-started/domestic-payment-consents/create-and-authorise-domestic-payment-consent/","title":"Create and authorise a domestic payment consent","text":"<p>To set up a domestic payment, you must create and then authorise a domestic payment consent.</p> <p>You can then use the consent to make a payment.</p>"},{"location":"get-started/domestic-payment-consents/create-and-authorise-domestic-payment-consent/#create-a-domestic-payment-consent","title":"Create a domestic payment consent","text":"<p>A domestic payment consent describes the payment permission associated with a domestic payment. When authorising a domestic payment consent, an end-user will be asked to approve the payment.</p> <p>A domestic payment consent suitable for paying another account in the same name (<code>TransferToSelf</code>) can be created for a given bank registration by using the example request below. This request is made to the <code>POST /pisp/domestic-payment-consents</code> endpoint and will create a domestic payment consent object at the bank. Note that in this example the creditor (payee) account is specified but the debtor (payer) account is not. This allows the end-user to select a debtor account during consent auth.</p> <pre><code># Create domestic payment consent for payment to account in same name (TransferToSelf)\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nPOST http://{{host}}/pisp/domestic-payment-consents\nContent-Type: application/json\n\n{\n  \"BankRegistrationId\": \"{{bank registration ID}}\",\n  \"ExternalApiRequest\": {\n    \"Data\": {\n      \"ReadRefundAccount\": \"Yes\",\n      \"Initiation\": {\n        \"InstructionIdentification\": \"{{instruction ID text}}\",\n        \"EndToEndIdentification\": \"{{end-to-end ID text}}\",\n        \"InstructedAmount\": {\n          \"Amount\": \"{{payment amount, e.g. 5.00}}\",\n          \"Currency\": \"GBP\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"{{sort code followed by account number as 14-digit number}}\",\n          \"Name\": \"{{account holder's name, e.g. John Smith}}\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"{{reference text}}\"\n        }\n      }\n    },\n    \"Risk\": {\n      \"PaymentContextCode\": \"TransferToSelf\",\n      \"ContractPresentIndicator\": \"true\"\n    }   \n  }\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with an ID for the domestic payment consent which can then be used to create an auth context (auth session) and, following auth, make a payment.</p>"},{"location":"get-started/domestic-payment-consents/create-and-authorise-domestic-payment-consent/#create-an-auth-context","title":"Create an auth context","text":"<p>Create an auth context (auth session) for your domestic payment consent to begin end-user auth. You can do this using the example request below made to the <code>POST /pisp/domestic-payment-consent-auth-contexts</code> endpoint.</p> <pre><code># Create domestic payment auth context\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nPOST http://{{host}}/pisp/domestic-payment-consent-auth-contexts\nContent-Type: application/json\n\n{\n  \"DomesticPaymentConsentId\": \"{{domestic payment consent ID}}}\"\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with an auth URL for end-user auth.</p>"},{"location":"get-started/domestic-payment-consents/create-and-authorise-domestic-payment-consent/#perform-end-user-auth","title":"Perform end-user auth","text":"<p>Note: For demonstration purposes, here we will use manual browser end-user auth (i.e. paste the auth URL into a browser) which is suitable for sandboxes such as the OBIE model bank. Supporting end-user auth with real banks requires creating a suitable app - see here for more info.</p> <p>To start manual end-user auth (suitable for sandboxes), copy the auth URL into a browser and go through the bank's authorisation process.</p> <p>When this is complete you will be redirected back to your redirect URL, which by default will be the default fragment ( or query) redirect URL from the software statement specified when creating the consent's bank registration. The bank redirect data will be included in the fragment (or query) of the URL. Even if no web page exists at the URL, you can still copy the URL fragment (or query) from your browser to capture the bank redirect data.</p> <p>To complete end-user auth, pass to Open Banking Connector the bank redirect data supplied by the bank in the fragment ( or query) of the redirect URL. This needs to be done within 10 minutes of auth context creation or you will need to create a new auth context and attempt auth again.</p> <p>Upon receipt and successful validation of the bank redirect data, Open Banking Connector will obtain tokens for the consent in preparation for future requests.</p>"},{"location":"get-started/domestic-vrp-consents/","title":"Domestic VRP consents","text":""},{"location":"get-started/domestic-vrp-consents/confirm-funds-and-make-payment/","title":"Confirm funds and make a payment","text":"<p>Before making a payment, you may optionally perform a confirmation of funds (CoF) check.</p> <p>You can then make the payment.</p> <p>After making a payment, you can check the payment status by \"reading\" the payment.</p>"},{"location":"get-started/domestic-vrp-consents/confirm-funds-and-make-payment/#confirm-funds","title":"Confirm funds","text":"<p>You can confirm availability of end-user funds for a given payment amount by \"creating\" a domestic VRP consent funds confirmation. This request will be passed to the bank and the bank will respond indicating if funds are available. You can do this using the example request below which is made to the <code>POST /vrp/domestic-vrp-consents/{{domestic VRP consent ID}}/funds-confirmation</code> endpoint.</p> <p>Note that <code>\"{{reference text}}\"</code> should match that used when creating the domestic VRP consent.</p> <pre><code># Create domestic VRP consent funds confirmation\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nPOST http://{{host}}/vrp/domestic-vrp-consents/{{domestic VRP consent ID}}/funds-confirmation\nContent-Type: application/json\n\n{\n  \"ExternalApiRequest\": {\n    \"Data\": {\n      \"ConsentId\": \"\",\n      \"Reference\": \"{{reference text}}\",\n      \"InstructedAmount\": {\n        \"Amount\": \"{{payment amount, e.g. 5.00}}\",\n        \"Currency\": \"GBP\"\n      }\n    }\n  }\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with a response including ExternalApiResponse.Data.FundsAvailableResult.FundsAvailable which will equal <code>\"Available\"</code> if funds are available.</p>"},{"location":"get-started/domestic-vrp-consents/confirm-funds-and-make-payment/#make-a-payment","title":"Make a payment","text":"<p>You can make a payment by \"creating\" a domestic VRP. You can do this using the example request below which is made to the <code>POST /vrp/domestic-vrps</code> endpoint. It is important that the \"Initiation\" and \"Risk\" sections match those of the corresponding consent.</p> <pre><code># Create domestic VRP\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\n# Note 2: the parameter ExternalApiRequest.Data.ConsentId, if left empty (which is recommended), will be auto-populated by Open Banking Connector.\n\nPOST http://{{host}}/vrp/domestic-vrps\nContent-Type: application/json\n\n{\n  \"DomesticVrpConsentId\": \"{{domestic VRP consent ID}}\",\n  \"ExternalApiRequest\": {\n    \"Data\": {\n      \"ConsentId\": \"\",\n      \"PSUAuthenticationMethod\": \"UK.OBIE.SCANotRequired\",\n      \"PSUInteractionType\": \"OffSession\",\n        \"VRPType\": \"UK.OBIE.VRPType.Sweeping\",\n      \"Initiation\": {\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"{{sort code followed by account number as 14-digit number}}\",\n          \"Name\": \"{{account holder's name, e.g. John Smith}}\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"{{reference text}}\"\n        }\n      },\n      \"Instruction\": {\n        \"InstructionIdentification\": \"{{instruction ID text}}\",\n        \"EndToEndIdentification\": \"{{end-to-end ID text}}\",\n        \"InstructedAmount\": {\n          \"Amount\": \"{{payment amount, e.g. 5.00}}\",\n          \"Currency\": \"GBP\"\n        },\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"{{sort code followed by account number as 14-digit number}}\",\n          \"Name\": \"{{account holder's name, e.g. John Smith}}\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"{{reference text}}\"\n        }\n      }\n    },\n    \"Risk\": {\n      \"PaymentContextCode\": \"TransferToSelf\",\n      \"ContractPresentIndicator\": \"true\"\n    }\n  }\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with a response including ExternalApiResponse.Data.DomesticVRPId which is the external API (bank) ID of the domestic VRP.</p>"},{"location":"get-started/domestic-vrp-consents/confirm-funds-and-make-payment/#check-payment-status-by-reading-payment","title":"Check payment status by reading payment","text":"<p>The status of a payment usually changes with time from a pending/unsettled status to a settled or rejected status. You can check the status of a payment by \"reading\" the domestic VRP. You can do this using the example request below which is made to the  <code>GET /vrp/domestic-vrps/{{domestic VRP external API ID}}</code> endpoint.</p> <pre><code># Read domestic VRP\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nGET http://{{host}}/vrp/domestic-vrps/{{domestic VRP external API ID}}\nx-obc-domestic-vrp-consent-id: {{domestic VRP consent ID}}\n</code></pre> <p>Upon reading, Open Banking Connector will provide you with a response including ExternalApiResponse.Data.Status which is the status of the domestic VRP (payment).</p>"},{"location":"get-started/domestic-vrp-consents/create-and-authorise-domestic-vrp-consent/","title":"Create and authorise a domestic VRP consent","text":"<p>A variable recurring payment ( VRP) is a recurring payment governed by control parameters and a single end-user consent. It can be used to provide similar functionality to a Direct Debit but has more flexibility and fine-grained control.</p> <p>A sweeping variable recurring payment is a VRP which supports transfers between accounts in the same name.</p> <p>To set up a VRP, you must create and then authorise a domestic VRP consent.</p> <p>You can then use the consent to make payments.</p>"},{"location":"get-started/domestic-vrp-consents/create-and-authorise-domestic-vrp-consent/#create-a-domestic-vrp-consent","title":"Create a domestic VRP consent","text":"<p>A domestic VRP consent describes payment permissions associated with a VRP. When authorising a domestic VRP consent, an end-user will be asked to agree to these permissions.</p> <p>A domestic VRP consent suitable for sweeping can be created for a given bank registration by using the example request below. This request is made to the  <code>POST /vrp/domestic-vrp-consents</code> endpoint and will create a domestic VRP consent object at the bank. Note that in this example the creditor (payee) account is specified but the debtor (payer) account is not. This allows the end-user to select a debtor account during consent auth. Both individual and period maximum payment amounts are specified in this example. See the Open Banking spec for other options for control parameters.</p> <pre><code># Create domestic VRP consent for sweeping\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nPOST http://{{host}}/vrp/domestic-vrp-consents\nContent-Type: application/json\n\n{\n  \"BankRegistrationId\": \"{{bank registration ID}}\",\n  \"ExternalApiRequest\": {\n    \"Data\": {\n      \"ReadRefundAccount\": \"Yes\",\n      \"ControlParameters\": {\n        \"PSUAuthenticationMethods\": [\n          \"UK.OBIE.SCANotRequired\"\n        ],\n        \"PSUInteractionTypes\": [\n          \"OffSession\"\n        ],\n        \"VRPType\": [\n          \"UK.OBIE.VRPType.Sweeping\"\n        ],\n        \"MaximumIndividualAmount\": {\n          \"Amount\": \"{{amount limit for individual payments, e.g. 5.00}}\",\n          \"Currency\": \"GBP\"\n        },\n        \"PeriodicLimits\": [\n          {\n            \"Amount\": \"{{amount limit across period, e.g. 50.00}}\",\n            \"Currency\": \"GBP\",\n            \"PeriodAlignment\": \"Consent\",\n            \"PeriodType\": \"Month\"\n          }\n        ]\n      },\n      \"Initiation\": {\n        \"CreditorAccount\": {\n          \"SchemeName\": \"UK.OBIE.SortCodeAccountNumber\",\n          \"Identification\": \"{{sort code followed by account number as 14-digit number}}\",\n          \"Name\": \"{{account holder's name, e.g. John Smith}}\"\n        },\n        \"RemittanceInformation\": {\n          \"Reference\": \"{{reference text}}\"\n        }\n      }\n    },\n    \"Risk\": {\n      \"PaymentContextCode\": \"TransferToSelf\",\n      \"ContractPresentIndicator\": \"true\"\n    }\n  }\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with an ID for the domestic VRP consent which can then be used to create an auth context (auth session) and, following auth, make one or more payments.</p>"},{"location":"get-started/domestic-vrp-consents/create-and-authorise-domestic-vrp-consent/#create-an-auth-context","title":"Create an auth context","text":"<p>Create an auth context (auth session) for your domestic VRP consent to begin end-user auth. You can do this using the example request below which is made to the  <code>POST /vrp/domestic-vrp-consent-auth-contexts</code> endpoint.</p> <pre><code># Create domestic VRP auth context\n\n# Note: placeholders like {{description}} should be replaced with appropriate values.\n\nPOST http://{{host}}/vrp/domestic-vrp-consent-auth-contexts\nContent-Type: application/json\n\n{\n  \"DomesticVrpConsentId\": \"{{domestic VRP consent ID}}\"\n}\n</code></pre> <p>Upon creation, Open Banking Connector will provide you with an auth URL for end-user auth.</p>"},{"location":"get-started/domestic-vrp-consents/create-and-authorise-domestic-vrp-consent/#perform-end-user-auth","title":"Perform end-user auth","text":"<p>Note: For demonstration purposes, here we will use manual browser end-user auth (i.e. paste the auth URL into a browser) which is suitable for sandboxes such as the OBIE model bank. Supporting end-user auth with real banks requires creating a suitable app - see here for more info.</p> <p>To start manual end-user auth (suitable for sandboxes), copy the auth URL into a browser and go through the bank's authorisation process.</p> <p>When this is complete you will be redirected back to your redirect URL, which by default will be the default fragment ( or query) redirect URL from the software statement specified when creating the consent's bank registration. The bank redirect data will be included in the fragment (or query) of the URL. Even if no web page exists at the URL, you can still copy the URL fragment (or query) from your browser to capture the bank redirect data.</p> <p>To complete end-user auth, pass to Open Banking Connector the bank redirect data supplied by the bank in the fragment ( or query) of the redirect URL. This needs to be done within 10 minutes of auth context creation or you will need to create a new auth context and attempt auth again.</p> <p>Upon receipt and successful validation of the bank redirect data, Open Banking Connector will obtain tokens for the consent in preparation for future requests.</p>"},{"location":"get-started/run-docker-container/","title":"Run Docker container","text":"<p>Open Banking Connector Docker images (including the latest) are available here. The Docker images are produced from the Dockerfile in the source code repo. Git tags are used so you can see the exact source code used to create each Docker image.</p> <p>You can pull and run the Open Banking Connector Docker image using a command such as: <pre><code># Substitute env file location and image version in this command\ndocker run -dt --env-file \"&lt;path&gt;/docker.env\" -p 50000:80 --name \"open_banking_connector\" ghcr.io/finlabsuk/open-banking-connector-web-app:x.y.z # substitute version for x.y.z\n</code></pre> where a .env file is used to supply environment variables.</p>"},{"location":"get-started/set-up-basic-configuration/","title":"Set up basic configuration","text":"<p>Configuration in Open Banking Connector is described in detail here.</p> <p>Here we describe some basic configuration settings that can be used to get started with Open Banking Connector.</p> <p>Configuration settings are generally specified via environment variables but can also be specified using command line options. Here we describe configuration settings using environment variables.</p> <p>The simplest way to use these settings (environment variables) when running Open Banking Connector locally is to place them in a <code>.env</code> file. This file can then be supplied this as argument <code>--env-file</code> to <code>docker run</code> when running the Open Banking Connector Docker container.</p> <p>Note that Open Banking Connector uses the .NET convention of replacing \":\" with \"__\" when environment variables are used. So the configuration setting <code>OpenBankingConnector:Database:Provider</code> is set by the environment variable <code>OpenBankingConnector__Database__Provider</code>.</p>"},{"location":"get-started/set-up-basic-configuration/#basic-configuration-settings","title":"Basic configuration settings","text":""},{"location":"get-started/set-up-basic-configuration/#database-settings","title":"Database settings","text":"<p>Database settings are documented here.</p> <p>Open Banking Connector requires connection to a PostgreSQL database.</p> <p>The following environment variables can be used to configure use of a PostgreSQL database: <pre><code># Database settings\nOpenBankingConnector__Database__Provider=PostgreSql # currently unnecessary as this is the default but recommended for future-proofing\nOpenBankingConnector__Database__EnsureDatabaseCreated=true # suggest initially true to allow Open Banking Connector to create database on first use, then later false\nOpenBankingConnector__Database__ConnectionStrings__PostgreSql=\"Host=localhost;Database=test;Username=postgres\" # substitute your connection string without password\nOpenBankingConnector__Database__PasswordSettingNames__PostgreSql=OpenBankingConnector:Custom:PostgreSqlPassword # substitute name of environment variable providing database password\nOpenBankingConnector__Custom__PostgreSqlPassword=placeholder # example arbitrary environment variable that supplies database password\n</code></pre></p>"},{"location":"get-started/set-up-basic-configuration/#encryption-key-settings","title":"Encryption key settings","text":"<p>Encryption key settings are documented here.</p> <p>Below are the environment variables necessary to configure a single 256-bit encryption key which can be generated using example code here).</p> <pre><code># Encryption key settings\nOpenBankingConnector__Keys__CurrentEncryptionKeyId=MyKey # use encryption key with ID \"MyKey\"\nOpenBankingConnector__Keys__Encryption__MyKey__Value=Q95hOua2S5wXK9W5q/j0+1xIThOSbGhUl2Wano2uTc4= # substitute your base64-encoded 256-bit encryption key (see text for link to example generation code)\n</code></pre>"},{"location":"get-started/set-up-basic-configuration/#bank-profile-settings","title":"Bank profile settings","text":"<p>Almost all bank profile information is supplied via source code.</p> <p>However, sometimes important information such as org IDs and URLs cannot be obtained from public sources and is only available to those registered with the UK Open Banking Directory or from bank dev portals. In such cases, extra information needs to be provided to Open Banking Connector via configuration to complete the bank profile definitions.</p> <p>Important: It is only necessary to provide information that relates to bank profiles you want to use. When using a bank profile for the first time, if any required information from configuration is not available, Open Banking Connector will provide an error with details.</p> <p>For reference, we list here currently-required configuration for supported bank groups.</p> <p>Please contact us if you need any assistance populating these configuration values.</p> <pre><code># Bank profile settings\n\n# Bank group: Barclays\nOpenBankingConnector__BankProfiles__Barclays__Default__FinancialId=xyz # substitute value\n\n# Bank group: Co-operative\nOpenBankingConnector__BankProfiles__Cooperative__Default__FinancialId=xyz # substitute value\n\n# Bank group: HSBC\nOpenBankingConnector__BankProfiles__Hsbc__Default__FinancialId=xyz # substitute value\n\n# Bank group: Lloyds\nOpenBankingConnector__BankProfiles__Lloyds__MbnaPersonal__FinancialId=xyz # substitute value\nOpenBankingConnector__BankProfiles__Lloyds__LloydsPersonal__FinancialId=xyz # substitute value\nOpenBankingConnector__BankProfiles__Lloyds__BankOfScotlandPersonal__FinancialId=xyz # substitute value\n\n# Bank group: Monzo\nOpenBankingConnector__BankProfiles__Monzo__Monzo__FinancialId=xyz # substitute value\n\n# Bank group: Santander\nOpenBankingConnector__BankProfiles__Santander__Default__FinancialId=xyz # substitute value\n\n# Bank group: Starling\nOpenBankingConnector__BankProfiles__Starling__Default__FinancialId=xyz # substitute value\n\n# Sandbox settings (only required if using sandbox bank profiles)\nOpenBankingConnector__BankProfiles__Lloyds__Sandbox__IssuerUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__Lloyds__Sandbox__PaymentInitiationApi__BaseUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__RoyalBankOfScotlandSandbox__PaymentInitiationApi__BaseUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__RoyalBankOfScotlandSandbox__IssuerUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__RoyalBankOfScotlandSandbox__AccountAndTransactionApi__BaseUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__NatWestSandbox__PaymentInitiationApi__BaseUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__NatWestSandbox__IssuerUrl=xyz # substitute value\nOpenBankingConnector__BankProfiles__NatWest__NatWestSandbox__AccountAndTransactionApi__BaseUrl=xyz # substitute value\n</code></pre>"},{"location":"guide/","title":"Guide","text":"<p>This section provides more information about where Open Banking Connector sits in your architecture and and what it does. It also covers infrastructure requirements.</p>"},{"location":"guide/#where-does-open-banking-connector-sit-in-my-architecture","title":"Where does Open Banking Connector sit in my architecture?","text":"<p>The following diagram shows where Open Banking Connector sits in your architecture:</p> <p></p> <p>Essentially Open Banking Connector runs as a micro-service in your back-end that processes your requests to banks.</p>"},{"location":"guide/#what-does-open-banking-connector-do","title":"What does Open Banking Connector do?","text":""},{"location":"guide/#open-banking-connector-provides-simpler-uk-open-banking-apis","title":"Open Banking Connector provides simpler UK Open Banking APIs","text":"<p>The HTTP APIs provided by Open Banking Connector to your back-end include several that aim to be \"simpler\" versions of their UK Open Banking equivalents such as the Account and Transaction API.</p> <p>The objective is not to re-design UK Open Banking but rather to simplify things by:</p> <ul> <li>Absorbing bank differences so that you can use the same requests for all banks.</li> <li>Absorbing complexities related to security aspects of Open Banking such as MTLS, tokens, signing etc.</li> </ul> <p>A typical use of Open Banking APIs would be make the following requests:</p> <ol> <li>Create a registration with a bank to establish a relationship</li> <li>Create a consent at the bank and then get an end-user to authorise it</li> <li>Perform API calls relevant to the consent such as retrieving transactions or balances</li> </ol> <p>Please see Get Started for examples of basic operations such as these.</p> <p>The main simplifications for these requests when using Open Banking Connector are as follows:</p> <ul> <li>When creating a bank registration, rather than supply detailed configuration you only need to specify a bank profile and software statement profile. The bank profile associates all of a bank's specific configuration and customisation with the registration and any subsequent consents. The software statement profile ensures the right TPP identity is used when creating the registration.</li> <li>When creating a consent, you supply the bank registration ID (returned when creating the registration) instead of a token and can specify the template \"MaximumPermissions\" instead of needing to know what permissions are supported by a particular bank.</li> <li>When retrieving AISP objects such as transactions etc, you supply the consent ID (returned when creating the consent) instead of a token</li> <li>All data request and response objects are based on a single UK Open Banking spec revision and Open Banking Connector is capable of converting to and from older spec revisions if required for a bank</li> <li>No bank tokens are required as these are obtained, used and refreshed automatically by Open Banking Connector keeping them separate from other parts of your back-end</li> </ul>"},{"location":"guide/#open-banking-connector-supports-end-user-auth-in-your-app","title":"Open Banking Connector supports end-user auth in your app","text":"<p>Open Banking Connector is designed to allow you to support redirection-based authentication in your app. A great deal of information on this is provided by OBIE here.</p> <p>Your app needs to interact with Open Banking Connector both before and after end-user auth.</p> <p>Before end-user auth you need to create a time-sensitive auth context (auth session) in Open Banking Connector. This will remain valid for 10 minutes. If for any reason auth fails or too much time elapses, please create a new auth context before re-attempting auth. For an AISP consent, you can create an auth context using the POST /aisp/account-access-consent-auth-contexts endpoint. Upon creating an auth context, Open Banking Connector will return an auth URL you can redirect the user to. This URL should be used within 5 minutes to avoid signed object expiry.</p> <p>After end-user auth, the bank will redirect to a secure URL your app provides (the redirect URL which can be selected from those in your software statement assertion (SSA) when creating a bank registration). This URL should display appropriate customer messaging and process the bank redirect data in the URL fragment. This redirect data needs to be forwarded by your back-end to Open Banking Connector via the POST /auth/redirect-delegate endpoint. This must occur within the 10-minute lifetime of the auth context.</p> <p>There are many possible scenarios for end-user auth and it is strongly recommended to discuss your planned implementation with us so we can discuss security threat models and best practices.</p>"},{"location":"guide/#open-banking-connector-stores-bank-registration-and-consent-data","title":"Open Banking Connector stores bank registration and consent data","text":"<p>Open Banking Connector uses a database to store information about registrations and consents. This includes encrypted tokens associated with consents and auth session (auth context) information. It does not store or cache end-user transactions, balances etc.</p>"},{"location":"guide/#what-are-open-banking-connectors-infrastructure-requirements","title":"What are Open Banking Connector's infrastructure requirements?","text":"<p>To host Open Banking Connector in your back-end infrastructure, you will need:</p> <ul> <li>a host (e.g. VM or Kubernetes cluster) to run the Open Banking Connector Docker image</li> <li>a relational database. Currently only PosgreSQL is supported in production but, as Open Banking Connector uses EF Core (Microsoft's .NET ORM), other database integrations should be relatively easy to add (for example, SQLite is supported in development environment).</li> <li>a means of supplying configuration/secrets to the Open Banking Connector container. Environment variables can be used and, in the case of secrets, could be e.g. dynamically pulled from a key secret vault. Parameters from AWS SSM Parameter Store can be used and we are open to adding other cloud sources/vaults as required. ASP.NET Core user secrets are supported in development environment.</li> </ul> <p>Sensitive data including encrypted tokens are stored in the database. Thus it should be tightly secured including using at-rest encryption and not allowing access from any other application.</p> <p>Secrets are essentially sensitive configuration settings such as keys. Consideration should be given to the security of these and also issues such as key rotation.</p> <p>Please feel free to discuss with us any issues related to deployment of Open Banking Connector in your back-end infrastructure and in particular any issues related to security.</p>"},{"location":"guide/#what-are-bank-profiles","title":"What are bank profiles?","text":"<p>All bank-specific information, customisations and behaviour is stored in an object called a bank profile. There is one for each bank and sandbox supported by Open Banking Connector and these are maintained to support changes in bank APIs and behaviour.</p> <p>Currently-supported banks and their bank profiles are listed here.</p>"}]}