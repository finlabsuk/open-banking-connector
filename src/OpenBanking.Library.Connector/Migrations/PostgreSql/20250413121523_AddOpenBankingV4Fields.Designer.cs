// <auto-generated />
using System;
using FinnovationLabs.OpenBanking.Library.Connector.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinnovationLabs.OpenBanking.Library.Connector.Migrations.PostgreSql
{
    [DbContext(typeof(PostgreSqlDbContext))]
    [Migration("20250413121523_AddOpenBankingV4Fields")]
    partial class AddOpenBankingV4Fields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("AuthContextCodeVerifier")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_code_verifier");

                    b.Property<DateTimeOffset>("AuthContextModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auth_context_modified")
                        .HasColumnOrder(103);

                    b.Property<string>("AuthContextModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_modified_by")
                        .HasColumnOrder(104);

                    b.Property<string>("AuthContextNonce")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_nonce")
                        .HasColumnOrder(102);

                    b.Property<string>("AuthContextState")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_state")
                        .HasColumnOrder(101);

                    b.Property<Guid>("BankRegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_registration_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("CreatedWithV4")
                        .HasColumnType("boolean")
                        .HasColumnName("created_with_v4");

                    b.Property<string>("ExternalApiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_api_id")
                        .HasColumnOrder(100);

                    b.Property<string>("ExternalApiUserId")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id");

                    b.Property<DateTimeOffset>("ExternalApiUserIdModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_api_user_id_modified");

                    b.Property<string>("ExternalApiUserIdModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id_modified_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("_accessTokenAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_access_token")
                        .HasColumnOrder(105);

                    b.Property<int>("_accessTokenExpiresIn")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_expires_in")
                        .HasColumnOrder(106);

                    b.Property<DateTimeOffset>("_accessTokenModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_modified")
                        .HasColumnOrder(108);

                    b.Property<string>("_accessTokenModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("access_token_modified_by")
                        .HasColumnOrder(109);

                    b.Property<string>("_accessTokenRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_refresh_token")
                        .HasColumnOrder(107);

                    b.HasKey("Id")
                        .HasName("pk_account_access_consent");

                    b.HasIndex("BankRegistrationId")
                        .HasDatabaseName("ix_account_access_consent_bank_registration_id");

                    b.ToTable("account_access_consent", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AuthContext", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AppSessionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("app_session_id");

                    b.Property<string>("CodeVerifier")
                        .HasColumnType("text")
                        .HasColumnName("code_verifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nonce");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_auth_context");

                    b.HasIndex("AppSessionId")
                        .IsUnique()
                        .HasDatabaseName("ix_auth_context_app_session_id");

                    b.HasIndex("CodeVerifier")
                        .IsUnique()
                        .HasDatabaseName("ix_auth_context_code_verifier");

                    b.HasIndex("Nonce")
                        .IsUnique()
                        .HasDatabaseName("ix_auth_context_nonce");

                    b.HasIndex("State")
                        .IsUnique()
                        .HasDatabaseName("ix_auth_context_state");

                    b.ToTable("auth_context", (string)null);

                    b.HasDiscriminator().HasValue("AuthContext");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.Property<Guid?>("EncryptionKeyDescriptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("encryption_key_description_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("KeyId")
                        .HasColumnType("text")
                        .HasColumnName("key_id");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<byte[]>("_nonce")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("nonce");

                    b.Property<byte[]>("_tag")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("tag");

                    b.Property<byte[]>("_text")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("text");

                    b.Property<string>("_text2")
                        .HasColumnType("text")
                        .HasColumnName("text2");

                    b.HasKey("Id")
                        .HasName("pk_encrypted_object");

                    b.HasIndex("EncryptionKeyDescriptionId")
                        .HasDatabaseName("ix_encrypted_object_encryption_key_description_id");

                    b.HasIndex("_nonce")
                        .IsUnique()
                        .HasDatabaseName("ix_encrypted_object_nonce");

                    b.ToTable("encrypted_object", (string)null);

                    b.HasDiscriminator().HasValue("EncryptedObject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("AispUseV4")
                        .HasColumnType("boolean")
                        .HasColumnName("aisp_use_v4");

                    b.Property<string>("AuthorizationEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authorization_endpoint");

                    b.Property<string>("BankGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_group");

                    b.Property<string>("BankProfile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bank_profile");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultFragmentRedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_fragment_redirect_uri");

                    b.Property<string>("DefaultQueryRedirectUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_query_redirect_uri");

                    b.Property<string>("DefaultResponseModeOverride")
                        .HasColumnType("text")
                        .HasColumnName("default_response_mode_override");

                    b.Property<string>("ExternalApiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_api_id");

                    b.Property<string>("ExternalApiSecret")
                        .HasColumnType("text")
                        .HasColumnName("external_api_secret");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("JwksUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwks_uri");

                    b.Property<bool>("PispUseV4")
                        .HasColumnType("boolean")
                        .HasColumnName("pisp_use_v4");

                    b.Property<string>("RedirectUris")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("RegistrationAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("registration_access_token");

                    b.Property<string>("RegistrationEndpoint")
                        .HasColumnType("text")
                        .HasColumnName("registration_endpoint");

                    b.Property<string>("RegistrationScope")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("registration_scope");

                    b.Property<Guid?>("SoftwareStatementId")
                        .HasColumnType("uuid")
                        .HasColumnName("software_statement_id");

                    b.Property<string>("SoftwareStatementProfileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("software_statement_profile_id");

                    b.Property<string>("SoftwareStatementProfileOverride")
                        .HasColumnType("text")
                        .HasColumnName("software_statement_profile_override");

                    b.Property<string>("TokenEndpoint")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint");

                    b.Property<string>("TokenEndpointAuthMethod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_endpoint_auth_method");

                    b.Property<bool>("UseSimulatedBank")
                        .HasColumnType("boolean")
                        .HasColumnName("use_simulated_bank");

                    b.Property<bool>("VrpUseV4")
                        .HasColumnType("boolean")
                        .HasColumnName("vrp_use_v4");

                    b.HasKey("Id")
                        .HasName("pk_bank_registration");

                    b.HasIndex("SoftwareStatementId")
                        .HasDatabaseName("ix_bank_registration_software_statement_id");

                    b.ToTable("bank_registration", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.EncryptionKeyDescriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("LegacyName")
                        .HasColumnType("text")
                        .HasColumnName("legacy_name");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_encryption_key_description");

                    b.HasIndex("LegacyName")
                        .IsUnique()
                        .HasDatabaseName("ix_encryption_key_description_legacy_name");

                    b.ToTable("encryption_key_description", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ObSealCertificateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AssociatedKey")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("associated_key");

                    b.Property<string>("AssociatedKeyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("associated_key_id");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_ob_seal_certificate");

                    b.ToTable("ob_seal_certificate", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ObWacCertificateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AssociatedKey")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("associated_key");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.HasKey("Id")
                        .HasName("pk_ob_wac_certificate");

                    b.ToTable("ob_wac_certificate", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.SoftwareStatementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultFragmentRedirectUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_fragment_redirect_url");

                    b.Property<Guid>("DefaultObSealCertificateId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_ob_seal_certificate_id");

                    b.Property<Guid>("DefaultObWacCertificateId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_ob_wac_certificate_id");

                    b.Property<string>("DefaultQueryRedirectUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("default_query_redirect_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified");

                    b.Property<string>("OrganisationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organisation_id");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<bool>("SandboxEnvironment")
                        .HasColumnType("boolean")
                        .HasColumnName("sandbox_environment");

                    b.Property<string>("SoftwareId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("software_id");

                    b.HasKey("Id")
                        .HasName("pk_software_statement");

                    b.HasIndex("DefaultObSealCertificateId")
                        .HasDatabaseName("ix_software_statement_default_ob_seal_certificate_id");

                    b.HasIndex("DefaultObWacCertificateId")
                        .HasDatabaseName("ix_software_statement_default_ob_wac_certificate_id");

                    b.ToTable("software_statement", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("AuthContextCodeVerifier")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_code_verifier");

                    b.Property<DateTimeOffset>("AuthContextModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auth_context_modified")
                        .HasColumnOrder(103);

                    b.Property<string>("AuthContextModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_modified_by")
                        .HasColumnOrder(104);

                    b.Property<string>("AuthContextNonce")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_nonce")
                        .HasColumnOrder(102);

                    b.Property<string>("AuthContextState")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_state")
                        .HasColumnOrder(101);

                    b.Property<Guid>("BankRegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_registration_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("CreatedWithV4")
                        .HasColumnType("boolean")
                        .HasColumnName("created_with_v4");

                    b.Property<string>("ExternalApiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_api_id")
                        .HasColumnOrder(100);

                    b.Property<string>("ExternalApiUserId")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id");

                    b.Property<DateTimeOffset>("ExternalApiUserIdModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_api_user_id_modified");

                    b.Property<string>("ExternalApiUserIdModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id_modified_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("_accessTokenAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_access_token")
                        .HasColumnOrder(105);

                    b.Property<int>("_accessTokenExpiresIn")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_expires_in")
                        .HasColumnOrder(106);

                    b.Property<DateTimeOffset>("_accessTokenModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_modified")
                        .HasColumnOrder(108);

                    b.Property<string>("_accessTokenModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("access_token_modified_by")
                        .HasColumnOrder(109);

                    b.Property<string>("_accessTokenRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_refresh_token")
                        .HasColumnOrder(107);

                    b.HasKey("Id")
                        .HasName("pk_domestic_payment_consent");

                    b.HasIndex("BankRegistrationId")
                        .HasDatabaseName("ix_domestic_payment_consent_bank_registration_id");

                    b.ToTable("domestic_payment_consent", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    b.Property<string>("AuthContextCodeVerifier")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_code_verifier");

                    b.Property<DateTimeOffset>("AuthContextModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auth_context_modified")
                        .HasColumnOrder(103);

                    b.Property<string>("AuthContextModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_modified_by")
                        .HasColumnOrder(104);

                    b.Property<string>("AuthContextNonce")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_nonce")
                        .HasColumnOrder(102);

                    b.Property<string>("AuthContextState")
                        .HasColumnType("text")
                        .HasColumnName("auth_context_state")
                        .HasColumnOrder(101);

                    b.Property<Guid>("BankRegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_registration_id")
                        .HasColumnOrder(1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("CreatedWithV4")
                        .HasColumnType("boolean")
                        .HasColumnName("created_with_v4");

                    b.Property<string>("ExternalApiId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_api_id")
                        .HasColumnOrder(100);

                    b.Property<string>("ExternalApiUserId")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id");

                    b.Property<DateTimeOffset>("ExternalApiUserIdModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_api_user_id_modified");

                    b.Property<string>("ExternalApiUserIdModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("external_api_user_id_modified_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset>("IsDeletedModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("is_deleted_modified");

                    b.Property<string>("IsDeletedModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("is_deleted_modified_by");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<string>("_accessTokenAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_access_token")
                        .HasColumnOrder(105);

                    b.Property<int>("_accessTokenExpiresIn")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_expires_in")
                        .HasColumnOrder(106);

                    b.Property<DateTimeOffset>("_accessTokenModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_modified")
                        .HasColumnOrder(108);

                    b.Property<string>("_accessTokenModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("access_token_modified_by")
                        .HasColumnOrder(109);

                    b.Property<string>("_accessTokenRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token_refresh_token")
                        .HasColumnOrder(107);

                    b.HasKey("Id")
                        .HasName("pk_domestic_vrp_consent");

                    b.HasIndex("BankRegistrationId")
                        .HasDatabaseName("ix_domestic_vrp_consent_bank_registration_id");

                    b.ToTable("domestic_vrp_consent", (string)null);
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentAuthContext", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AuthContext");

                    b.Property<Guid>("AccountAccessConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_access_consent_id");

                    b.HasIndex("AccountAccessConsentId")
                        .HasDatabaseName("ix_auth_context_account_access_consent_id");

                    b.HasDiscriminator().HasValue("AccountAccessConsentAuthContext");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentAuthContext", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AuthContext");

                    b.Property<Guid>("DomesticPaymentConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_payment_consent_id");

                    b.HasIndex("DomesticPaymentConsentId")
                        .HasDatabaseName("ix_auth_context_domestic_payment_consent_id");

                    b.HasDiscriminator().HasValue("DomesticPaymentConsentAuthContext");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentAuthContext", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AuthContext");

                    b.Property<Guid>("DomesticVrpConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_vrp_consent_id");

                    b.HasIndex("DomesticVrpConsentId")
                        .HasDatabaseName("ix_auth_context_domestic_vrp_consent_id");

                    b.HasDiscriminator().HasValue("DomesticVrpConsentAuthContext");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentAccessToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("AccountAccessConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_access_consent_id");

                    b.HasIndex("AccountAccessConsentId")
                        .HasDatabaseName("ix_encrypted_object_account_access_consent_id");

                    b.HasDiscriminator().HasValue("AccountAccessConsentAccessToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentRefreshToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("AccountAccessConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_access_consent_id");

                    b.HasIndex("AccountAccessConsentId")
                        .HasDatabaseName("ix_encrypted_object_account_access_consent_id");

                    b.HasDiscriminator().HasValue("AccountAccessConsentRefreshToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ExternalApiSecretEntity", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("BankRegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_registration_id");

                    b.HasIndex("BankRegistrationId")
                        .HasDatabaseName("ix_encrypted_object_bank_registration_id");

                    b.HasDiscriminator().HasValue("ExternalApiSecretEntity");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.RegistrationAccessTokenEntity", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("BankRegistrationId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_registration_id");

                    b.HasIndex("BankRegistrationId")
                        .HasDatabaseName("ix_encrypted_object_bank_registration_id");

                    b.HasDiscriminator().HasValue("RegistrationAccessTokenEntity");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentAccessToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("DomesticPaymentConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_payment_consent_id");

                    b.HasIndex("DomesticPaymentConsentId")
                        .HasDatabaseName("ix_encrypted_object_domestic_payment_consent_id");

                    b.HasDiscriminator().HasValue("DomesticPaymentConsentAccessToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentRefreshToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("DomesticPaymentConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_payment_consent_id");

                    b.HasIndex("DomesticPaymentConsentId")
                        .HasDatabaseName("ix_encrypted_object_domestic_payment_consent_id");

                    b.HasDiscriminator().HasValue("DomesticPaymentConsentRefreshToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentAccessToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("DomesticVrpConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_vrp_consent_id");

                    b.HasIndex("DomesticVrpConsentId")
                        .HasDatabaseName("ix_encrypted_object_domestic_vrp_consent_id");

                    b.HasDiscriminator().HasValue("DomesticVrpConsentAccessToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentRefreshToken", b =>
                {
                    b.HasBaseType("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject");

                    b.Property<Guid>("DomesticVrpConsentId")
                        .HasColumnType("uuid")
                        .HasColumnName("domestic_vrp_consent_id");

                    b.HasIndex("DomesticVrpConsentId")
                        .HasDatabaseName("ix_encrypted_object_domestic_vrp_consent_id");

                    b.HasDiscriminator().HasValue("DomesticVrpConsentRefreshToken");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", "BankRegistrationNavigation")
                        .WithMany()
                        .HasForeignKey("BankRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_access_consent_bank_registration_bank_registration_");

                    b.Navigation("BankRegistrationNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.EncryptedObject", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.EncryptionKeyDescriptionEntity", "EncryptionKeyDescriptionNavigation")
                        .WithMany()
                        .HasForeignKey("EncryptionKeyDescriptionId")
                        .HasConstraintName("fk_encrypted_object_encryption_key_description_encryption_key_");

                    b.Navigation("EncryptionKeyDescriptionNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.SoftwareStatementEntity", "SoftwareStatementNavigation")
                        .WithMany()
                        .HasForeignKey("SoftwareStatementId")
                        .HasConstraintName("fk_bank_registration_software_statement_software_statement_id");

                    b.Navigation("SoftwareStatementNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.SoftwareStatementEntity", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ObSealCertificateEntity", "DefaultObSealCertificateNavigation")
                        .WithMany()
                        .HasForeignKey("DefaultObSealCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_software_statement_ob_seal_certificate_default_ob_seal_cert");

                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ObWacCertificateEntity", "DefaultObWacCertificateNavigation")
                        .WithMany()
                        .HasForeignKey("DefaultObWacCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_software_statement_ob_wac_certificate_default_ob_wac_certif");

                    b.Navigation("DefaultObSealCertificateNavigation");

                    b.Navigation("DefaultObWacCertificateNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", "BankRegistrationNavigation")
                        .WithMany()
                        .HasForeignKey("BankRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_domestic_payment_consent_bank_registration_bank_registratio");

                    b.Navigation("BankRegistrationNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", "BankRegistrationNavigation")
                        .WithMany()
                        .HasForeignKey("BankRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_domestic_vrp_consent_bank_registration_bank_registration_id");

                    b.Navigation("BankRegistrationNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentAuthContext", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", "AccountAccessConsentNavigation")
                        .WithMany()
                        .HasForeignKey("AccountAccessConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_context_account_access_consent_account_access_consent_");

                    b.Navigation("AccountAccessConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentAuthContext", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", "DomesticPaymentConsentNavigation")
                        .WithMany()
                        .HasForeignKey("DomesticPaymentConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_context_domestic_payment_consent_domestic_payment_cons");

                    b.Navigation("DomesticPaymentConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentAuthContext", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", "DomesticVrpConsentNavigation")
                        .WithMany()
                        .HasForeignKey("DomesticVrpConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_auth_context_domestic_vrp_consent_domestic_vrp_consent_id");

                    b.Navigation("DomesticVrpConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentAccessToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", "AccountAccessConsentNavigation")
                        .WithMany("AccountAccessConsentAccessTokensNavigation")
                        .HasForeignKey("AccountAccessConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_account_access_consent_account_access_cons");

                    b.Navigation("AccountAccessConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsentRefreshToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", "AccountAccessConsentNavigation")
                        .WithMany("AccountAccessConsentRefreshTokensNavigation")
                        .HasForeignKey("AccountAccessConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_account_access_consent_account_access_cons");

                    b.Navigation("AccountAccessConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.ExternalApiSecretEntity", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", "BankRegistrationNavigation")
                        .WithMany("ExternalApiSecretsNavigation")
                        .HasForeignKey("BankRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_bank_registration_bank_registration_id");

                    b.Navigation("BankRegistrationNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.RegistrationAccessTokenEntity", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", "BankRegistrationNavigation")
                        .WithMany("RegistrationAccessTokensNavigation")
                        .HasForeignKey("BankRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_bank_registration_bank_registration_id");

                    b.Navigation("BankRegistrationNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentAccessToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", "DomesticPaymentConsentNavigation")
                        .WithMany("DomesticPaymentConsentAccessTokensNavigation")
                        .HasForeignKey("DomesticPaymentConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_domestic_payment_consent_domestic_payment_");

                    b.Navigation("DomesticPaymentConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsentRefreshToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", "DomesticPaymentConsentNavigation")
                        .WithMany("DomesticPaymentConsentRefreshTokensNavigation")
                        .HasForeignKey("DomesticPaymentConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_domestic_payment_consent_domestic_payment_");

                    b.Navigation("DomesticPaymentConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentAccessToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", "DomesticVrpConsentNavigation")
                        .WithMany("DomesticVrpConsentAccessTokensNavigation")
                        .HasForeignKey("DomesticVrpConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_domestic_vrp_consent_domestic_vrp_consent_");

                    b.Navigation("DomesticVrpConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsentRefreshToken", b =>
                {
                    b.HasOne("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", "DomesticVrpConsentNavigation")
                        .WithMany("DomesticVrpConsentRefreshTokensNavigation")
                        .HasForeignKey("DomesticVrpConsentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_encrypted_object_domestic_vrp_consent_domestic_vrp_consent_");

                    b.Navigation("DomesticVrpConsentNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.AccountAndTransaction.AccountAccessConsent", b =>
                {
                    b.Navigation("AccountAccessConsentAccessTokensNavigation");

                    b.Navigation("AccountAccessConsentRefreshTokensNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.Management.BankRegistrationEntity", b =>
                {
                    b.Navigation("ExternalApiSecretsNavigation");

                    b.Navigation("RegistrationAccessTokensNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.PaymentInitiation.DomesticPaymentConsent", b =>
                {
                    b.Navigation("DomesticPaymentConsentAccessTokensNavigation");

                    b.Navigation("DomesticPaymentConsentRefreshTokensNavigation");
                });

            modelBuilder.Entity("FinnovationLabs.OpenBanking.Library.Connector.Models.Persistent.VariableRecurringPayments.DomesticVrpConsent", b =>
                {
                    b.Navigation("DomesticVrpConsentAccessTokensNavigation");

                    b.Navigation("DomesticVrpConsentRefreshTokensNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
