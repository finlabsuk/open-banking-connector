//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagAisp.Models
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class File
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Links relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        [Newtonsoft.Json.JsonProperty("Self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Self { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("First", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Prev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Next { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Last { get; set; } = default!;

    }

    /// <summary>
    /// Meta Data relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Meta
    {
        [Newtonsoft.Json.JsonProperty("TotalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstAvailableDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableDateTime { get; set; } = default!;

    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made. The following fields are optional only for accounts that are switched:
    /// <br/>
    /// <br/>  * Data.Currency  
    /// <br/>  * Data.AccountType  
    /// <br/>  * Data.AccountSubType
    /// <br/>
    /// <br/>For all other accounts, the fields must be populated by the ASPSP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBAccount6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountType1Code? AccountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1Code? AccountSubType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Account>? Account { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Servicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_0? Servicer { get; set; } = default!;

    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBAccount6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountType1Code AccountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountSubType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1Code AccountSubType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBAccount6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountType1Code AccountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountSubType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1Code AccountSubType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Account2> Account { get; set; } = new System.Collections.ObjectModel.Collection<Account2>();

        [Newtonsoft.Json.JsonProperty("Servicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_0? Servicer { get; set; } = default!;

    }

    /// <summary>
    /// Specifies the status of account resource in code form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAccountStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ProForma")]
        ProForma = 4,

    }

    /// <summary>
    /// The amount of the most recent direct debit collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_0
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_1
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Transaction charges to be paid by the charge bearer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_10
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the last (most recent) Standing Order instruction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_11
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the first Standing Order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the next Standing Order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the final Standing Order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement benefit type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_5
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement fee type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_6
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement interest amount type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_7
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the amount type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_8
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalBalanceSubType1Code? SubType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money in the cash transaction entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBActiveOrHistoricCurrencyAndAmount_9
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies the nature of the postal address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressTypeCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryTo")]
        DeliveryTo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MailTo")]
        MailTo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POBox")]
        POBox = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Statement")]
        Statement = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBCAData1
    {
        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the BCA account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Borrowing details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft? Overdraft { get; set; } = default!;

        /// <summary>
        /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeesCharges>? OtherFeesCharges { get; set; } = default!;

    }

    /// <summary>
    /// Balance type, in a coded form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBBalanceType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingAvailable")]
        ClosingAvailable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingBooked")]
        ClosingBooked = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingCleared")]
        ClosingCleared = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Expected")]
        Expected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ForwardAvailable")]
        ForwardAvailable = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InterimAvailable")]
        InterimAvailable = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"InterimBooked")]
        InterimBooked = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"InterimCleared")]
        InterimCleared = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OpeningAvailable")]
        OpeningAvailable = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OpeningBooked")]
        OpeningBooked = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"OpeningCleared")]
        OpeningCleared = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PreviouslyClosedBooked")]
        PreviouslyClosedBooked = 12,

    }

    /// <summary>
    /// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBankTransactionCodeStructure1
    {
        /// <summary>
        /// Specifies the family within a domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Specifies the sub-product family within a specific family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBeneficiary5
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_0? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_0? CreditorAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBeneficiary5Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBeneficiary5Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_0? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBCashAccount5_0 CreditorAccount { get; set; } = new OBCashAccount5_0();

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBranchAndFinancialInstitutionIdentification5_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// <br/>This is the servicer of the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBranchAndFinancialInstitutionIdentification5_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// <br/>This is the servicer of the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBranchAndFinancialInstitutionIdentification6_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Financial institution servicing an account for the creditor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBranchAndFinancialInstitutionIdentification6_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Financial institution servicing an account for the debtor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBBranchAndFinancialInstitutionIdentification6_2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress6? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBCashAccount5_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBCashAccount5_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        /// <summary>
        /// Beneficiary account identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBCashAccount6_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBCashAccount6_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Indicates whether the amount is a credit or a debit. 
    /// <br/>Usage: A zero amount is considered to be a credit amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Indicates whether the transaction is a credit or a debit entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Indicates whether the balance is a credit or a debit balance. 
    /// <br/>Usage: A zero balance is considered to be a credit balance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Set of elements used to provide details on the currency exchange.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBCurrencyExchange5
    {
        /// <summary>
        /// Currency from which an amount is to be converted in a currency conversion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SourceCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string SourceCurrency { get; set; } = default!;

        /// <summary>
        /// Currency into which an amount is to be converted in a currency conversion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TargetCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? TargetCurrency { get; set; } = default!;

        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? UnitCurrency { get; set; } = default!;

        /// <summary>
        /// Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.
        /// <br/>Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Unique identification to unambiguously identify the foreign exchange contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuotationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? QuotationDate { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructedAmount? InstructedAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Status of a transaction entry on the books of the account servicer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBEntryStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Booked")]
        Booked = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,

    }

    /// <summary>
    /// Specifies the Mutability of the Transaction record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBTransactionMutability1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Mutable")]
        Mutable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Immutable")]
        Immutable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBError1
    {
        /// <summary>
        /// Low level textual error code, e.g., UK.OBIE.Field.Missing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ErrorCode { get; set; } = default!;

        /// <summary>
        /// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
        /// <br/>OBIE doesn't standardise this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string Message { get; set; } = default!;

        /// <summary>
        /// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// An array of detail error codes, and messages, and URLs to documentation to help remediation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBErrorResponse1
    {
        /// <summary>
        /// High level textual error code, to help categorize the errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string Message { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OBError1> Errors { get; set; } = new System.Collections.ObjectModel.Collection<OBError1>();

    }

    /// <summary>
    /// Specifies the sub type of account (product family group).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalAccountSubType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ChargeCard")]
        ChargeCard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditCard")]
        CreditCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentAccount")]
        CurrentAccount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EMoney")]
        EMoney = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Loan")]
        Loan = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Mortgage")]
        Mortgage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PrePaidCard")]
        PrePaidCard = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Savings")]
        Savings = 7,

    }

    /// <summary>
    /// Specifies the type of account (personal or business).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 1,

    }

    /// <summary>
    /// Amount sub type, in a coded form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalBalanceSubType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BaseCurrency")]
        BaseCurrency = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalCurrency")]
        LocalCurrency = 1,

    }

    /// <summary>
    /// Specifies the status of the direct debit in code form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalDirectDebitStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    /// <summary>
    /// Party type, in a coded form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalPartyType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delegate")]
        Delegate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Joint")]
        Joint = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sole")]
        Sole = 2,

    }

    /// <summary>
    /// Specifies the scheduled payment date type requested
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalScheduleType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Execution")]
        Execution = 1,

    }

    /// <summary>
    /// Specifies the status of the standing order in code form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalStandingOrderStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inactive")]
        Inactive = 1,

    }

    /// <summary>
    /// Statement type, in a coded form.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalStatementType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosure")]
        AccountClosure = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Interim")]
        Interim = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RegularPeriodic")]
        RegularPeriodic = 4,

    }

    /// <summary>
    /// Details of the merchant involved in the transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBMerchantDetails1
    {
        /// <summary>
        /// Name by which the merchant is known.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? MerchantName { get; set; } = default!;

        /// <summary>
        /// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 3)]
        public string? MerchantCategoryCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBPCAData1
    {
        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails2? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the PCA account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest2? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Details about Overdraft rates, fees &amp; charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft2? Overdraft { get; set; } = default!;

        /// <summary>
        /// Contains details of fees and charges which are not associated with either borrowing or features/benefits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeesCharges2? OtherFeesCharges { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBParty2
    {
        [Newtonsoft.Json.JsonProperty("PartyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string PartyId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PartyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? PartyNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PartyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalPartyType1Code? PartyType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FullLegalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? FullLegalName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LegalStructure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegalStructure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficialOwnership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeneficialOwnership { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? EmailAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
        public string? Phone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
        public string? Mobile { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPartyRelationships1? Relationships { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Address>? Address { get; set; } = default!;

    }

    /// <summary>
    /// The Party's relationships with other resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBPartyRelationships1
    {
        /// <summary>
        /// Relationship to the Account resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account3? Account { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBPostalAddress6
    {
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAddressTypeCode? AddressType { get; set; } = default!;

        /// <summary>
        /// Identification of a division of a large organisation or building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Department { get; set; } = default!;

        /// <summary>
        /// Identification of a sub-division of a large organisation or building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubDepartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SubDepartment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? TownName { get; set; } = default!;

        /// <summary>
        /// Identifies a subdivision of a country such as state, region, county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        /// <summary>
        /// Nation with its own government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(7)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadAccount6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data { get; set; } = new Data();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadBalance1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data2 Data { get; set; } = new Data2();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadBeneficiary5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data3 Data { get; set; } = new Data3();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadConsent1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data4 Data { get; set; } = new Data4();

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBRisk2 Risk { get; set; } = new OBRisk2();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadConsentResponse1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data5 Data { get; set; } = new Data5();

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRisk2? Risk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadDataStatement2
    {
        [Newtonsoft.Json.JsonProperty("Statement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatement2>? Statement { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadDataTransaction6
    {
        [Newtonsoft.Json.JsonProperty("Transaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBTransaction6>? Transaction { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadDirectDebit2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data6 Data { get; set; } = new Data6();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadOffer1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data7 Data { get; set; } = new Data7();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadParty2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data8 Data { get; set; } = new Data8();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadParty3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data9 Data { get; set; } = new Data9();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    /// <summary>
    /// Product details of Other Product which is not avaiable in the standard list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadProduct2
    {
        /// <summary>
        /// Aligning with the read write specs structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data10 Data { get; set; } = new Data10();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadScheduledPayment3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data11 Data { get; set; } = new Data11();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadStandingOrder6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data12 Data { get; set; } = new Data12();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadStatement2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBReadDataStatement2 Data { get; set; } = new OBReadDataStatement2();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBReadTransaction6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBReadDataTransaction6 Data { get; set; } = new OBReadDataTransaction6();

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    /// <summary>
    /// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Account Info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBRisk2
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBScheduledPayment3
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ScheduledPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalScheduleType1Code ScheduledType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_1();

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_1? CreditorAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBScheduledPayment3Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ScheduledPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalScheduleType1Code ScheduledType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_1();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBScheduledPayment3Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ScheduledPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalScheduleType1Code ScheduledType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_1();

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBCashAccount5_1 CreditorAccount { get; set; } = new OBCashAccount5_1();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStandingOrder6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
        public string Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStandingOrderStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_1? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStandingOrder6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
        public string Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStandingOrderStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStandingOrder6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(NotKnown)$|^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
        public string Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStandingOrderStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBCashAccount5_1 CreditorAccount { get; set; } = new OBCashAccount5_1();

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStatement2
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStatementType1Code Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementAmount>? StatementAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue>? StatementValue { get; set; } = default!;

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue? TotalValue { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStatement2Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStatementType1Code Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit2>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee2>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest2>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime2>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate2>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue2>? StatementValue { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBStatement2Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalStatementType1Code Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit3>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee3>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest3>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementAmount2>? StatementAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime3>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate3>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue3>? StatementValue { get; set; } = default!;

    }

    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBSupplementaryData1
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBTransaction6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_1 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBEntryStatus1Code Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset BookingDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? TransactionInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_9();

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCashBalance? Balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MerchantDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMerchantDetails1? MerchantDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_0? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_2? DebtorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_1? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBTransaction6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_1 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBEntryStatus1Code Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset BookingDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_9();

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBTransaction6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_1 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBEntryStatus1Code Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset BookingDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? TransactionInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_9();

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCashBalance? Balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MerchantDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMerchantDetails1? MerchantDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_0? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_2? DebtorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_1? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    /// <summary>
    /// Set of elements to describe the card instrument used in the transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBTransactionCardInstrument1
    {
        /// <summary>
        /// Name of the card scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CardSchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionCardInstrument1CardSchemeName CardSchemeName { get; set; } = default!;

        /// <summary>
        /// The card authorisation type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionCardInstrument1AuthorisationType? AuthorisationType { get; set; } = default!;

        /// <summary>
        /// Name of the cardholder using the card instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

    }

    /// <summary>
    /// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OBTransactionCashBalance
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_2 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBBalanceType1Code Type { get; set; } = default!;

        /// <summary>
        /// Amount of money of the cash balance after a transaction entry is applied to the account..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount Amount { get; set; } = new Amount();

    }

    /// <summary>
    /// Categorisation of fees and charges into standard categories.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeCategory1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FCOT")]
        FCOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCRE")]
        FCRE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FCSV")]
        FCSV = 2,

    }

    /// <summary>
    /// Frequency at which the overdraft charge is applied to the account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How often is the overdraft fee/charge calculated for the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How frequently the fee/charge is applied to the account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How frequently the fee/charge is calculated
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// Period e.g. day, week, month etc. for which the fee/charge is capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// Fee/Charge Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Methods of calculating interest
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestCalculationMethod1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ITCO")]
        ITCO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ITOT")]
        ITOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ITSI")]
        ITSI = 2,

    }

    /// <summary>
    /// Type of interest rate, Fixed or Variable
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestFixedVariableType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFI")]
        INFI = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INVA")]
        INVA = 1,

    }

    /// <summary>
    /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestRateType1Code_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    /// <summary>
    /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestRateType1Code_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    /// <summary>
    /// Min Max type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_MinMaxType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FMMN")]
        FMMN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FMMX")]
        FMMX = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_0
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other application frequencies that are not available in the standard code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_1
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other calculation frequency which is not available in the standard code set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_2
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other Fee type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_3
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other fee rate type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_4
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other fee rate type which is not in the standard rate type list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_5
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other application frequencies not covered in the standard code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_6
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other calculation frequency which is not available in standard code set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_7
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other fee rate type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherCodeType1_8
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other Fee/charge type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OB_OtherFeeChargeDetailType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeCategory1Code FeeCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_OverdraftFeeType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Period e.g. day, week, month etc. for which the fee/charge is capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_Period1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// Set of elements to fully identify a proprietary bank transaction code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProprietaryBankTransactionCodeStructure1
    {
        /// <summary>
        /// Proprietary bank transaction code to identify the underlying transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Identification of the issuer of the proprietary bank transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

    }

    /// <summary>
    /// Specifies the Beneficiary Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBBeneficiaryType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Trusted")]
        Trusted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ordinary")]
        Ordinary = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Model
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify an account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify an account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDetails
    {
        /// <summary>
        /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
        /// <br/>
        /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
        /// <br/>With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment>? Segment { get; set; } = default!;

        /// <summary>
        /// The length/duration of the fee free period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeFreeLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the promotional length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLengthPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDetailsFeeFreeLengthPeriod? FeeFreeLengthPeriod { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Core product details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditInterest
    {
        /// <summary>
        /// The group of tiers or bands for which credit interest can be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBandSet> TierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<TierBandSet>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overdraft
    {
        /// <summary>
        /// Associated Notes about the overdraft rates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier band set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBandSet> OverdraftTierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBandSet>();

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeesCharges
    {
        /// <summary>
        /// TariffType which defines the fee and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeesChargesTariffType? TariffType { get; set; } = default!;

        /// <summary>
        /// Name of the tariff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? TariffName { get; set; } = default!;

        /// <summary>
        /// Other tariff type which is not in the standard list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherTariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherTariffType? OtherTariffType { get; set; } = default!;

        /// <summary>
        /// Other fees/charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeChargeDetail> FeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<FeeChargeDetail>();

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap>? FeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstructedAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDetails2
    {
        /// <summary>
        /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
        /// <br/>
        /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
        /// <br/>With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment2>? Segment { get; set; } = default!;

        /// <summary>
        /// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyMaximumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MonthlyMaximumCharge { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Core product details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditInterest2
    {
        /// <summary>
        /// The group of tiers or bands for which credit interest can be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBandSet2> TierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<TierBandSet2>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overdraft2
    {
        /// <summary>
        /// Associated Notes about the overdraft rates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier band set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBandSet2> OverdraftTierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBandSet2>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeesCharges2
    {
        /// <summary>
        /// Other fees/charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeChargeDetail2> FeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<FeeChargeDetail2>();

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap2>? FeeChargeCap { get; set; } = default!;

    }

    /// <summary>
    /// Postal address of a party.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAddressTypeCode? AddressType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? TownName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string Country { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account3
    {
        /// <summary>
        /// Absolute URI to the related resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Related", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Related { get; set; } = default!;

        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the related resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBAccount6>? Account { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data2
    {
        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Balance> Balance { get; set; } = new System.Collections.ObjectModel.Collection<Balance>();

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue2? TotalValue { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data3
    {
        [Newtonsoft.Json.JsonProperty("Beneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBBeneficiary5>? Beneficiary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data4
    {
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Permissions> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permissions>();

        /// <summary>
        /// Specified date and time the permissions will expire.
        /// <br/>If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

        /// <summary>
        /// Specified start date and time for the transaction query period.
        /// <br/>If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionFromDateTime { get; set; } = default!;

        /// <summary>
        /// Specified end date and time for the transaction query period.
        /// <br/>If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionToDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionToDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }
        
        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data5
    {
        /// <summary>
        /// Unique identification as assigned to identify the account access consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string ConsentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationDateTime { get; set; } = default!;

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data5Status Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Permissions2> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permissions2>();

        /// <summary>
        /// Specified date and time the permissions will expire.
        /// <br/>If this is not populated, the permissions will be open ended.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

        /// <summary>
        /// Specified start date and time for the transaction query period.
        /// <br/>If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionFromDateTime { get; set; } = default!;

        /// <summary>
        /// Specified end date and time for the transaction query period.
        /// <br/>If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionToDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionToDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data6
    {
        [Newtonsoft.Json.JsonProperty("DirectDebit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DirectDebit>? DirectDebit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data7
    {
        [Newtonsoft.Json.JsonProperty("Offer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Offer>? Offer { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data8
    {
        [Newtonsoft.Json.JsonProperty("Party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBParty2? Party { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data9
    {
        [Newtonsoft.Json.JsonProperty("Party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBParty2>? Party { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data10
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Product>? Product { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data11
    {
        [Newtonsoft.Json.JsonProperty("ScheduledPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBScheduledPayment3>? ScheduledPayment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data12
    {
        [Newtonsoft.Json.JsonProperty("StandingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStandingOrder6>? StandingOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementBenefit
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementFee
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementInterest
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementAmount
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        /// <summary>
        /// Amount of money of the cash balance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount2 Amount { get; set; } = new Amount2();

        /// <summary>
        /// Optional component providing the equivalent of Amount in local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalAmount? LocalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementDateTime
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementRate
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementValue
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalValue
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementBenefit2
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementFee2
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementInterest2
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementDateTime2
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementRate2
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementValue2
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementBenefit3
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_5();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementFee3
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_6();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementInterest3
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_7();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementAmount2
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_0 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public OBActiveOrHistoricCurrencyAndAmount_8 Amount { get; set; } = new OBActiveOrHistoricCurrencyAndAmount_8();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementDateTime3
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementRate3
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatementValue3
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBTransactionCardInstrument1CardSchemeName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AmericanExpress")]
        AmericanExpress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Diners")]
        Diners = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Discover")]
        Discover = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterCard")]
        MasterCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBTransactionCardInstrument1AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConsumerDevice")]
        ConsumerDevice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Contactless")]
        Contactless = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PIN")]
        PIN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// <br/>With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ClientAccount")]
        ClientAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NonCommercialChaitiesClbSoc")]
        NonCommercialChaitiesClbSoc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NonCommercialPublicAuthGovt")]
        NonCommercialPublicAuthGovt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Religious")]
        Religious = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SectorSpecific")]
        SectorSpecific = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Startup")]
        Startup = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Switcher")]
        Switcher = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductDetailsFeeFreeLengthPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBandSet
    {
        /// <summary>
        /// The methodology of how credit interest is paid/applied. It can be:-
        /// <br/>
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the BCA balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSetTierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// Methods of calculating interest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSetCalculationMethod? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the BCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSetDestination Destination { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier Band Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBand> TierBand { get; set; } = new System.Collections.ObjectModel.Collection<TierBand>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBandSet
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSetTierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSetOverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the overdraft Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Provides overdraft details for a specific tier or band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBand> OverdraftTierBand { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBand>();

        /// <summary>
        /// Overdraft fees and charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeesChargesTariffType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Electronic")]
        Electronic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Mixed")]
        Mixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherTariffType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeDetail
    {
        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailFeeCategory FeeCategory { get; set; } = default!;

        /// <summary>
        /// Fee/Charge Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailFeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailFeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the fee/charge details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap3>? FeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeCategoryType? OtherFeeCategoryType { get; set; } = default!;

        /// <summary>
        /// Other Fee/charge type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies not covered in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCapMinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCapCappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType2>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// <br/>With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BenefitAndReward")]
        BenefitAndReward = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditInterest")]
        CreditInterest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cashback")]
        Cashback = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Graduate")]
        Graduate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Overdraft")]
        Overdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Packaged")]
        Packaged = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium")]
        Premium = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Reward")]
        Reward = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Student")]
        Student = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"YoungAdult")]
        YoungAdult = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Youth")]
        Youth = 13,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBandSet2
    {
        /// <summary>
        /// The methodology of how credit interest is charged. It can be:-
        /// <br/>
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the PCA balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet2TierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// Methods of calculating interest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet2CalculationMethod? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the PCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet2Destination? Destination { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier Band Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBand2> TierBand { get; set; } = new System.Collections.ObjectModel.Collection<TierBand2>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBandSet2
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet2TierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet2OverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the overdraft Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Provides overdraft details for a specific tier or band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBand2> OverdraftTierBand { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBand2>();

        /// <summary>
        /// Overdraft fees and charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges2>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeDetail2
    {
        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2FeeCategory FeeCategory { get; set; } = default!;

        /// <summary>
        /// Fee/Charge Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2FeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the fee/charge details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeCategoryType2? OtherFeeCategoryType { get; set; } = default!;

        /// <summary>
        /// Other Fee/charge type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType3? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType2? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies not covered in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency2? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency2? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap4>? FeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange2? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap2
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType2> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType2>();

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap2MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap2CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType4>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to define the balance details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Balance
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCreditDebitCode_2 CreditDebitIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBBalanceType1Code Type { get; set; } = default!;

        /// <summary>
        /// Indicates the date (and time) of the balance.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTime { get; set; } = default!;

        /// <summary>
        /// Amount of money of the cash balance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Amount3 Amount { get; set; } = new Amount3();

        [Newtonsoft.Json.JsonProperty("CreditLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditLine>? CreditLine { get; set; } = default!;

        /// <summary>
        /// Optional component providing the equivalent of Amount in local currency. Default is Local Currency (LCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalAmount2? LocalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalValue2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Permissions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsBasic")]
        ReadAccountsBasic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsDetail")]
        ReadAccountsDetail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBalances")]
        ReadBalances = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesBasic")]
        ReadBeneficiariesBasic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesDetail")]
        ReadBeneficiariesDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadDirectDebits")]
        ReadDirectDebits = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOffers")]
        ReadOffers = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPAN")]
        ReadPAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadParty")]
        ReadParty = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPartyPSU")]
        ReadPartyPSU = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadProducts")]
        ReadProducts = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsBasic")]
        ReadScheduledPaymentsBasic = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsDetail")]
        ReadScheduledPaymentsDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersBasic")]
        ReadStandingOrdersBasic = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersDetail")]
        ReadStandingOrdersDetail = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsBasic")]
        ReadStatementsBasic = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsDetail")]
        ReadStatementsDetail = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsBasic")]
        ReadTransactionsBasic = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsCredits")]
        ReadTransactionsCredits = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDebits")]
        ReadTransactionsDebits = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDetail")]
        ReadTransactionsDetail = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Authorised")]
        Authorised = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AwaitingAuthorisation")]
        AwaitingAuthorisation = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Revoked")]
        Revoked = 3,

    }

    /// <summary>
    /// Specifies the Open Banking account access data types. This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Permissions2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsBasic")]
        ReadAccountsBasic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsDetail")]
        ReadAccountsDetail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBalances")]
        ReadBalances = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesBasic")]
        ReadBeneficiariesBasic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesDetail")]
        ReadBeneficiariesDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadDirectDebits")]
        ReadDirectDebits = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOffers")]
        ReadOffers = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPAN")]
        ReadPAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadParty")]
        ReadParty = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPartyPSU")]
        ReadPartyPSU = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadProducts")]
        ReadProducts = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsBasic")]
        ReadScheduledPaymentsBasic = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsDetail")]
        ReadScheduledPaymentsDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersBasic")]
        ReadStandingOrdersBasic = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersDetail")]
        ReadStandingOrdersDetail = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsBasic")]
        ReadStatementsBasic = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsDetail")]
        ReadStatementsDetail = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsBasic")]
        ReadTransactionsBasic = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsCredits")]
        ReadTransactionsCredits = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDebits")]
        ReadTransactionsDebits = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDetail")]
        ReadTransactionsDetail = 20,

    }

    /// <summary>
    /// Account to or from which a cash entry is made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DirectDebit
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DirectDebitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? DirectDebitId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string MandateIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DirectDebitStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalDirectDebitStatus1Code? DirectDebitStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PreviousPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PreviousPaymentDateTime { get; set; } = default!;

        /// <summary>
        /// Regularity with which direct debit instructions are to be created and processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PreviousPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_0? PreviousPaymentAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offer
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        /// <summary>
        /// A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OfferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? OfferId { get; set; } = default!;

        /// <summary>
        /// Offer type, in a coded form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OfferType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferType? OfferType { get; set; } = default!;

        /// <summary>
        /// Further details of the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        /// <summary>
        /// Rate associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? Rate { get; set; } = default!;

        /// <summary>
        /// Value associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; } = default!;

        /// <summary>
        /// Further details of the term of the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Term { get; set; } = default!;

        /// <summary>
        /// URL (Uniform Resource Locator) where documentation on the offer can be found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? URL { get; set; } = default!;

        /// <summary>
        /// Amount of money associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount4? Amount { get; set; } = default!;

        /// <summary>
        /// Fee associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fee? Fee { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Product details associated with the Account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        /// <summary>
        /// The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? ProductName { get; set; } = default!;

        /// <summary>
        /// The unique ID that has been internally assigned by the financial institution to each of the current account banking products they market to their retail and/or small to medium enterprise (SME) customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ProductId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string AccountId { get; set; } = default!;

        /// <summary>
        /// Any secondary Identification which  supports Product Identifier to uniquely identify the current account banking products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SecondaryProductId { get; set; } = default!;

        /// <summary>
        /// Product type : Personal Current Account, Business Current Account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductType ProductType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Product Marketing State.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketingStateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? MarketingStateId { get; set; } = default!;

        /// <summary>
        /// Other product type details associated with the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherProductType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherProductType? OtherProductType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BCA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBCAData1? BCA { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PCA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPCAData1? PCA { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// The amount in the domestic or base accounting currency. Default is Base Currency (BCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Amount2SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagAisp.Models.Amount2SubType.BaseCurrency;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// The amount in the local market currency for which the asset is held. Default is Local Currency (LCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalAmountSubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagAisp.Models.LocalAmountSubType.LocalCurrency;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetCalculationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Compound")]
        Compound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleInterest")]
        SimpleInterest = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetDestination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PayAway")]
        PayAway = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfCredit")]
        SelfCredit = 1,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMinimum { get; set; } = default!;

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandDepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        /// <summary>
        /// Type of interest rate, Fixed or Variable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; } = default!;

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string AER { get; set; } = default!;

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandBankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the BCA product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType? OtherBankInterestType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency3? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency3? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSetOverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnDemand")]
        OnDemand = 1,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMin { get; set; } = default!;

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepresentativeAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? RepresentativeAPR { get; set; } = default!;

        /// <summary>
        /// Specifies the minimum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AgreementLengthMin { get; set; } = default!;

        /// <summary>
        /// Specifies the maximum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AgreementLengthMax { get; set; } = default!;

        /// <summary>
        /// Specifies the period of a fixed length overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandAgreementPeriod? AgreementPeriod { get; set; } = default!;

        /// <summary>
        /// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandOverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier/band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Overdraft fees and charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges3>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap3
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType3> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType3>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap3MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap3CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType5>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeCategoryType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeeTypeFeeCategory FeeCategory { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeApplicableRange
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCapMinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCapCappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2CalculationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Compound")]
        Compound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleInterest")]
        SimpleInterest = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2Destination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PayAway")]
        PayAway = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfCredit")]
        SelfCredit = 1,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBand2
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMinimum { get; set; } = default!;

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2DepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        /// <summary>
        /// Type of interest rate, Fixed or Variable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2FixedVariableInterestRateType FixedVariableInterestRateType { get; set; } = default!;

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string AER { get; set; } = default!;

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2BankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the PCA product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType2? OtherBankInterestType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency4? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency4? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet2TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet2OverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnDemand")]
        OnDemand = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBand2
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMin { get; set; } = default!;

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// Interest charged on whole amount or tiered/banded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand2OverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates that a bank provides the overdraft limit up to TierValueMIn to all customers automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepresentativeAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? RepresentativeAPR { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier/band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Overdraft fees and charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges4>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges2
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap2>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail2> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail2>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeCategoryType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeeType3FeeCategory FeeCategory { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap4
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType4> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType4>();

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap4MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap4CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType6>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeApplicableRange2
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap2MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap2CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// The amount in the domestic or base accounting currency. Default is Base Currency (BCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Amount3SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagAisp.Models.Amount3SubType.BaseCurrency;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details on the credit line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditLine
    {
        /// <summary>
        /// Indicates whether or not the credit line is included in the balance of the account.
        /// <br/>Usage: If not present, credit line is not included in the balance amount of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Included", Required = Newtonsoft.Json.Required.Always)]
        public bool Included { get; set; } = default!;

        /// <summary>
        /// Limit type, in a coded form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditLineType? Type { get; set; } = default!;

        /// <summary>
        /// Amount of money of the credit line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount5? Amount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        /// <summary>
        /// The amount in the local market currency for which the asset is held.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalAmount2SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V3p1p11.NSwagAisp.Models.LocalAmount2SubType.LocalCurrency;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BalanceTransfer")]
        BalanceTransfer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LimitIncrease")]
        LimitIncrease = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MoneyTransfer")]
        MoneyTransfer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PromotionalRate")]
        PromotionalRate = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fee
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessCurrentAccount")]
        BusinessCurrentAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CommercialCreditCard")]
        CommercialCreditCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalCurrentAccount")]
        PersonalCurrentAccount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMELoan")]
        SMELoan = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherProductType
    {
        /// <summary>
        /// Long name associated with the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description of the Product associated with the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails3? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the Account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest3? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Borrowing details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft3? Overdraft { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the SME Loan holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanInterest? LoanInterest { get; set; } = default!;

        /// <summary>
        /// Repayment details of the Loan product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Repayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repayment? Repayment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeesCharges3>? OtherFeesCharges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount2SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BaseCurrency")]
        BaseCurrency = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalCurrency")]
        LocalCurrency = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalAmountSubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BaseCurrency")]
        BaseCurrency = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalCurrency")]
        LocalCurrency = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandDepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandFixedVariableInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandBankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherBankInterestType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandAgreementPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandOverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges3
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap3>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail3> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType5> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType5>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCapMinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCapCappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType7>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailFeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailFeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap4>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType8? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType3? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency5? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency5? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap3MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap3CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeeTypeFeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PerAcademicTerm")]
        PerAcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PerAcademicTerm")]
        PerAcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2DepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2FixedVariableInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2BankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherBankInterestType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand2OverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges4
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap5>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail4> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail4>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap2
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType6> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType6>();

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap2MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap2CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType9>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail2
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2FeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType10? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType4? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency6? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency6? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverdraftFeeChargeCap6? OverdraftFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeeType3FeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap4MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap4CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount3SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BaseCurrency")]
        BaseCurrency = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalCurrency")]
        LocalCurrency = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreditLineType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Emergency")]
        Emergency = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Agreed")]
        PreAgreed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount5
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalAmount2SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BaseCurrency")]
        BaseCurrency = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalCurrency")]
        LocalCurrency = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDetails3
    {
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment3>? Segment { get; set; } = default!;

        /// <summary>
        /// The length/duration of the fee free period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeFreeLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the promotional length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLengthPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDetails3FeeFreeLengthPeriod? FeeFreeLengthPeriod { get; set; } = default!;

        /// <summary>
        /// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyMaximumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MonthlyMaximumCharge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherSegment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditInterest3
    {
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBandSet3> TierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<TierBandSet3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Overdraft3
    {
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBandSet3> OverdraftTierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBandSet3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterest
    {
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<LoanInterestTierBandSet> LoanInterestTierBandSet { get; set; } = new System.Collections.ObjectModel.Collection<LoanInterestTierBandSet>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Repayment
    {
        /// <summary>
        /// Repayment type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentType? RepaymentType { get; set; } = default!;

        /// <summary>
        /// Repayment frequency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentFrequency? RepaymentFrequency { get; set; } = default!;

        /// <summary>
        /// The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentAmountType? AmountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other repayment type which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherRepaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherRepaymentType? OtherRepaymentType { get; set; } = default!;

        /// <summary>
        /// Other repayment frequency which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherRepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherRepaymentFrequency? OtherRepaymentFrequency { get; set; } = default!;

        /// <summary>
        /// Other amount type which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherAmountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherAmountType? OtherAmountType { get; set; } = default!;

        /// <summary>
        /// Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentFeeCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepaymentFeeCharges? RepaymentFeeCharges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RepaymentHoliday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepaymentHoliday>? RepaymentHoliday { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeesCharges3
    {
        /// <summary>
        /// TariffType which defines the fee and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeesCharges3TariffType? TariffType { get; set; } = default!;

        /// <summary>
        /// Name of the tariff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? TariffName { get; set; } = default!;

        /// <summary>
        /// Other tariff type which is not in the standard list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherTariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherTariffType2? OtherTariffType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeChargeDetail3> FeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<FeeChargeDetail3>();

        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap5>? FeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap3
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType7> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType7>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap3MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap3CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType11>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail3
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3FeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap7>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType12? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType5? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency7? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCapMinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCapCappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailFeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailFeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap4
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType8> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType8>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap4MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap4CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType13>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap5
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType9> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType9>();

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap5MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap5CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType14>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail4
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4FeeType FeeType { get; set; } = default!;

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType15? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType6? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency8? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency8? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverdraftFeeChargeCap8? OverdraftFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap2MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap2CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType9
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType10
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap6
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType10> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType10>();

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap6MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap6CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType16>? OtherFeeType { get; set; } = default!;

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GEAS")]
        GEAS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBA")]
        GEBA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBR")]
        GEBR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBU")]
        GEBU = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GECI")]
        GECI = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GECS")]
        GECS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GEFB")]
        GEFB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GEFG")]
        GEFG = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GEG")]
        GEG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GEGR")]
        GEGR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GEGS")]
        GEGS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOT")]
        GEOT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOV")]
        GEOV = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"GEPA")]
        GEPA = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GEPR")]
        GEPR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GERE")]
        GERE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GEST")]
        GEST = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"GEYA")]
        GEYA = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"GEYO")]
        GEYO = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PSCA")]
        PSCA = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PSES")]
        PSES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PSNC")]
        PSNC = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PSNP")]
        PSNP = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PSRG")]
        PSRG = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PSSS")]
        PSSS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PSST")]
        PSST = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PSSW")]
        PSSW = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductDetails3FeeFreeLengthPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBandSet3
    {
        /// <summary>
        /// The methodology of how credit interest is paid/applied. It can be:-
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the product holder's account balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet3TierBandMethod TierBandMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestCalculationMethod1Code? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the BCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet3Destination Destination { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherCalculationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherDestination { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TierBand3> TierBand { get; set; } = new System.Collections.ObjectModel.Collection<TierBand3>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBandSet3
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet3TierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet3OverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftTierBand3> OverdraftTierBand { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftTierBand3>();

        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges5>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The group of tiers or bands for which debit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestTierBandSet
    {
        /// <summary>
        /// The methodology of how credit interest is charged. It can be:-
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the SME Loan balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandSetTierBandMethod TierBandMethod { get; set; } = default!;

        /// <summary>
        /// Loan interest tierbandset identification. Used by  loan providers for internal use purpose.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestCalculationMethod1Code CalculationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherCalculationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<LoanInterestTierBand> LoanInterestTierBand { get; set; } = new System.Collections.ObjectModel.Collection<LoanInterestTierBand>();

        [Newtonsoft.Json.JsonProperty("LoanInterestFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeesCharges>? LoanInterestFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USBA")]
        USBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USBU")]
        USBU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USCI")]
        USCI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USCS")]
        USCS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USFA")]
        USFA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USFB")]
        USFB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USFI")]
        USFI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USIO")]
        USIO = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"USOT")]
        USOT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"USPF")]
        USPF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"USRW")]
        USRW = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"USSL")]
        USSL = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMDA")]
        SMDA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SMFL")]
        SMFL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SMFO")]
        SMFO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SMHY")]
        SMHY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMMO")]
        SMMO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMOT")]
        SMOT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SMQU")]
        SMQU = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SMWE")]
        SMWE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SMYE")]
        SMYE = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentAmountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RABD")]
        RABD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RABL")]
        RABL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RACI")]
        RACI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAFC")]
        RAFC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RAIO")]
        RAIO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RALT")]
        RALT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USOT")]
        USOT = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherRepaymentType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherRepaymentFrequency
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherAmountType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentFeeCharges
    {
        [Newtonsoft.Json.JsonProperty("RepaymentFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<RepaymentFeeChargeDetail> RepaymentFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<RepaymentFeeChargeDetail>();

        [Newtonsoft.Json.JsonProperty("RepaymentFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepaymentFeeChargeCap>? RepaymentFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of capital repayment holiday if any
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentHoliday
    {
        /// <summary>
        /// The maximum length/duration of a Repayment Holiday
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxHolidayLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxHolidayLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the repayment holiday
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxHolidayPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentHolidayMaxHolidayPeriod? MaxHolidayPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeesCharges3TariffType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TTEL")]
        TTEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TTMX")]
        TTMX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TTOT")]
        TTOT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherTariffType2
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeDetail3
    {
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeCategory1Code FeeCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_3? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap6>? FeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherFeeCategoryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_8? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange3? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap5
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType11> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType11>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType17>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap3MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap3CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType11
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap7
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType12> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType12>();

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap7MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap7CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType18>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType12
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap4MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap4CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType13
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap5MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap5CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType14
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType15
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeRateType6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherApplicationFrequency8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherCalculationFrequency8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap8
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType13> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType13>();

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap8MinMaxType MinMaxType { get; set; } = default!;

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap8CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType19>? OtherFeeType { get; set; } = default!;

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap6MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap6CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType16
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet3TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet3Destination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INPA")]
        INPA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INSC")]
        INSC = 2,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TierBand3
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for the Product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMinimum { get; set; } = default!;

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the Product for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3ApplicationFrequency ApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3DepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestFixedVariableType1Code FixedVariableInterestRateType { get; set; } = default!;

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string AER { get; set; } = default!;

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the account holder's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3BankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType3? OtherBankInterestType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet3TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet3OverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OVCO")]
        OVCO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OVOD")]
        OVOD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OVOT")]
        OVOT = 2,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftTierBand3
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMin { get; set; } = default!;

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// Specifies the minimum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgreementLengthMin { get; set; } = default!;

        /// <summary>
        /// Specifies the maximum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgreementLengthMax { get; set; } = default!;

        /// <summary>
        /// Specifies the period of a fixed length overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand3AgreementPeriod? AgreementPeriod { get; set; } = default!;

        /// <summary>
        /// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand3OverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges6>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges5
    {
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap9>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail5> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail5>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestTierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a SME Loan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum loan value for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string TierValueMinimum { get; set; } = default!;

        /// <summary>
        /// Maximum loan value for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// Minimum loan term for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinTerm", Required = Newtonsoft.Json.Required.Always)]
        public int TierValueMinTerm { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the Minimum Term
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinTermPeriod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandMinTermPeriod MinTermPeriod { get; set; } = default!;

        /// <summary>
        /// Maximum loan term for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaxTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TierValueMaxTerm { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the Maximum Term
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxTermPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandMaxTermPeriod? MaxTermPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestFixedVariableType1Code FixedVariableInterestRateType { get; set; } = default!;

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>For SME Loan, this APR is the representative APR which includes any account fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepAPR", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string RepAPR { get; set; } = default!;

        /// <summary>
        /// Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanProviderInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandLoanProviderInterestRateType? LoanProviderInterestRateType { get; set; } = default!;

        /// <summary>
        /// Loan provider Interest for the SME Loan product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanProviderInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? LoanProviderInterestRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other loan interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherLoanProviderInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherLoanProviderInterestRateType? OtherLoanProviderInterestRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeesCharges2>? LoanInterestFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeesCharges
    {
        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeDetail> LoanInterestFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<LoanInterestFeeChargeDetail>();

        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeCap>? LoanInterestFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about specific fees/charges that are applied for repayment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentFeeChargeDetail
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_3 CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_8? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// RepaymentFeeChargeCap sets daily, weekly, monthly, yearly limits on the fees that are charged
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepaymentFeeChargeCap
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType14> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType14>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType20>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentHolidayMaxHolidayPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeChargeCap6
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType15> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType15>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType21>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FeeApplicableRange3
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType17
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap7MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap7CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType18
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap8MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap8CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType19
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FQAT")]
        FQAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FQDY")]
        FQDY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FQHY")]
        FQHY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FQMY")]
        FQMY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FQOT")]
        FQOT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FQQY")]
        FQQY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FQSD")]
        FQSD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FQWY")]
        FQWY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FQYY")]
        FQYY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FQAT")]
        FQAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FQDY")]
        FQDY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FQHY")]
        FQHY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FQMY")]
        FQMY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FQOT")]
        FQOT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FQQY")]
        FQQY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FQSD")]
        FQSD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FQWY")]
        FQWY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FQYY")]
        FQYY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3DepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3BankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherBankInterestType3
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand3AgreementPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand3OverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeesCharges6
    {
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap10>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeDetail6> OverdraftFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<OverdraftFeeChargeDetail6>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap9
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType16> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType16>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType22>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail5
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_OverdraftFeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_0? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_0 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_1? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap11>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_3? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_4? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandMinTermPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandMaxTermPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandLoanProviderInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherLoanProviderInterestRateType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeesCharges2
    {
        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeDetail2> LoanInterestFeeChargeDetail { get; set; } = new System.Collections.ObjectModel.Collection<LoanInterestFeeChargeDetail2>();

        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeCap2>? LoanInterestFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeeChargeDetail
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_3 CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_5? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeeChargeCap
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType17> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType17>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_4? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType23>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType20
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType21
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap10
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType18> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType18>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType24>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeDetail6
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_OverdraftFeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_0? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_0 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_1? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap12>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_3? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_4? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType22
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap11
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType19> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType19>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType25>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeeChargeDetail2
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeType1Code FeeType { get; set; } = default!;

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_3 CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_5? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanInterestFeeChargeCap2
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType20> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType20>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_4? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType26>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType23
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType24
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverdraftFeeChargeCap12
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<FeeType21> FeeType { get; set; } = new System.Collections.ObjectModel.Collection<FeeType21>();

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_MinMaxType1Code MinMaxType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType27>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType25
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType26
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherFeeType27
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625