//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models
{
    using System = global::System;

    

    /// <summary>
    /// Specifies the type of creditor reference as published in an external creditor reference type code set. For more information see `ExternalCreditorReferenceType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalCreditorReferenceType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DISP")]
        DISP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FXDR")]
        FXDR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUOR")]
        PUOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RPIN")]
        RPIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RADM")]
        RADM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SCOR")]
        SCOR = 5,

    }

    /// <summary>
    /// Specifies the document type as published in an external document type code list. For more information see `ExternalDocumentType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalDocumentType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CINV")]
        CINV = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CNFA")]
        CNFA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONT")]
        CONT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREN")]
        CREN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBN")]
        DEBN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DISP")]
        DISP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DNFA")]
        DNFA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HIRI")]
        HIRI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INVS")]
        INVS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MSIN")]
        MSIN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PROF")]
        PROF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PUOR")]
        PUOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"QUOT")]
        QUOT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SBIN")]
        SBIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRR")]
        SPRR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"TISH")]
        TISH = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReferredDocumentInformation
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDocumentType1Code? Code { get; set; } = default!;

        /// <summary>
        /// dentification of the issuer of the reference document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

        /// <summary>
        /// Identification of the type specified for the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Number { get; set; } = default!;

        /// <summary>
        /// Date associated with the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RelatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RelatedDate { get; set; } = default!;

        /// <summary>
        /// Set of elements used to provide the content of the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LineDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? LineDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRemittanceInformation2
    {
        [Newtonsoft.Json.JsonProperty("Structured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBRemittanceInformationStructured>? Structured { get; set; } = default!;

        /// <summary>
        /// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unstructured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Unstructured { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRemittanceInformationStructured
    {
        [Newtonsoft.Json.JsonProperty("ReferredDocumentInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBReferredDocumentInformation>? ReferredDocumentInformation { get; set; } = default!;

        /// <summary>
        /// Provides details on the amounts of the referred document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReferredDocumentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferredDocumentAmount { get; set; } = default!;

        /// <summary>
        /// Reference information provided by the creditor to allow the identification of the underlying documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorReferenceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorReferenceInformation? CreditorReferenceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Invoicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Invoicer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Invoicee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Invoicee { get; set; } = default!;

        /// <summary>
        /// Provides remittance information about a payment made for tax-related purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxRemittance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TaxRemittance { get; set; } = default!;

        /// <summary>
        /// Additional information, in free text form, to complement the structured remittance information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdditionalRemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<string>? AdditionalRemittanceInformation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ultimate party to which an amount of money is due.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBUltimateCreditor1
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ultimate party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBUltimateDebtor1
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Regularity with which credit transfer instructions are to be created and processed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBFrequency6
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        /// <summary>
        /// Number of instructions to be created and processed during the specified period. Specifies a frequency in terms of a count per period within a specified frequency type. Note: should not be used alongside `PointInTime`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountPerPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountPerPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PointInTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? PointInTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// For a full list of values see `OBFrequency6Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBFrequency6Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADHO")]
        ADHO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR")]
        YEAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DAIL")]
        DAIL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FRTN")]
        FRTN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INDA")]
        INDA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MNTH")]
        MNTH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"QURT")]
        QURT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MIAN")]
        MIAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"WODL")]
        WODL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FOWK")]
        FOWK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TWMH")]
        TWMH = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FOMH")]
        FOMH = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FIMH")]
        FIMH = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ALMH")]
        ALMH = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 15,

    }

    /// <summary>
    /// Specifies an alternate assumed name for the identification of the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBProxy1
    {
        /// <summary>
        /// Identification used to indicate the account identification under another specified name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExternalProxyAccountType1Code Code { get; set; }

        /// <summary>
        /// Type of the proxy identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the external proxy account type code, as published in the proxy account type external code set.&lt;br /&gt; For more information and a full list of values see `ExternalProxyAccountType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalProxyAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TELE")]
        TELE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAL")]
        EMAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DNAM")]
        DNAM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CINC")]
        CINC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COTX")]
        COTX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COID")]
        COID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CUST")]
        CUST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DRLC")]
        DRLC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EIDN")]
        EIDN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EWAL")]
        EWAL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PVTX")]
        PVTX = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"LEIC")]
        LEIC = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MBNO")]
        MBNO = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NIDN")]
        NIDN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPT")]
        CCPT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SHID")]
        SHID = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SOSE")]
        SOSE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TOKN")]
        TOKN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UBIL")]
        UBIL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"VIPN")]
        VIPN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BIID")]
        BIID = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record File
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Links relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Links
    {
        [Newtonsoft.Json.JsonProperty("Self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.Uri Self { get; set; }

        [Newtonsoft.Json.JsonProperty("First", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Prev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Next { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Last { get; set; } = default!;

    }

    /// <summary>
    /// Meta Data relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Meta
    {
        [Newtonsoft.Json.JsonProperty("TotalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstAvailableDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableDateTime { get; set; } = default!;

    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made. The following fields are optional only for accounts that are switched:
    /// <br/>
    /// <br/>  * Data.Currency  
    /// <br/>  * Data.AccountCategory  
    /// <br/>  * Data.AccountTypeCode
    /// <br/>
    /// <br/>For all other accounts, the fields must be populated by the ASPSP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBAccount6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountType1Code? AccountCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1CodeV4? AccountTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Account>? Account { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFrequencyAndFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFrequencyAndFormatInner>? StatementFrequencyAndFormat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Servicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_0? Servicer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("V3AccountSubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public V3p1p11.NSwagAisp.Models.OBExternalAccountSubType1Code? V3AccountSubType { get; set; }
    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBAccount6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountType1Code? AccountCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1CodeV4? AccountTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

    }

    /// <summary>
    /// Unambiguous identification of the account to which credit and debit entries are made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBAccount6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountStatus1Code? Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StatusUpdateDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalAccountType1Code? AccountCategory { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalAccountSubType1CodeV4? AccountTypeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Nickname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Nickname { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OpeningDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OpeningDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MaturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? MaturityDate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SwitchStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SwitchStatus { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required System.Collections.Generic.ICollection<Account2> Account { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementFrequencyAndFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFrequencyAndFormatInner>? StatementFrequencyAndFormat { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Servicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_0? Servicer { get; set; } = default!;

    }

    /// <summary>
    /// Specifies the status of account resource in code form. &lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `OBInternalAccountStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalAccountStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Pending")]
        Pending = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ProForma")]
        ProForma = 4,

    }

    /// <summary>
    /// The amount of the most recent direct debit collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_0
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_1
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Transaction charges to be paid by the charge bearer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_10
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the last (most recent) Standing Order instruction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_11
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the first Standing Order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the next Standing Order.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The amount of the final Standing Order
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement benefit type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_5
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement fee type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_6
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the statement interest amount type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_7
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money associated with the amount type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_8
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalBalanceSubType1Code? SubType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Amount of money in the cash transaction entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount_9
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identifies the nature of the postal address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressTypeCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryTo")]
        DeliveryTo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MailTo")]
        MailTo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POBox")]
        POBox = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Statement")]
        Statement = 7,

    }

    /// <summary>
    /// Identifies the nature of the postal address. &lt;br /&gt; For a full set of codes see `OBAddressType2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressType2Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BIZZ")]
        BIZZ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DLVY")]
        DLVY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MLTO")]
        MLTO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PBOX")]
        PBOX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDR")]
        ADDR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CORR")]
        CORR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STAT")]
        STAT = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBCAData1
    {
        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the BCA account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Borrowing details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft? Overdraft { get; set; } = default!;

        /// <summary>
        /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeesCharges>? OtherFeesCharges { get; set; } = default!;

    }

    /// <summary>
    /// Balance type, in a coded form. &lt;br /&gt; For a full list of enumeration values refer to `ExternalBalanceType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBBalanceType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CLAV")]
        CLAV = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CLBD")]
        CLBD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FWAV")]
        FWAV = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ITAV")]
        ITAV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ITBD")]
        ITBD = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OPAV")]
        OPAV = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OPBD")]
        OPBD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PRCD")]
        PRCD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"XPCD")]
        XPCD = 9,

    }

    /// <summary>
    /// Set of elements used to fully identify the type of underlying transaction resulting in an entry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBankTransactionCodeStructure1
    {
        /// <summary>
        /// Specifies the family within a domain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Code { get; set; }

        /// <summary>
        /// Specifies the sub-product family within a specific family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBeneficiary5
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_0? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_0? CreditorAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBeneficiary5Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBeneficiary5Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? AccountId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? BeneficiaryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalBeneficiaryType1Code? BeneficiaryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_0? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBCashAccount5_0 CreditorAccount { get; set; }

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification5_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// <br/>This is the servicer of the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification5_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// <br/>This is the servicer of the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification6_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Financial institution servicing an account for the creditor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification6_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Financial institution servicing an account for the debtor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification6_2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccount5_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccount5_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        /// <summary>
        /// Beneficiary account identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unambiguous identification of the account of the creditor, in the case of a debit transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccount6_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Unambiguous identification of the account of the debtor, in the case of a crebit transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccount6_1
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of codes that outlines the type of purpose behind a transaction, payment or risk.  For all enum values see `ExternalCategoryPurpose1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalCategoryPurpose1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BONU")]
        BONU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CBLK")]
        CBLK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CCRD")]
        CCRD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CGWV")]
        CGWV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIPC")]
        CIPC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CONC")]
        CONC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CORT")]
        CORT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DCRD")]
        DCRD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVI")]
        DIVI = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DVPM")]
        DVPM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EPAY")]
        EPAY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FCDT")]
        FCDT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FCIN")]
        FCIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FCOL")]
        FCOL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVT")]
        GOVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GP2P")]
        GP2P = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"HEDG")]
        HEDG = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ICCP")]
        ICCP = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"IDCP")]
        IDCP = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INTC")]
        INTC = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INTE")]
        INTE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LBOX")]
        LBOX = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2B")]
        MP2B = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2P")]
        MP2P = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHR")]
        OTHR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PENS")]
        PENS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"RPRE")]
        RPRE = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"RRCT")]
        RRCT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPM")]
        RVPM = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SALA")]
        SALA = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SECU")]
        SECU = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SSBE")]
        SSBE = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPP")]
        SUPP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SWEP")]
        SWEP = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXS")]
        TAXS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"TOPG")]
        TOPG = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAD")]
        TRAD = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"TREA")]
        TREA = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"VATX")]
        VATX = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"VOST")]
        VOST = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"WHLD")]
        WHLD = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ZABA")]
        ZABA = 43,

    }

    /// <summary>
    /// Type of mandate instruction. For a full list of values see `OBExternalClassification1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalMandateClassification1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXE")]
        FIXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USGB")]
        USGB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VARI")]
        VARI = 2,

    }

    /// <summary>
    /// For a full list of enumeration values see `OBExternalCommunicationMethod2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_internal_CodeSets) 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCommunicationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EMAL")]
        EMAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FAXI")]
        FAXI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FILE")]
        FILE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLI")]
        ONLI = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 4,

    }

    /// <summary>
    /// Indicates whether the amount is a credit or a debit. For a full list of values see `OBInternalCreditDebitCode` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)&lt;br /&gt;
    /// <br/>Usage: A zero amount is considered to be a credit amount.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Indicates whether the transaction is a credit or a debit entry. &lt;br /&gt;
    /// <br/>&lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `OBInternalCreditDebitCode` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Indicates whether the balance is a credit or a debit balance. 
    /// <br/>Usage: A zero balance is considered to be a credit balance.
    /// <br/>&lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `OBInternalCreditDebitCode` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBCreditDebitCode_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Debit")]
        Debit = 1,

    }

    /// <summary>
    /// Set of elements used to provide details on the currency exchange.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCurrencyExchange5
    {
        /// <summary>
        /// Currency from which an amount is to be converted in a currency conversion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SourceCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string SourceCurrency { get; set; }

        /// <summary>
        /// Currency into which an amount is to be converted in a currency conversion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TargetCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? TargetCurrency { get; set; } = default!;

        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? UnitCurrency { get; set; } = default!;

        /// <summary>
        /// Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency.
        /// <br/>Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Unique identification to unambiguously identify the foreign exchange contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Date and time at which an exchange rate is quoted. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QuotationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? QuotationDate { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructedAmount? InstructedAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Status of a transaction entry on the books of the account servicer. &lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `ExternalEntryStatus1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalEntryStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BOOK")]
        BOOK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTR")]
        FUTR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 4,

    }

    /// <summary>
    /// Specifies the Mutability of the Transaction record. &lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `OBInternalTransactionMutability1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalTransactionMutability1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Mutable")]
        Mutable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Immutable")]
        Immutable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBError1
    {
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public required string ErrorCode { get; set; }

        /// <summary>
        /// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
        /// <br/>OBL doesn't standardise this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// An array of detail error codes, and messages, and URLs to documentation to help remediation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBErrorResponse1
    {
        /// <summary>
        /// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Deprecated &lt;br /&gt;High level textual error code, to help categorise the errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Deprecated &lt;br /&gt;Brief Error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Message { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OBError1> Errors { get; set; }

    }

    /// <summary>
    /// Specifies the sub type of account (product family group) &lt;br /&gt; For a full list of enumeration values refer to `OBExternalCashAccountType1Code` *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalAccountSubType1CodeV4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CACC")]
        CACC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CARD")]
        CARD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CHAR")]
        CHAR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CISH")]
        CISH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COMM")]
        COMM = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CPAC")]
        CPAC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LLSV")]
        LLSV = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MGLD")]
        MGLD = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"MOMA")]
        MOMA = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NREX")]
        NREX = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ODFT")]
        ODFT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ONDP")]
        ONDP = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHR")]
        OTHR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SACC")]
        SACC = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SLRY")]
        SLRY = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SVGS")]
        SVGS = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXE")]
        TAXE = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAN")]
        TRAN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAS")]
        TRAS = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"VACC")]
        VACC = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"NFCA")]
        NFCA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MORT")]
        MORT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"WALT")]
        WALT = 24,

    }

    /// <summary>
    /// Specifies the type of account (personal or business). &lt;br /&gt; For a full list of enumeration values refer to 'OBInternalAccountType1Code' in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 1,

    }

    /// <summary>
    /// Amount sub type, in a coded form. Default if not specified is BCUR of the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalBalanceSubType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    /// <summary>
    /// Party type, in a coded form. For a full list see `OBInternalPartyType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalPartyType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delegate")]
        Delegate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Joint")]
        Joint = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sole")]
        Sole = 2,

    }

    /// <summary>
    /// For a full list of enumeration values refer to `ExternalPurpose1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalPurpose1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BKDF")]
        BKDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BKFE")]
        BKFE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BKFM")]
        BKFM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BKIP")]
        BKIP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BKPP")]
        BKPP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CBLK")]
        CBLK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCB")]
        CDCB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCD")]
        CDCD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCS")]
        CDCS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CDDP")]
        CDDP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CDOC")]
        CDOC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CDQC")]
        CDQC = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ETUP")]
        ETUP = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FCOL")]
        FCOL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MTUP")]
        MTUP = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCT")]
        ACCT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"COLL")]
        COLL = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CSDB")]
        CSDB = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPT")]
        DEPT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INTC")]
        INTC = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INTP")]
        INTP = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMA")]
        LIMA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NETT")]
        NETT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BFWD")]
        BFWD = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"CCIR")]
        CCIR = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPC")]
        CCPC = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPM")]
        CCPM = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CCSM")]
        CCSM = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"CRDS")]
        CRDS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CRPR")]
        CRPR = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CRSP")]
        CRSP = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CRTL")]
        CRTL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EQPT")]
        EQPT = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUS")]
        EQUS = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPT")]
        EXPT = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTD")]
        EXTD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXI")]
        FIXI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"FWBC")]
        FWBC = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"FWCC")]
        FWCC = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"FWSB")]
        FWSB = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"FWSC")]
        FWSC = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"MARG")]
        MARG = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"MBSB")]
        MBSB = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"MBSC")]
        MBSC = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"MGCC")]
        MGCC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MGSC")]
        MGSC = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"OCCC")]
        OCCC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"OPBC")]
        OPBC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"OPCC")]
        OPCC = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"OPSB")]
        OPSB = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"OPSC")]
        OPSC = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTN")]
        OPTN = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"OTCD")]
        OTCD = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"REPO")]
        REPO = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"RPBC")]
        RPBC = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"RPCC")]
        RPCC = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"RPSB")]
        RPSB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"RPSC")]
        RPSC = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPO")]
        RVPO = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"SBSC")]
        SBSC = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SCIE")]
        SCIE = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"SCIR")]
        SCIR = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"SCRP")]
        SCRP = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"SHBC")]
        SHBC = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"SHCC")]
        SHCC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"SHSL")]
        SHSL = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SLEB")]
        SLEB = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"SLOA")]
        SLOA = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"SWBC")]
        SWBC = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"SWCC")]
        SWCC = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SWPT")]
        SWPT = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"SWSB")]
        SWSB = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"SWSC")]
        SWSC = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"TBAS")]
        TBAS = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"TBBC")]
        TBBC = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"TBCC")]
        TBCC = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"TRCP")]
        TRCP = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"AGRT")]
        AGRT = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"AREN")]
        AREN = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"BEXP")]
        BEXP = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"BOCE")]
        BOCE = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"COMC")]
        COMC = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"CPYR")]
        CPYR = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"GDDS")]
        GDDS = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GDSV")]
        GDSV = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GSCB")]
        GSCB = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"LICF")]
        LICF = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2B")]
        MP2B = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"POPE")]
        POPE = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"ROYA")]
        ROYA = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"SCVE")]
        SCVE = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"SERV")]
        SERV = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBS")]
        SUBS = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPP")]
        SUPP = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAD")]
        TRAD = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"CHAR")]
        CHAR = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"COMT")]
        COMT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2P")]
        MP2P = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPG")]
        ECPG = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPR")]
        ECPR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPU")]
        ECPU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"EPAY")]
        EPAY = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"CLPR")]
        CLPR = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"COMP")]
        COMP = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"DBTC")]
        DBTC = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVI")]
        GOVI = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"HLRP")]
        HLRP = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"HLST")]
        HLST = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"INPC")]
        INPC = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"INPR")]
        INPR = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"INSC")]
        INSC = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"INSU")]
        INSU = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"INTE")]
        INTE = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"LBRI")]
        LBRI = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"LIFI")]
        LIFI = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAR")]
        LOAR = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PENO")]
        PENO = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PPTI")]
        PPTI = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"RELG")]
        RELG = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"RINP")]
        RINP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"TRFD")]
        TRFD = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"FORW")]
        FORW = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"FXNT")]
        FXNT = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMG")]
        ADMG = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVA")]
        ADVA = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"BCDM")]
        BCDM = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"BCFG")]
        BCFG = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"BLDM")]
        BLDM = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"BNET")]
        BNET = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"CBFF")]
        CBFF = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"CBFR")]
        CBFR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"CCRD")]
        CCRD = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"CDBL")]
        CDBL = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"CFEE")]
        CFEE = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"CGDD")]
        CGDD = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"CORT")]
        CORT = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"COST")]
        COST = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"CPKC")]
        CPKC = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"DCRD")]
        DCRD = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"DSMT")]
        DSMT = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"DVPM")]
        DVPM = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"EDUC")]
        EDUC = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"FACT")]
        FACT = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FAND")]
        FAND = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"FCPM")]
        FCPM = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"FEES")]
        FEES = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVT")]
        GOVT = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"ICCP")]
        ICCP = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"IDCP")]
        IDCP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"IHRP")]
        IHRP = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"INSM")]
        INSM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"IVPT")]
        IVPT = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"MCDM")]
        MCDM = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"MCFG")]
        MCFG = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"MSVC")]
        MSVC = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NOWS")]
        NOWS = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"OCDM")]
        OCDM = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"OCFG")]
        OCFG = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"OFEE")]
        OFEE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHR")]
        OTHR = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"PADD")]
        PADD = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"PTSP")]
        PTSP = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"RCKE")]
        RCKE = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"RCPT")]
        RCPT = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"REBT")]
        REBT = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"REFU")]
        REFU = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"RENT")]
        RENT = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"REOD")]
        REOD = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"RIMB")]
        RIMB = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"RPNT")]
        RPNT = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"RRBN")]
        RRBN = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"RRCT")]
        RRCT = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"RRTP")]
        RRTP = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPM")]
        RVPM = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"SLPI")]
        SLPI = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"SPLT")]
        SPLT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"STDY")]
        STDY = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"TBAN")]
        TBAN = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"TBIL")]
        TBIL = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"TCSC")]
        TCSC = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"TELI")]
        TELI = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"TMPG")]
        TMPG = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"TPRI")]
        TPRI = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"TPRP")]
        TPRP = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"TRNC")]
        TRNC = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"TRVC")]
        TRVC = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"WEBI")]
        WEBI = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"IPAY")]
        IPAY = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"IPCA")]
        IPCA = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"IPDO")]
        IPDO = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEA")]
        IPEA = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEC")]
        IPEC = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEW")]
        IPEW = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"IPPS")]
        IPPS = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"IPRT")]
        IPRT = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"IPU2")]
        IPU2 = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"IPUW")]
        IPUW = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"ANNI")]
        ANNI = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"CAFI")]
        CAFI = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"CFDI")]
        CFDI = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"CMDT")]
        CMDT = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"DERI")]
        DERI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVD")]
        DIVD = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"FREX")]
        FREX = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"HEDG")]
        HEDG = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"INVS")]
        INVS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"PRME")]
        PRME = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVG")]
        SAVG = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"SECU")]
        SECU = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPI")]
        SEPI = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"TREA")]
        TREA = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"FNET")]
        FNET = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTR")]
        FUTR = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTS")]
        ANTS = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"CVCF")]
        CVCF = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"DMEQ")]
        DMEQ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"DNTS")]
        DNTS = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"HLTC")]
        HLTC = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"HLTI")]
        HLTI = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"HSPC")]
        HSPC = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"ICRF")]
        ICRF = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"LTCF")]
        LTCF = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"MAFC")]
        MAFC = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"MARF")]
        MARF = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"MDCS")]
        MDCS = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"VIEW")]
        VIEW = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"CDEP")]
        CDEP = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"SWFP")]
        SWFP = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"SWPP")]
        SWPP = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"SWRS")]
        SWRS = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"SWUF")]
        SWUF = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"ADCS")]
        ADCS = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"AEMP")]
        AEMP = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLW")]
        ALLW = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"ALMY")]
        ALMY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"BBSC")]
        BBSC = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"BECH")]
        BECH = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"BENE")]
        BENE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"BONU")]
        BONU = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"CCHD")]
        CCHD = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"COMM")]
        COMM = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"CSLP")]
        CSLP = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"GFRP")]
        GFRP = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEA")]
        GVEA = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEB")]
        GVEB = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEC")]
        GVEC = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"GVED")]
        GVED = 250,

        [System.Runtime.Serialization.EnumMember(Value = @"GWLT")]
        GWLT = 251,

        [System.Runtime.Serialization.EnumMember(Value = @"HREC")]
        HREC = 252,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYR")]
        PAYR = 253,

        [System.Runtime.Serialization.EnumMember(Value = @"PEFC")]
        PEFC = 254,

        [System.Runtime.Serialization.EnumMember(Value = @"PENS")]
        PENS = 255,

        [System.Runtime.Serialization.EnumMember(Value = @"PRCP")]
        PRCP = 256,

        [System.Runtime.Serialization.EnumMember(Value = @"RHBS")]
        RHBS = 257,

        [System.Runtime.Serialization.EnumMember(Value = @"SALA")]
        SALA = 258,

        [System.Runtime.Serialization.EnumMember(Value = @"SPSP")]
        SPSP = 259,

        [System.Runtime.Serialization.EnumMember(Value = @"SSBE")]
        SSBE = 260,

        [System.Runtime.Serialization.EnumMember(Value = @"LBIN")]
        LBIN = 261,

        [System.Runtime.Serialization.EnumMember(Value = @"LCOL")]
        LCOL = 262,

        [System.Runtime.Serialization.EnumMember(Value = @"LFEE")]
        LFEE = 263,

        [System.Runtime.Serialization.EnumMember(Value = @"LMEQ")]
        LMEQ = 264,

        [System.Runtime.Serialization.EnumMember(Value = @"LMFI")]
        LMFI = 265,

        [System.Runtime.Serialization.EnumMember(Value = @"LMRK")]
        LMRK = 266,

        [System.Runtime.Serialization.EnumMember(Value = @"LREB")]
        LREB = 267,

        [System.Runtime.Serialization.EnumMember(Value = @"LREV")]
        LREV = 268,

        [System.Runtime.Serialization.EnumMember(Value = @"LSFL")]
        LSFL = 269,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTX")]
        ESTX = 270,

        [System.Runtime.Serialization.EnumMember(Value = @"FWLV")]
        FWLV = 271,

        [System.Runtime.Serialization.EnumMember(Value = @"GSTX")]
        GSTX = 272,

        [System.Runtime.Serialization.EnumMember(Value = @"HSTX")]
        HSTX = 273,

        [System.Runtime.Serialization.EnumMember(Value = @"INTX")]
        INTX = 274,

        [System.Runtime.Serialization.EnumMember(Value = @"NITX")]
        NITX = 275,

        [System.Runtime.Serialization.EnumMember(Value = @"PTXP")]
        PTXP = 276,

        [System.Runtime.Serialization.EnumMember(Value = @"RDTX")]
        RDTX = 277,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXS")]
        TAXS = 278,

        [System.Runtime.Serialization.EnumMember(Value = @"VATX")]
        VATX = 279,

        [System.Runtime.Serialization.EnumMember(Value = @"WHLD")]
        WHLD = 280,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXR")]
        TAXR = 281,

        [System.Runtime.Serialization.EnumMember(Value = @"B112")]
        B112 = 282,

        [System.Runtime.Serialization.EnumMember(Value = @"BR12")]
        BR12 = 283,

        [System.Runtime.Serialization.EnumMember(Value = @"TLRF")]
        TLRF = 284,

        [System.Runtime.Serialization.EnumMember(Value = @"TLRR")]
        TLRR = 285,

        [System.Runtime.Serialization.EnumMember(Value = @"AIRB")]
        AIRB = 286,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSB")]
        BUSB = 287,

        [System.Runtime.Serialization.EnumMember(Value = @"FERB")]
        FERB = 288,

        [System.Runtime.Serialization.EnumMember(Value = @"RLWY")]
        RLWY = 289,

        [System.Runtime.Serialization.EnumMember(Value = @"TRPT")]
        TRPT = 290,

        [System.Runtime.Serialization.EnumMember(Value = @"CBTV")]
        CBTV = 291,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEC")]
        ELEC = 292,

        [System.Runtime.Serialization.EnumMember(Value = @"ENRG")]
        ENRG = 293,

        [System.Runtime.Serialization.EnumMember(Value = @"GASB")]
        GASB = 294,

        [System.Runtime.Serialization.EnumMember(Value = @"NWCH")]
        NWCH = 295,

        [System.Runtime.Serialization.EnumMember(Value = @"NWCM")]
        NWCM = 296,

        [System.Runtime.Serialization.EnumMember(Value = @"OTLC")]
        OTLC = 297,

        [System.Runtime.Serialization.EnumMember(Value = @"PHON")]
        PHON = 298,

        [System.Runtime.Serialization.EnumMember(Value = @"UBIL")]
        UBIL = 299,

        [System.Runtime.Serialization.EnumMember(Value = @"WTER")]
        WTER = 300,

        [System.Runtime.Serialization.EnumMember(Value = @"BOND")]
        BOND = 301,

        [System.Runtime.Serialization.EnumMember(Value = @"CABD")]
        CABD = 302,

        [System.Runtime.Serialization.EnumMember(Value = @"CAEQ")]
        CAEQ = 303,

        [System.Runtime.Serialization.EnumMember(Value = @"CBCR")]
        CBCR = 304,

        [System.Runtime.Serialization.EnumMember(Value = @"DBCR")]
        DBCR = 305,

        [System.Runtime.Serialization.EnumMember(Value = @"DICL")]
        DICL = 306,

        [System.Runtime.Serialization.EnumMember(Value = @"EQTS")]
        EQTS = 307,

        [System.Runtime.Serialization.EnumMember(Value = @"FLCR")]
        FLCR = 308,

        [System.Runtime.Serialization.EnumMember(Value = @"EFTC")]
        EFTC = 309,

        [System.Runtime.Serialization.EnumMember(Value = @"EFTD")]
        EFTD = 310,

        [System.Runtime.Serialization.EnumMember(Value = @"MOMA")]
        MOMA = 311,

        [System.Runtime.Serialization.EnumMember(Value = @"RAPI")]
        RAPI = 312,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMB")]
        GAMB = 313,

        [System.Runtime.Serialization.EnumMember(Value = @"LOTT")]
        LOTT = 314,

        [System.Runtime.Serialization.EnumMember(Value = @"AMEX")]
        AMEX = 315,

        [System.Runtime.Serialization.EnumMember(Value = @"SASW")]
        SASW = 316,

        [System.Runtime.Serialization.EnumMember(Value = @"AUCO")]
        AUCO = 317,

        [System.Runtime.Serialization.EnumMember(Value = @"PCOM")]
        PCOM = 318,

        [System.Runtime.Serialization.EnumMember(Value = @"PDEP")]
        PDEP = 319,

        [System.Runtime.Serialization.EnumMember(Value = @"PLDS")]
        PLDS = 320,

        [System.Runtime.Serialization.EnumMember(Value = @"PLRF")]
        PLRF = 321,

        [System.Runtime.Serialization.EnumMember(Value = @"GAFA")]
        GAFA = 322,

        [System.Runtime.Serialization.EnumMember(Value = @"GAHO")]
        GAHO = 323,

        [System.Runtime.Serialization.EnumMember(Value = @"CPEN")]
        CPEN = 324,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPD")]
        DEPD = 325,

        [System.Runtime.Serialization.EnumMember(Value = @"RETL")]
        RETL = 326,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBT")]
        DEBT = 327,

    }

    /// <summary>
    /// Specifies the scheduled payment date type requested. For a full list of enumeration values refer to `OBInternalScheduleType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalScheduleType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Arrival")]
        Arrival = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Execution")]
        Execution = 1,

    }

    /// <summary>
    /// Specifies the status of the standing order in code form. For a full list of enumeration values refer to 'ExternalMandateStatus1Code' in *ISO_External_Codeset* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalMandateStatus1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTV")]
        ACTV = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANC")]
        CANC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPI")]
        EXPI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUSP")]
        SUSP = 3,

    }

    /// <summary>
    /// Statement type, in a coded form. For a full list of values see `OBInternalStatementType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalStatementType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosure")]
        AccountClosure = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Annual")]
        Annual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Interim")]
        Interim = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RegularPeriodic")]
        RegularPeriodic = 4,

    }

    /// <summary>
    /// For a full list of enumeration values refer to `OBFrequency2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBFrequency2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR")]
        YEAR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DAIL")]
        DAIL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INDA")]
        INDA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MNTH")]
        MNTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"QURT")]
        QURT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MIAN")]
        MIAN = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TEND")]
        TEND = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MOVE")]
        MOVE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 8,

    }

    /// <summary>
    /// Individual Definitions:
    /// <br/> ADHO - Adhoc 
    /// <br/> YEAR - Annual
    /// <br/>DAIL - Daily
    /// <br/>INDA - Intra Day
    /// <br/>MNTH - Monthly
    /// <br/>QURT - Quarterly
    /// <br/>WEEK - Weekly 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBFrequencyPeriodType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADHO")]
        ADHO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR")]
        YEAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DAIL")]
        DAIL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INDA")]
        INDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MNTH")]
        MNTH = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"QURT")]
        QURT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MIAN")]
        MIAN = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 7,

    }

    /// <summary>
    /// For a full list of enumeration values refer to `ExternalDocumentFormat1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBFileFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DPDF")]
        DPDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DXML")]
        DXML = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SDSH")]
        SDSH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WORD")]
        WORD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"XSLT")]
        XSLT = 4,

    }

    /// <summary>
    /// Provides further details of the mandate signed between the creditor and the debtor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBMandateRelatedInformation1
    {
        /// <summary>
        /// Unique identification, as assigned by the creditor, to unambiguously identify the mandate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MandateIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? MandateIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Classification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalMandateClassification1Code? Classification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        /// <summary>
        /// The date on which the first payment for a recurrent credit transfer will be made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPaymentDateTime { get; set; } = default!;

        /// <summary>
        /// The date on which the first recurring payment for a Standing Order schedule will be made. 
        /// <br/>Usage: This must be populated only if the first recurring date is different to the first payment date. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecurringPaymentDateTime { get; set; } = default!;

        /// <summary>
        /// The date on which the final payment for a recurrent credit transfer will be made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinalPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBFrequency6 Frequency { get; set; }

        /// <summary>
        /// Reason for the setup of the credit transfer mandate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Reason { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of the merchant involved in the transaction.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBMerchantDetails1
    {
        /// <summary>
        /// Name by which the merchant is known.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? MerchantName { get; set; } = default!;

        /// <summary>
        /// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 3)]
        public string? MerchantCategoryCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPCAData1
    {
        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails2? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the PCA account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest2? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Details about Overdraft rates, fees &amp; charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft2? Overdraft { get; set; } = default!;

        /// <summary>
        /// Contains details of fees and charges which are not associated with either borrowing or features/benefits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeesCharges2? OtherFeesCharges { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBParty2
    {
        [Newtonsoft.Json.JsonProperty("PartyId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string PartyId { get; set; }

        [Newtonsoft.Json.JsonProperty("PartyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? PartyNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PartyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalPartyType1Code? PartyType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FullLegalName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? FullLegalName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LegalStructure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegalStructure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        /// <summary>
        /// A flag to indicate a party's beneficial ownership of the related account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BeneficialOwnership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeneficialOwnership { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AccountRole { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("EmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? EmailAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
        public string? Phone { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Mobile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\+[0-9]{1,3}-[0-9()+\-]{1,30}")]
        public string? Mobile { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Relationships", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPartyRelationships1? Relationships { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBPostalAddress7>? Address { get; set; } = default!;

    }

    /// <summary>
    /// The Party's relationships with other resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPartyRelationships1
    {
        /// <summary>
        /// Relationship to the Account resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Account3? Account { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPostalAddress7
    {
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAddressType2Code? AddressType { get; set; } = default!;

        /// <summary>
        /// Identification of a division of a large organisation or building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Department { get; set; } = default!;

        /// <summary>
        /// Identification of a sub-division of a large organisation or building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubDepartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SubDepartment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? BuildingName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Floor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UnitNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? UnitNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Room { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostBox { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TownLocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DistrictName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? DistrictName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CareOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? CareOf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TownName { get; set; } = default!;

        /// <summary>
        /// Identifies a subdivision of a country such as state, region, county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        /// <summary>
        /// Nation with its own government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(7)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadAccount6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadBalance1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data2 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadBeneficiary5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data3 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadConsent1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data4 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk2 Risk { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadConsentResponse1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data5 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRisk2? Risk { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadDataStatement2
    {
        [Newtonsoft.Json.JsonProperty("Statement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatement2>? Statement { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadDataTransaction6
    {
        [Newtonsoft.Json.JsonProperty("Transaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBTransaction6>? Transaction { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadDirectDebit2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data6 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadOffer1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data7 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadParty2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data8 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadParty3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data9 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    /// <summary>
    /// Product details of Other Product which is not available in the standard list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadProduct2
    {
        /// <summary>
        /// Aligning with the read write specs structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data10 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadScheduledPayment3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data11 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadStandingOrder6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data12 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadStatement2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBReadDataStatement2 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReadTransaction6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBReadDataTransaction6 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBScheduledPayment3
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset ScheduledPaymentDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalScheduleType1Code ScheduledType { get; set; }

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_1? CreditorAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBScheduledPayment3Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset ScheduledPaymentDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalScheduleType1Code ScheduledType { get; set; }

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBScheduledPayment3Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ScheduledPaymentId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ScheduledPaymentDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset ScheduledPaymentDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ScheduledType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalScheduleType1Code ScheduledType { get; set; }

        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? DebtorReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_1 InstructedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBCashAccount5_1 CreditorAccount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStandingOrder6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalMandateStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount5_1? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMandateRelatedInformation1? MandateRelatedInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStandingOrder6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalMandateStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMandateRelatedInformation1? MandateRelatedInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStandingOrder6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StandingOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StandingOrderId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? NextPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StandingOrderStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalMandateStatus1Code? StandingOrderStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_2? FirstPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NextPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_3? NextPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_11? LastPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_4? FinalPaymentAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification5_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBCashAccount5_1 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMandateRelatedInformation1? MandateRelatedInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStatement2
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalStatementType1Code Type { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementAmount>? StatementAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue>? StatementValue { get; set; } = default!;

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue? TotalValue { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStatement2Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalStatementType1Code Type { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit2>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee2>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest2>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime2>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate2>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue2>? StatementValue { get; set; } = default!;

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue2? TotalValue { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on a statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStatement2Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? StatementId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalStatementType1Code Type { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatementDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementDescription { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementBenefit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementBenefit3>? StatementBenefit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementFee3>? StatementFee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementInterest3>? StatementInterest { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementAmount2>? StatementAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementDateTime3>? StatementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementRate3>? StatementRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatementValue3>? StatementValue { get; set; } = default!;

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue3? TotalValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStatusReason
    {
        /// <summary>
        /// Specifies the status reason in a code form. 
        /// <br/> For a full description see `OBExternalStatusReason1Code` [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? StatusReasonCode { get; set; } = default!;

        /// <summary>
        /// Description supporting the StatusReasonCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        /// <summary>
        /// Recommended but optional reference to JSON path if relevant to the StatusReasonCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBSupplementaryData1
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBTransaction6
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_1 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExternalEntryStatus1Code Status { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset BookingDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? TransactionInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ExtendedProprietaryBankTransactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBExtendedProprietaryBankTransactionCode>? ExtendedProprietaryBankTransactionCodes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCashBalance? Balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MerchantDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMerchantDetails1? MerchantDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_0? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_2? DebtorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_1? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PaymentPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalPurpose1Code? PaymentPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBTransaction6Basic
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_1 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExternalEntryStatus1Code Status { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset BookingDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ExtendedProprietaryBankTransactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBExtendedProprietaryBankTransactionCode>? ExtendedProprietaryBankTransactionCodes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PaymentPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalPurpose1Code? PaymentPurposeCode { get; set; } = default!;

    }

    /// <summary>
    /// Provides further details on an entry in the report.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBTransaction6Detail
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public string? TransactionReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatementReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? StatementReference { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_1 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExternalEntryStatus1Code Status { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionMutability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalTransactionMutability1Code? TransactionMutability { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BookingDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset BookingDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ValueDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ValueDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TransactionInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? TransactionInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? AddressLine { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_9 Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("ChargeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_10? ChargeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CurrencyExchange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCurrencyExchange5? CurrencyExchange { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBankTransactionCodeStructure1? BankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ProprietaryBankTransactionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProprietaryBankTransactionCodeStructure1? ProprietaryBankTransactionCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ExtendedProprietaryBankTransactionCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBExtendedProprietaryBankTransactionCode>? ExtendedProprietaryBankTransactionCodes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCashBalance? Balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MerchantDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMerchantDetails1? MerchantDetails { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_1? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_0? CreditorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBranchAndFinancialInstitutionIdentification6_2? DebtorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccount6_1? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CardInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBTransactionCardInstrument1? CardInstrument { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PaymentPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalPurpose1Code? PaymentPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

    }

    /// <summary>
    /// Set of elements to describe the card instrument used in the transaction. &lt;br /&gt;
    /// <br/>For a full list of enumeration values refer to `OBInternalCardSchemeType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBTransactionCardInstrument1
    {
        /// <summary>
        /// Name of the card scheme. &lt;br /&gt;
        /// <br/>For a full list of enumeration values refer to `OBInternalCardSchemeType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CardSchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionCardInstrument1CardSchemeName? CardSchemeName { get; set; } = default!;

        /// <summary>
        /// The card authorisation type. &lt;br /&gt;
        /// <br/>For a full list of enumeration values refer to `OBInternalCardAuthorisationType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBTransactionCardInstrument1AuthorisationType? AuthorisationType { get; set; } = default!;

        /// <summary>
        /// Name of the cardholder using the card instrument.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify the card instrument used in the transaction. This identification is known by the account owner, and may be masked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

    }

    /// <summary>
    /// Set of elements used to define the balance as a numerical representation of the net increases and decreases in an account after a transaction entry is applied to the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBTransactionCashBalance
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_2 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBBalanceType1Code Type { get; set; }

        /// <summary>
        /// Amount of money of the cash balance after a transaction entry is applied to the account..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("V3IsClearedBalanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? V3IsClearedBalanceType { get; set; } = default!;

    }

    /// <summary>
    /// The Risk section is sent by the initiating party to the ASPSP. &lt;br /&gt;
    /// <br/>It is used to specify additional details for risk scoring for Account Info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRisk2
    {

    }

    /// <summary>
    /// Categorisation of fees and charges into standard categories.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeCategory1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FCOT")]
        FCOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FCRE")]
        FCRE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FCSV")]
        FCSV = 2,

    }

    /// <summary>
    /// Frequency at which the overdraft charge is applied to the account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How often is the overdraft fee/charge calculated for the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How frequently the fee/charge is applied to the account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// How frequently the fee/charge is calculated
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// Period e.g. day, week, month etc. for which the fee/charge is capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeFrequency1Code_4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEAC")]
        FEAC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FEAO")]
        FEAO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FECP")]
        FECP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FEDA")]
        FEDA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FEHO")]
        FEHO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FEI")]
        FEI = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FEMO")]
        FEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOA")]
        FEOA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FEOT")]
        FEOT = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPC")]
        FEPC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPH")]
        FEPH = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPO")]
        FEPO = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPS")]
        FEPS = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPT")]
        FEPT = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTA")]
        FEPTA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FEPTP")]
        FEPTP = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"FEQU")]
        FEQU = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"FESM")]
        FESM = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"FEST")]
        FEST = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"FEWE")]
        FEWE = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"FEYE")]
        FEYE = 20,

    }

    /// <summary>
    /// Fee/Charge Type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_FeeType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Methods of calculating interest
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestCalculationMethod1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ITCO")]
        ITCO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ITOT")]
        ITOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ITSI")]
        ITSI = 2,

    }

    /// <summary>
    /// Type of interest rate, Fixed or Variable
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestFixedVariableType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFI")]
        INFI = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INVA")]
        INVA = 1,

    }

    /// <summary>
    /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestRateType1Code_0
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    /// <summary>
    /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_InterestRateType1Code_1
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    /// <summary>
    /// Min Max type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_MinMaxType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FMMN")]
        FMMN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FMMX")]
        FMMX = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_0
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other application frequencies that are not available in the standard code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_1
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other calculation frequency which is not available in the standard code set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_2
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other Fee type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_3
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other fee rate type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_4
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other fee rate type which is not in the standard rate type list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_5
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other application frequencies not covered in the standard code list
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_6
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other calculation frequency which is not available in standard code set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_7
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other fee rate type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherCodeType1_8
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other Fee/charge type which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OB_OtherFeeChargeDetailType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeCategory1Code FeeCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_OverdraftFeeType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Period e.g. day, week, month etc. for which the fee/charge is capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OB_Period1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// Set of elements to fully identify a proprietary bank transaction code.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProprietaryBankTransactionCodeStructure1
    {
        /// <summary>
        /// Proprietary bank transaction code to identify the underlying transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string Code { get; set; }

        /// <summary>
        /// Identification of the issuer of the proprietary bank transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

    }

    /// <summary>
    /// Additional proprietary bank transaction codes used by the ASPSP for the underlying transaction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBExtendedProprietaryBankTransactionCode
    {
        /// <summary>
        /// Proprietary bank transaction code to identify the underlying transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string Code { get; set; }

        /// <summary>
        /// Identification of the issuer of the proprietary bank transaction code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

        /// <summary>
        /// Description of the code and its usage on the ASPSP channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Beneficiary Type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalBeneficiaryType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Trusted")]
        Trusted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ordinary")]
        Ordinary = 1,

    }

    /// <summary>
    /// Frequency and format of statments for an account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementFrequencyAndFormatInner
    {
        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBFrequency2? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CommunicationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBCommunicationMethod? CommunicationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBFileFormat? Format { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DeliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? DeliveryAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Model
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorReferenceInformation
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCreditorReferenceType1Code? Code { get; set; } = default!;

        /// <summary>
        /// Entity that assigns the identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

        /// <summary>
        /// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify an account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Provides the details to identify an account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z0-9]{18,18}[0-9]{2,2}$")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductDetails
    {
        /// <summary>
        /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
        /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
        /// <br/>With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment>? Segment { get; set; } = default!;

        /// <summary>
        /// The length/duration of the fee free period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeFreeLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the promotional length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLengthPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDetailsFeeFreeLengthPeriod? FeeFreeLengthPeriod { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Core product details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditInterest
    {
        /// <summary>
        /// The group of tiers or bands for which credit interest can be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBandSet> TierBandSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Overdraft
    {
        /// <summary>
        /// Associated Notes about the overdraft rates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier band set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBandSet> OverdraftTierBandSet { get; set; }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeesCharges
    {
        /// <summary>
        /// TariffType which defines the fee and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeesChargesTariffType? TariffType { get; set; } = default!;

        /// <summary>
        /// Name of the tariff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? TariffName { get; set; } = default!;

        /// <summary>
        /// Other tariff type which is not in the standard list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherTariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherTariffType? OtherTariffType { get; set; } = default!;

        /// <summary>
        /// Other fees/charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeChargeDetail> FeeChargeDetail { get; set; }

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap>? FeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductDetails2
    {
        /// <summary>
        /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
        /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
        /// <br/>With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment2>? Segment { get; set; } = default!;

        /// <summary>
        /// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyMaximumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MonthlyMaximumCharge { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Core product details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditInterest2
    {
        /// <summary>
        /// The group of tiers or bands for which credit interest can be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBandSet2> TierBandSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Overdraft2
    {
        /// <summary>
        /// Associated Notes about the overdraft rates
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier band set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBandSet2> OverdraftTierBandSet { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeesCharges2
    {
        /// <summary>
        /// Other fees/charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeChargeDetail2> FeeChargeDetail { get; set; }

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap2>? FeeChargeCap { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account3
    {
        /// <summary>
        /// Absolute URI to the related resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Related", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.Uri Related { get; set; }

        /// <summary>
        /// Unique identification as assigned by the ASPSP to uniquely identify the related resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data
    {
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBAccount6>? Account { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data2
    {
        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<Balance> Balance { get; set; }

        /// <summary>
        /// Combined sum of all Amounts in the accounts base currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalValue4? TotalValue { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data3
    {
        [Newtonsoft.Json.JsonProperty("Beneficiary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBBeneficiary5>? Beneficiary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data4
    {
        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<Permissions> Permissions { get; set; }

        /// <summary>
        /// Specified date and time the permissions will expire.
        /// <br/>If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

        /// <summary>
        /// Specified start date and time for the transaction query period.
        /// <br/>If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionFromDateTime { get; set; } = default!;

        /// <summary>
        /// Specified end date and time for the transaction query period.
        /// <br/>If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionToDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionToDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }
        
        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data5
    {
        /// <summary>
        /// Unique identification as assigned to identify the account access consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data5Status Status { get; set; }

        /// <summary>
        /// Specifies the status reason.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<Permissions2> Permissions { get; set; }

        /// <summary>
        /// Specified date and time the permissions will expire.
        /// <br/>If this is not populated, the permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

        /// <summary>
        /// Specified start date and time for the transaction query period.
        /// <br/>If this is not populated, the start date will be open ended, and data will be returned from the earliest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionFromDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionFromDateTime { get; set; } = default!;

        /// <summary>
        /// Specified end date and time for the transaction query period.
        /// <br/>If this is not populated, the end date will be open ended, and data will be returned to the latest available transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TransactionToDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? TransactionToDateTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data6
    {
        [Newtonsoft.Json.JsonProperty("DirectDebit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DirectDebit>? DirectDebit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data7
    {
        [Newtonsoft.Json.JsonProperty("Offer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Offer>? Offer { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data8
    {
        [Newtonsoft.Json.JsonProperty("Party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBParty2? Party { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data9
    {
        [Newtonsoft.Json.JsonProperty("Party", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBParty2>? Party { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data10
    {
        [Newtonsoft.Json.JsonProperty("Product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Product>? Product { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data11
    {
        [Newtonsoft.Json.JsonProperty("ScheduledPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBScheduledPayment3>? ScheduledPayment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data12
    {
        [Newtonsoft.Json.JsonProperty("StandingOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStandingOrder6>? StandingOrder { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementBenefit
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementFee
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementInterest
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementAmount
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        /// <summary>
        /// Amount of money of the cash balance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Amount2 Amount { get; set; }

        /// <summary>
        /// Optional component providing the equivalent of Amount in local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalAmount? LocalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementDateTime
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementRate
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementValue
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TotalValue
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementBenefit2
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementFee2
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementInterest2
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementDateTime2
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementRate2
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementValue2
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TotalValue2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a benefit or reward amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementBenefit3
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_5 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a fee for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementFee3
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_6 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic interest amount related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementInterest3
    {
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Frequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_7 Amount { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic amount for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementAmount2
    {
        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_0 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount_8 Amount { get; set; }

        /// <summary>
        /// Optional component providing the equivalent of Amount in local currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalAmount2? LocalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic date time for the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementDateTime3
    {
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic rate related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementRate3
    {
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string Rate { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details of a generic number value related to the statement resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatementValue3
    {
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TotalValue3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBTransactionCardInstrument1CardSchemeName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AmericanExpress")]
        AmericanExpress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Diners")]
        Diners = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Discover")]
        Discover = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterCard")]
        MasterCard = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBTransactionCardInstrument1AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ConsumerDevice")]
        ConsumerDevice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Contactless")]
        Contactless = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PIN")]
        PIN = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Amount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount1 { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// <br/>With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ClientAccount")]
        ClientAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NonCommercialChaitiesClbSoc")]
        NonCommercialChaitiesClbSoc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NonCommercialPublicAuthGovt")]
        NonCommercialPublicAuthGovt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Religious")]
        Religious = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SectorSpecific")]
        SectorSpecific = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Startup")]
        Startup = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Switcher")]
        Switcher = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductDetailsFeeFreeLengthPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBandSet
    {
        /// <summary>
        /// The methodology of how credit interest is paid/applied. It can be:-
        /// <br/>
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the BCA balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandSetTierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// Methods of calculating interest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSetCalculationMethod? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the BCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandSetDestination Destination { get; set; }

        /// <summary>
        /// Optional additional notes to supplement the Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier Band Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBand> TierBand { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBandSet
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftTierBandSetTierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSetOverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the overdraft Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Provides overdraft details for a specific tier or band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBand> OverdraftTierBand { get; set; }

        /// <summary>
        /// Overdraft fees and charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeesChargesTariffType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Electronic")]
        Electronic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Mixed")]
        Mixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherTariffType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeDetail
    {
        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetailFeeCategory FeeCategory { get; set; }

        /// <summary>
        /// Fee/Charge Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetailFeeType FeeType { get; set; }

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailFeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How frequently the fee/charge is calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetailCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the fee/charge details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap3>? FeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeCategoryType? OtherFeeCategoryType { get; set; } = default!;

        /// <summary>
        /// Other Fee/charge type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies not covered in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeCapMinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCapCappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType2>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// <br/>With respect to PCA products, they are segmented in relation to different markets that they wish to focus on. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BenefitAndReward")]
        BenefitAndReward = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditInterest")]
        CreditInterest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cashback")]
        Cashback = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Graduate")]
        Graduate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Overdraft")]
        Overdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Packaged")]
        Packaged = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium")]
        Premium = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Reward")]
        Reward = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Student")]
        Student = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"YoungAdult")]
        YoungAdult = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Youth")]
        Youth = 13,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBandSet2
    {
        /// <summary>
        /// The methodology of how credit interest is charged. It can be:-
        /// <br/>
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the PCA balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandSet2TierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// Methods of calculating interest
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet2CalculationMethod? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the PCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandSet2Destination? Destination { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Tier Band Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBand2> TierBand { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBandSet2
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftTierBandSet2TierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet2OverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the overdraft Tier Band Set details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Provides overdraft details for a specific tier or band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBand2> OverdraftTierBand { get; set; }

        /// <summary>
        /// Overdraft fees and charges details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges2>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeDetail2
    {
        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetail2FeeCategory FeeCategory { get; set; }

        /// <summary>
        /// Fee/Charge Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetail2FeeType FeeType { get; set; }

        /// <summary>
        /// Fee Amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for Fee/Charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// How frequently the fee/charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeDetail2ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How frequently the fee/charge is calculated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeDetail2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the fee/charge details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeCategoryType2? OtherFeeCategoryType { get; set; } = default!;

        /// <summary>
        /// Other Fee/charge type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType3? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType2? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies not covered in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency2? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency2? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap4>? FeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange2? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap2
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType2> FeeType { get; set; }

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeCap2MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap2CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType4>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to define the balance details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Balance
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditDebitIndicator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBCreditDebitCode_2 CreditDebitIndicator { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBBalanceType1Code Type { get; set; }

        /// <summary>
        /// Indicates the date (and time) of the balance. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset DateTime { get; set; }

        /// <summary>
        /// Amount of money of the cash balance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Amount3 Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditLine>? CreditLine { get; set; } = default!;

        /// <summary>
        /// Optional component providing the equivalent of Amount in local currency. Default is Local Currency (LCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LocalAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalAmount3? LocalAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        [Newtonsoft.Json.JsonProperty("V3IsClearedBalanceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? V3IsClearedBalanceType { get; set; } = default!;
        
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TotalValue4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the Open Banking account access data types. &lt;br /&gt; This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP. &lt;br /&gt; For a full list of enumeration values refer to `OBInternalPermissions1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Permissions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsBasic")]
        ReadAccountsBasic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsDetail")]
        ReadAccountsDetail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBalances")]
        ReadBalances = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesBasic")]
        ReadBeneficiariesBasic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesDetail")]
        ReadBeneficiariesDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadDirectDebits")]
        ReadDirectDebits = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOffers")]
        ReadOffers = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPAN")]
        ReadPAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadParty")]
        ReadParty = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPartyPSU")]
        ReadPartyPSU = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadProducts")]
        ReadProducts = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsBasic")]
        ReadScheduledPaymentsBasic = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsDetail")]
        ReadScheduledPaymentsDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersBasic")]
        ReadStandingOrdersBasic = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersDetail")]
        ReadStandingOrdersDetail = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsBasic")]
        ReadStatementsBasic = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsDetail")]
        ReadStatementsDetail = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsBasic")]
        ReadTransactionsBasic = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsCredits")]
        ReadTransactionsCredits = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDebits")]
        ReadTransactionsDebits = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDetail")]
        ReadTransactionsDetail = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPD")]
        EXPD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANC")]
        CANC = 4,

    }

    /// <summary>
    /// Specifies the Open Banking account access data types. &lt;br /&gt; This is a list of the data clusters being consented by the PSU, and requested for authorisation with the ASPSP. &lt;br /&gt; For a full list of enumeration values refer to `OBInternalPermissions1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Permissions2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsBasic")]
        ReadAccountsBasic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadAccountsDetail")]
        ReadAccountsDetail = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBalances")]
        ReadBalances = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesBasic")]
        ReadBeneficiariesBasic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadBeneficiariesDetail")]
        ReadBeneficiariesDetail = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadDirectDebits")]
        ReadDirectDebits = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOffers")]
        ReadOffers = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPAN")]
        ReadPAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadParty")]
        ReadParty = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadPartyPSU")]
        ReadPartyPSU = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadProducts")]
        ReadProducts = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsBasic")]
        ReadScheduledPaymentsBasic = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadScheduledPaymentsDetail")]
        ReadScheduledPaymentsDetail = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersBasic")]
        ReadStandingOrdersBasic = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStandingOrdersDetail")]
        ReadStandingOrdersDetail = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsBasic")]
        ReadStatementsBasic = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadStatementsDetail")]
        ReadStatementsDetail = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsBasic")]
        ReadTransactionsBasic = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsCredits")]
        ReadTransactionsCredits = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDebits")]
        ReadTransactionsDebits = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadTransactionsDetail")]
        ReadTransactionsDetail = 20,

    }

    /// <summary>
    /// Account to or from which a cash entry is made.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DirectDebit
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("DirectDebitId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? DirectDebitId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DirectDebitStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalMandateStatus1Code? DirectDebitStatusCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBMandateRelatedInformation1? MandateRelatedInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PreviousPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PreviousPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount_0? PreviousPaymentAmount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Offer
    {
        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        /// <summary>
        /// A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OfferId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? OfferId { get; set; } = default!;

        /// <summary>
        /// Offer type, in a coded form. For a full list of values refer to `OBExternalOfferType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OfferType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OfferType? OfferType { get; set; } = default!;

        /// <summary>
        /// Further details of the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Date and time at which the offer starts. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the offer ends. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDateTime { get; set; } = default!;

        /// <summary>
        /// Rate associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? Rate { get; set; } = default!;

        /// <summary>
        /// Value associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Value { get; set; } = default!;

        /// <summary>
        /// Further details of the term of the offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Term { get; set; } = default!;

        /// <summary>
        /// URL (Uniform Resource Locator) where documentation on the offer can be found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("URL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? URL { get; set; } = default!;

        /// <summary>
        /// Amount of money associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount4? Amount { get; set; } = default!;

        /// <summary>
        /// Fee associated with the offer type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Fee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fee? Fee { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Product details associated with the Account
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Product
    {
        /// <summary>
        /// The name of the Product used for marketing purposes from a customer perspective. I.e. what the customer would recognise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? ProductName { get; set; } = default!;

        /// <summary>
        /// Identifier within the parent organisation for the product. Must be unique in the organisation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ProductId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string AccountId { get; set; }

        /// <summary>
        /// Any secondary Identification which supports Product Identifier to uniquely identify the current account banking products.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SecondaryProductId { get; set; } = default!;

        /// <summary>
        /// Descriptive code for the product category.  For a full list refer to `OBInternalProductType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)&lt;br /&gt;&lt;br /&gt; If ProductType - "Other" is chosen, the object OtherProductType must be populated with name, and description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ProductType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ProductType ProductType { get; set; }

        /// <summary>
        /// Unique and unambiguous identification of a Product Marketing State.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MarketingStateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? MarketingStateId { get; set; } = default!;

        /// <summary>
        /// This field provides extension to the ProductType enumeration. If ProductType - "Other" is chosen, this field must be populated with name, and description for ASPSP specific product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherProductType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherProductType? OtherProductType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BCA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBBCAData1? BCA { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PCA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPCAData1? PCA { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Amount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        /// <summary>
        /// The amount in the domestic or base accounting currency. Default is Base Currency (BCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Amount2SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models.Amount2SubType.BCUR;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LocalAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        /// <summary>
        /// The amount in the local market currency for which the asset is held. Default is Local Currency (LCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalAmountSubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models.LocalAmountSubType.LCUR;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LocalAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        /// <summary>
        /// The amount in the local market currency for which the asset is held. Default is Local Currency (LCUR) if not specified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalAmount2SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models.LocalAmount2SubType.LCUR;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetCalculationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Compound")]
        Compound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleInterest")]
        SimpleInterest = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSetDestination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PayAway")]
        PayAway = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfCredit")]
        SelfCredit = 1,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMinimum { get; set; }

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandDepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        /// <summary>
        /// Type of interest rate, Fixed or Variable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandFixedVariableInterestRateType FixedVariableInterestRateType { get; set; }

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string AER { get; set; }

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBandBankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the BCA product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType? OtherBankInterestType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency3? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency3? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSetOverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnDemand")]
        OnDemand = 1,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMin { get; set; }

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepresentativeAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? RepresentativeAPR { get; set; } = default!;

        /// <summary>
        /// Specifies the minimum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AgreementLengthMin { get; set; } = default!;

        /// <summary>
        /// Specifies the maximum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? AgreementLengthMax { get; set; } = default!;

        /// <summary>
        /// Specifies the period of a fixed length overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandAgreementPeriod? AgreementPeriod { get; set; } = default!;

        /// <summary>
        /// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is £2k and the interest tiers are:- 0-£500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the ‘Whole’ of the account balance,  and in the 2nd that it is ‘Tiered’.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandOverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier/band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Overdraft fees and charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges3>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailFeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetailCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap3
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType3> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeCap3MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap3CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType5>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeCategoryType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OtherFeeTypeFeeCategory FeeCategory { get; set; }

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeApplicableRange
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCapMinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCapCappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2CalculationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Compound")]
        Compound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleInterest")]
        SimpleInterest = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet2Destination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PayAway")]
        PayAway = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfCredit")]
        SelfCredit = 1,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBand2
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMinimum { get; set; }

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the PCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBand2ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2DepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        /// <summary>
        /// Type of interest rate, Fixed or Variable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBand2FixedVariableInterestRateType FixedVariableInterestRateType { get; set; }

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string AER { get; set; }

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the PCA.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand2BankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the PCA product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier Band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType2? OtherBankInterestType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency4? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency4? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet2TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet2OverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnDemand")]
        OnDemand = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBand2
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMin { get; set; }

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// Interest charged on whole amount or tiered/banded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand2OverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates that a bank provides the overdraft limit up to TierValueMIn to all customers automatically
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// An annual percentage rate (APR) is the annual rate charged for borrowing or earned through an investment. APR is expressed as a percentage that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction but does not take compounding into account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepresentativeAPR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? RepresentativeAPR { get; set; } = default!;

        /// <summary>
        /// Optional additional notes to supplement the Tier/band details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Overdraft fees and charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges4>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges2
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap2>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail2> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeDetail2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeCategoryType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Categorisation of fees and charges into standard categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OtherFeeType3FeeCategory FeeCategory { get; set; }

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap4
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType4> FeeType { get; set; }

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required FeeChargeCap4MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FeeChargeCap4CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Free text for adding  extra details for fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType6>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeApplicableRange2
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap2MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap2CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Amount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        /// <summary>
        /// Balance sub type, in a coded form. Default if not specified is BCUR of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Amount3SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models.Amount3SubType.BCUR;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details on the credit line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditLine
    {
        /// <summary>
        /// Indicates whether or not the credit line is included in the balance of the account.
        /// <br/>Usage: If not present, credit line is not included in the balance amount of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Included", Required = Newtonsoft.Json.Required.Always)]
        public required bool Included { get; set; }

        /// <summary>
        /// Limit type, in a coded form. &lt;br /&gt; For a full list of enumeration values refer to `OBInternalLimitType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditLineType? Type { get; set; } = default!;

        /// <summary>
        /// Amount of money of the credit line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount5? Amount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LocalAmount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        /// <summary>
        /// Balance sub type, in a coded form. Default if not specified is LCUR of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SubType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalAmount3SubType? SubType { get; set; } = FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagAisp.Models.LocalAmount3SubType.LCUR;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OfferType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BalanceTransfer")]
        BalanceTransfer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LimitIncrease")]
        LimitIncrease = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MoneyTransfer")]
        MoneyTransfer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PromotionalRate")]
        PromotionalRate = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Amount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Fee
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessCurrentAccount")]
        BusinessCurrentAccount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CommercialCreditCard")]
        CommercialCreditCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalCurrentAccount")]
        PersonalCurrentAccount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMELoan")]
        SMELoan = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherProductType
    {
        /// <summary>
        /// Name of "Other" product type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description of "Other" product type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductDetails3? ProductDetails { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the Account holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditInterest3? CreditInterest { get; set; } = default!;

        /// <summary>
        /// Borrowing details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Overdraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overdraft3? Overdraft { get; set; } = default!;

        /// <summary>
        /// Details about the interest that may be payable to the SME Loan holders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanInterest? LoanInterest { get; set; } = default!;

        /// <summary>
        /// Repayment details of the Loan product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Repayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Repayment? Repayment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeesCharges3>? OtherFeesCharges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount2SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalAmountSubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalAmount2SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandDepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandFixedVariableInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandBankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherBankInterestType
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandAgreementPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandOverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Banded")]
        Banded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 2,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges3
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap3>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail3> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType5> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCapMinMaxType MinMaxType { get; set; }

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCapCappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType7>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetailFeeType FeeType { get; set; }

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailFeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetailApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetailCalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap4>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType8? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType3? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency5? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency5? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeQuarterly")]
        ServiceCAccountFeeQuarterly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCFixedTariff")]
        ServiceCFixedTariff = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCBusiDepAccBreakage")]
        ServiceCBusiDepAccBreakage = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCMinimumMonthlyFee")]
        ServiceCMinimumMonthlyFee = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap3MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap3CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeeTypeFeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PerAcademicTerm")]
        PerAcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PerAcademicTerm")]
        PerAcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HalfYearly")]
        HalfYearly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PerStatementDate")]
        PerStatementDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2DepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2FixedVariableInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed")]
        Fixed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Variable")]
        Variable = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand2BankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherBankInterestType2
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand2OverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tiered")]
        Tiered = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Whole")]
        Whole = 1,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges4
    {
        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap5>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Details about the fees/charges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail4> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap2
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType6> FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap2MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap2CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType9>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail2
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail2FeeType FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail2ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail2CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType10? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType4? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency6? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency6? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverdraftFeeChargeCap6? OverdraftFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeeType3FeeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Servicing")]
        Servicing = 1,

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFee")]
        ServiceCAccountFee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCAccountFeeMonthly")]
        ServiceCAccountFeeMonthly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceCOther")]
        ServiceCOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap4MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeChargeCap4CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Amount3SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreditLineType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Available")]
        Available = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Emergency")]
        Emergency = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Pre-Agreed")]
        PreAgreed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Amount5
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public string? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public string? Currency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalAmount3SubType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BCUR")]
        BCUR = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LCUR")]
        LCUR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ProductDetails3
    {
        [Newtonsoft.Json.JsonProperty("Segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Segment3>? Segment { get; set; } = default!;

        /// <summary>
        /// The length/duration of the fee free period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeFreeLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the promotional length
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeFreeLengthPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductDetails3FeeFreeLengthPeriod? FeeFreeLengthPeriod { get; set; } = default!;

        /// <summary>
        /// The maximum relevant charges that could accrue as defined fully in Part 7 of the CMA order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyMaximumCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MonthlyMaximumCharge { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherSegment { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditInterest3
    {
        [Newtonsoft.Json.JsonProperty("TierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBandSet3> TierBandSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Overdraft3
    {
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBandSet3> OverdraftTierBandSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterest
    {
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestTierBandSet", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<LoanInterestTierBandSet> LoanInterestTierBandSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Repayment
    {
        /// <summary>
        /// Repayment type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentType? RepaymentType { get; set; } = default!;

        /// <summary>
        /// Repayment frequency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentFrequency? RepaymentFrequency { get; set; } = default!;

        /// <summary>
        /// The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentAmountType? AmountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other repayment type which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherRepaymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherRepaymentType? OtherRepaymentType { get; set; } = default!;

        /// <summary>
        /// Other repayment frequency which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherRepaymentFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherRepaymentFrequency? OtherRepaymentFrequency { get; set; } = default!;

        /// <summary>
        /// Other amount type which is not in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherAmountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherAmountType? OtherAmountType { get; set; } = default!;

        /// <summary>
        /// Applicable fee/charges for repayment such as prepayment, full early repayment or non repayment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepaymentFeeCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepaymentFeeCharges? RepaymentFeeCharges { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RepaymentHoliday", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepaymentHoliday>? RepaymentHoliday { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either Overdraft or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeesCharges3
    {
        /// <summary>
        /// TariffType which defines the fee and charges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OtherFeesCharges3TariffType? TariffType { get; set; } = default!;

        /// <summary>
        /// Name of the tariff
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TariffName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? TariffName { get; set; } = default!;

        /// <summary>
        /// Other tariff type which is not in the standard list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherTariffType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherTariffType2? OtherTariffType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeChargeDetail3> FeeChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap5>? FeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap3
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType7> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap3MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap3CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType11>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail3
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail3FeeType FeeType { get; set; }

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail3ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail3CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap7>? OverdraftFeeChargeCap { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType12? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType5? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency7? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCapMinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCapCappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailFeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailFeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetailCalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap4
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType8> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap4MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap4CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType13>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType3
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap5
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType9> FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap5MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap5CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType14>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail4
    {
        /// <summary>
        /// Overdraft fee type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail4FeeType FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Every additional tranche of an overdraft balance to which an overdraft fee is applied
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        /// <summary>
        /// Amount charged for an overdraft fee/charge (where it is charged in terms of an amount rather than a rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        /// <summary>
        /// Rate charged for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        /// <summary>
        /// Rate type for overdraft fee/charge (where it is charged in terms of a rate rather than an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4FeeRateType? FeeRateType { get; set; } = default!;

        /// <summary>
        /// Frequency at which the overdraft charge is applied to the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeDetail4ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// How often is the overdraft fee/charge calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeDetail4CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Free text for capturing any other info related to Overdraft Fees Charge Details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other Fee type which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeType15? OtherFeeType { get; set; } = default!;

        /// <summary>
        /// Other fee rate type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherFeeRateType6? OtherFeeRateType { get; set; } = default!;

        /// <summary>
        /// Other application frequencies that are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherApplicationFrequency8? OtherApplicationFrequency { get; set; } = default!;

        /// <summary>
        /// Other calculation frequency which is not available in the standard code set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherCalculationFrequency8? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Details about any caps (maximum charges) that apply to a particular fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverdraftFeeChargeCap8? OverdraftFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap2MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap2CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType9
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail2CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType10
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType4
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap6
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType10> FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap6MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap6CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType16>? OtherFeeType { get; set; } = default!;

    }

    /// <summary>
    /// Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.
    /// <br/>Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Segment3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GEAS")]
        GEAS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBA")]
        GEBA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBR")]
        GEBR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GEBU")]
        GEBU = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GECI")]
        GECI = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GECS")]
        GECS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GEFB")]
        GEFB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"GEFG")]
        GEFG = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"GEG")]
        GEG = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GEGR")]
        GEGR = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"GEGS")]
        GEGS = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOT")]
        GEOT = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"GEOV")]
        GEOV = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"GEPA")]
        GEPA = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"GEPR")]
        GEPR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GERE")]
        GERE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GEST")]
        GEST = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"GEYA")]
        GEYA = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"GEYO")]
        GEYO = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"PSCA")]
        PSCA = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"PSES")]
        PSES = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"PSNC")]
        PSNC = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"PSNP")]
        PSNP = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"PSRG")]
        PSRG = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"PSSS")]
        PSSS = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"PSST")]
        PSST = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"PSSW")]
        PSSW = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductDetails3FeeFreeLengthPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// The group of tiers or bands for which credit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBandSet3
    {
        /// <summary>
        /// The methodology of how credit interest is paid/applied. It can be:-
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the product holder's account balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandSet3TierBandMethod TierBandMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestCalculationMethod1Code? CalculationMethod { get; set; } = default!;

        /// <summary>
        /// Describes whether accrued interest is payable only to the BCA or to another bank account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBandSet3Destination Destination { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherCalculationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherDestination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherDestination { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<TierBand3> TierBand { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tier band set details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBandSet3
    {
        /// <summary>
        /// The methodology of how overdraft is charged. It can be:
        /// <br/>'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable). 
        /// <br/>'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation
        /// <br/>'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftTierBandSet3TierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBandSet3OverdraftType? OverdraftType { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Indicates if the Overdraft is authorised (Y) or unauthorised (N)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorisedIndicator { get; set; } = default!;

        /// <summary>
        /// When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BufferAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? BufferAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftTierBand3> OverdraftTierBand { get; set; }

        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges5>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The group of tiers or bands for which debit interest can be applied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestTierBandSet
    {
        /// <summary>
        /// The methodology of how credit interest is charged. It can be:-
        /// <br/>1. Banded
        /// <br/>Interest rates are banded. i.e. Increasing rate on whole balance as balance increases.
        /// <br/>2. Tiered
        /// <br/>Interest rates are tiered. i.e. increasing rate for each tier as balance increases, but interest paid on tier fixed for that tier and not on whole balance.
        /// <br/>3. Whole
        /// <br/>The same interest rate is applied irrespective of the SME Loan balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierBandMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required LoanInterestTierBandSetTierBandMethod TierBandMethod { get; set; }

        /// <summary>
        /// Loan interest tierbandset identification. Used by  loan providers for internal use purpose.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CalculationMethod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_InterestCalculationMethod1Code CalculationMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherCalculationMethod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestTierBand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<LoanInterestTierBand> LoanInterestTierBand { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanInterestFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeesCharges>? LoanInterestFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USBA")]
        USBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USBU")]
        USBU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"USCI")]
        USCI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"USCS")]
        USCS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"USFA")]
        USFA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USFB")]
        USFB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"USFI")]
        USFI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"USIO")]
        USIO = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"USOT")]
        USOT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"USPF")]
        USPF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"USRW")]
        USRW = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"USSL")]
        USSL = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SMDA")]
        SMDA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SMFL")]
        SMFL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SMFO")]
        SMFO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SMHY")]
        SMHY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SMMO")]
        SMMO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SMOT")]
        SMOT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"SMQU")]
        SMQU = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SMWE")]
        SMWE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SMYE")]
        SMYE = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentAmountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RABD")]
        RABD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RABL")]
        RABL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RACI")]
        RACI = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RAFC")]
        RAFC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RAIO")]
        RAIO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RALT")]
        RALT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"USOT")]
        USOT = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherRepaymentType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherRepaymentFrequency
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherAmountType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RepaymentFeeCharges
    {
        [Newtonsoft.Json.JsonProperty("RepaymentFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<RepaymentFeeChargeDetail> RepaymentFeeChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("RepaymentFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RepaymentFeeChargeCap>? RepaymentFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details of capital repayment holiday if any
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RepaymentHoliday
    {
        /// <summary>
        /// The maximum length/duration of a Repayment Holiday
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxHolidayLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxHolidayLength { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the repayment holiday
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxHolidayPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepaymentHolidayMaxHolidayPeriod? MaxHolidayPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OtherFeesCharges3TariffType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TTEL")]
        TTEL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TTMX")]
        TTMX = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TTOT")]
        TTOT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherTariffType2
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeDetail3
    {
        [Newtonsoft.Json.JsonProperty("FeeCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeCategory1Code FeeCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeType1Code FeeType { get; set; }

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_3? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FeeChargeCap6>? FeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeCategoryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_0? OtherFeeCategoryType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_8? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        /// <summary>
        /// Range or amounts or rates for which the fee/charge applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeApplicableRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FeeApplicableRange3? FeeApplicableRange { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap5
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType11> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType17>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap3MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap3CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType11
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail3CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OnClosing")]
        OnClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OnOpening")]
        OnOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAnniversary")]
        OnAnniversary = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHundredPounds")]
        PerHundredPounds = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap7
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType12> FeeType { get; set; }

        /// <summary>
        /// Min Max type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap7MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it’s part of a government scheme, or whether the rate may vary dependent on the applicant’s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap7CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType18>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType12
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType5
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency7
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap4MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap4CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType13
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap5MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap5CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType14
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4FeeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4FeeRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LinkedBaseRate")]
        LinkedBaseRate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Gross")]
        Gross = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Net")]
        Net = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeDetail4CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountClosing")]
        AccountClosing = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccountOpening")]
        AccountOpening = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingPeriod")]
        ChargingPeriod = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PerItem")]
        PerItem = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAccountAnniversary")]
        OnAccountAnniversary = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"PerHour")]
        PerHour = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PerOccurrence")]
        PerOccurrence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PerSheet")]
        PerSheet = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransaction")]
        PerTransaction = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionAmount")]
        PerTransactionAmount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"PerTransactionPercentage")]
        PerTransactionPercentage = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarterly")]
        Quarterly = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SixMonthly")]
        SixMonthly = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"StatementMonthly")]
        StatementMonthly = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Yearly")]
        Yearly = 19,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType15
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeRateType6
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherApplicationFrequency8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherCalculationFrequency8
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap8
    {
        /// <summary>
        /// Fee/charge type which is being capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType13> FeeType { get; set; }

        /// <summary>
        /// Specifies for the overdraft control feature/benefit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates that this is the minimum/ maximum fee/charge that can be applied by the financial institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OverdraftFeeChargeCap8MinMaxType MinMaxType { get; set; }

        /// <summary>
        /// fee/charges are captured dependent on the number of occurrences rather than capped at a particular amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? FeeCapOccurrence { get; set; } = default!;

        /// <summary>
        /// Cap amount charged for a fee/charge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        /// <summary>
        /// Period e.g. day, week, month etc. for which the fee/charge is capped
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftFeeChargeCap8CappingPeriod? CappingPeriod { get; set; } = default!;

        /// <summary>
        /// Notes related to Overdraft fee charge cap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other fee type code which is not available in the standard code set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType19>? OtherFeeType { get; set; } = default!;

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap6MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap6CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType16
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet3TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBandSet3Destination
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INPA")]
        INPA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INSC")]
        INSC = 2,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record TierBand3
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for the Product.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMinimum { get; set; }

        /// <summary>
        /// Maximum deposit value for which the credit interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// How often is credit interest calculated for the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3CalculationFrequency? CalculationFrequency { get; set; } = default!;

        /// <summary>
        /// How often is interest applied to the Product for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required TierBand3ApplicationFrequency ApplicationFrequency { get; set; }

        /// <summary>
        /// Amount on which Interest applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DepositInterestAppliedCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3DepositInterestAppliedCoverage? DepositInterestAppliedCoverage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_InterestFixedVariableType1Code FixedVariableInterestRateType { get; set; }

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AER", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string AER { get; set; }

        /// <summary>
        /// Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the account holder's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TierBand3BankInterestRateType? BankInterestRateType { get; set; } = default!;

        /// <summary>
        /// Bank Interest for the product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? BankInterestRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherBankInterestType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherBankInterestType3? OtherBankInterestType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet3TierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBandSet3OverdraftType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OVCO")]
        OVCO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OVOD")]
        OVOD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OVOT")]
        OVOT = 2,

    }

    /// <summary>
    /// Provides overdraft details for a specific tier or band
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftTierBand3
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMin { get; set; }

        /// <summary>
        /// Maximum value of Overdraft Tier/Band
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMax { get; set; } = default!;

        /// <summary>
        /// EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently
        /// <br/>used interchangeably), being the actual annual interest rate of an Overdraft.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EAR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? EAR { get; set; } = default!;

        /// <summary>
        /// Specifies the minimum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgreementLengthMin { get; set; } = default!;

        /// <summary>
        /// Specifies the maximum length of a band for a fixed overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementLengthMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AgreementLengthMax { get; set; } = default!;

        /// <summary>
        /// Specifies the period of a fixed length overdraft agreement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AgreementPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand3AgreementPeriod? AgreementPeriod { get; set; } = default!;

        /// <summary>
        /// Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is  2k and the interest tiers are:- 0- 500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the  Whole  of the account balance,  and in the 2nd that it is  Tiered .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftInterestChargingCoverage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OverdraftTierBand3OverdraftInterestChargingCoverage? OverdraftInterestChargingCoverage { get; set; } = default!;

        /// <summary>
        /// Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it s part of a government scheme, or whether the rate may vary dependent on the applicant s circumstances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BankGuaranteedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BankGuaranteedIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeesCharges6>? OverdraftFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fees and charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges5
    {
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap9>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail5> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandSetTierBandMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    /// <summary>
    /// Tier Band Details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestTierBand
    {
        /// <summary>
        /// Unique and unambiguous identification of a  Tier Band for a SME Loan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// Minimum loan value for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinimum", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public required string TierValueMinimum { get; set; }

        /// <summary>
        /// Maximum loan value for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? TierValueMaximum { get; set; } = default!;

        /// <summary>
        /// Minimum loan term for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMinTerm", Required = Newtonsoft.Json.Required.Always)]
        public required int TierValueMinTerm { get; set; }

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the Minimum Term
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinTermPeriod", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required LoanInterestTierBandMinTermPeriod MinTermPeriod { get; set; }

        /// <summary>
        /// Maximum loan term for which the loan interest tier applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TierValueMaxTerm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TierValueMaxTerm { get; set; } = default!;

        /// <summary>
        /// The unit of period (days, weeks, months etc.) of the Maximum Term
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaxTermPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandMaxTermPeriod? MaxTermPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FixedVariableInterestRateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_InterestFixedVariableType1Code FixedVariableInterestRateType { get; set; }

        /// <summary>
        /// The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made. 
        /// <br/>For SME Loan, this APR is the representative APR which includes any account fees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RepAPR", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public required string RepAPR { get; set; }

        /// <summary>
        /// Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanProviderInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoanInterestTierBandLoanProviderInterestRateType? LoanProviderInterestRateType { get; set; } = default!;

        /// <summary>
        /// Loan provider Interest for the SME Loan product
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoanProviderInterestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? LoanProviderInterestRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        /// <summary>
        /// Other loan interest rate types which are not available in the standard code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OtherLoanProviderInterestRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OtherLoanProviderInterestRateType? OtherLoanProviderInterestRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LoanInterestFeesCharges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeesCharges2>? LoanInterestFeesCharges { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeesCharges
    {
        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<LoanInterestFeeChargeDetail> LoanInterestFeeChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeCap>? LoanInterestFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about specific fees/charges that are applied for repayment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RepaymentFeeChargeDetail
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeType1Code FeeType { get; set; }

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_3 CalculationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_8? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// RepaymentFeeChargeCap sets daily, weekly, monthly, yearly limits on the fees that are charged
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RepaymentFeeChargeCap
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType14> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType20>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepaymentHolidayMaxHolidayPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular or group of fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeChargeCap6
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType15> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType21>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FeeApplicableRange3
    {
        /// <summary>
        /// Minimum Amount on which fee/charge is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumAmount { get; set; } = default!;

        /// <summary>
        /// Maximum Amount on which fee is applicable (where it is expressed as an amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumAmount { get; set; } = default!;

        /// <summary>
        /// Minimum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MinimumRate { get; set; } = default!;

        /// <summary>
        /// Maximum rate on which fee/charge is applicable(where it is expressed as an rate)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MaximumRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? MaximumRate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType17
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap7MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap7CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType18
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Overdraft fee type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ArrangedOverdraft")]
        ArrangedOverdraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyBorrowing")]
        EmergencyBorrowing = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BorrowingItem")]
        BorrowingItem = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftRenewal")]
        OverdraftRenewal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AnnualReview")]
        AnnualReview = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverdraftSetup")]
        OverdraftSetup = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Surcharge")]
        Surcharge = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TempOverdraft")]
        TempOverdraft = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedBorrowing")]
        UnauthorisedBorrowing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedPaidTrans")]
        UnauthorisedPaidTrans = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"UnauthorisedUnpaidTrans")]
        UnauthorisedUnpaidTrans = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap8MinMaxType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftFeeChargeCap8CappingPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AcademicTerm")]
        AcademicTerm = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Half Year")]
        Half_Year = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Quarter")]
        Quarter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 6,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType19
    {
        /// <summary>
        /// The four letter Mnemonic used within an XML file to identify a code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\w{0,4}$")]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Long name associated with the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        /// <summary>
        /// Description to describe the purpose of the code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3CalculationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FQAT")]
        FQAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FQDY")]
        FQDY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FQHY")]
        FQHY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FQMY")]
        FQMY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FQOT")]
        FQOT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FQQY")]
        FQQY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FQSD")]
        FQSD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FQWY")]
        FQWY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FQYY")]
        FQYY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3ApplicationFrequency
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FQAT")]
        FQAT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FQDY")]
        FQDY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FQHY")]
        FQHY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FQMY")]
        FQMY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FQOT")]
        FQOT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FQQY")]
        FQQY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FQSD")]
        FQSD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FQWY")]
        FQWY = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FQYY")]
        FQYY = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3DepositInterestAppliedCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TierBand3BankInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherBankInterestType3
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand3AgreementPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OverdraftTierBand3OverdraftInterestChargingCoverage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBA")]
        INBA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INTI")]
        INTI = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INWH")]
        INWH = 2,

    }

    /// <summary>
    /// Overdraft fees and charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeesCharges6
    {
        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap10>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OverdraftFeeChargeDetail6> OverdraftFeeChargeDetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap9
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType16> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType22>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail5
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_OverdraftFeeType1Code FeeType { get; set; }

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_0? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_0 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_1? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap11>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_3? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_4? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandMinTermPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandMaxTermPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PACT")]
        PACT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDAY")]
        PDAY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PHYR")]
        PHYR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PMTH")]
        PMTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PQTR")]
        PQTR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PWEK")]
        PWEK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PYER")]
        PYER = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanInterestTierBandLoanProviderInterestRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INBB")]
        INBB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INFR")]
        INFR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"INGR")]
        INGR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INLR")]
        INLR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INNE")]
        INNE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INOT")]
        INOT = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherLoanProviderInterestRateType
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains details of fees and charges which are not associated with either LoanRepayment or features/benefits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeesCharges2
    {
        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeDetail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<LoanInterestFeeChargeDetail2> LoanInterestFeeChargeDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("LoanInterestFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanInterestFeeChargeCap2>? LoanInterestFeeChargeCap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeeChargeDetail
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeType1Code FeeType { get; set; }

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_3 CalculationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_5? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeeChargeCap
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType17> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_4? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType23>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType20
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType21
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap10
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType18> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType24>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about the fees/charges
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeDetail6
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_OverdraftFeeType1Code FeeType { get; set; }

        /// <summary>
        /// Indicates whether fee and charges are negotiable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if the fee/charge is already covered by an 'Overdraft Control' fee or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OverdraftControlIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OverdraftControlIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("IncrementalBorrowingAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? IncrementalBorrowingAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_0? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_0 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_1? CalculationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OverdraftFeeChargeCap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverdraftFeeChargeCap12>? OverdraftFeeChargeCap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_3? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_4? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_1? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_2? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType22
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap11
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType19> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType25>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Other fees/charges details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeeChargeDetail2
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeType1Code FeeType { get; set; }

        /// <summary>
        /// Fee/charge which is usually negotiable rather than a fixed amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NegotiableIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NegotiableIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,3}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeRate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_InterestRateType1Code_1? FeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ApplicationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_2 ApplicationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("CalculationFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_FeeFrequency1Code_3 CalculationFrequency { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherFeeChargeDetailType? OtherFeeType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeRateType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_5? OtherFeeRateType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherApplicationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_6? OtherApplicationFrequency { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherCalculationFrequency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OB_OtherCodeType1_7? OtherCalculationFrequency { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (minimum/maximum charges) that apply to a particular fee/charge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record LoanInterestFeeChargeCap2
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType20> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_FeeFrequency1Code_4? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType26>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType17
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType23
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType18
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType24
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about any caps (maximum charges) that apply to a particular fee/charge. Capping can either be based on an amount (in gbp), an amount (in items) or a rate.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OverdraftFeeChargeCap12
    {
        [Newtonsoft.Json.JsonProperty("FeeType", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<FeeType21> FeeType { get; set; }

        [Newtonsoft.Json.JsonProperty("MinMaxType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OB_MinMaxType1Code MinMaxType { get; set; }

        [Newtonsoft.Json.JsonProperty("FeeCapOccurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FeeCapOccurrence { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FeeCapAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(-?\d{1,14}){1}(\.\d{1,4}){0,1}$")]
        public string? FeeCapAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CappingPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OB_Period1Code? CappingPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Notes { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("OtherFeeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherFeeType27>? OtherFeeType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType19
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType25
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType20
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FEPF")]
        FEPF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAF")]
        FYAF = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAM")]
        FYAM = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FYAQ")]
        FYAQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FYCP")]
        FYCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FYDB")]
        FYDB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FYMI")]
        FYMI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FYXX")]
        FYXX = 8,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType26
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Fee/charge type which is being capped
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FeeType21
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FBAO")]
        FBAO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FBAR")]
        FBAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FBEB")]
        FBEB = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FBIT")]
        FBIT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOR")]
        FBOR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FBOS")]
        FBOS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FBSC")]
        FBSC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FBTO")]
        FBTO = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUB")]
        FBUB = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"FBUT")]
        FBUT = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FTOT")]
        FTOT = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"FTUT")]
        FTUT = 11,

    }

    /// <summary>
    /// Other fee type code which is not available in the standard code set
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OtherFeeType27
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\\w{0,4}$")]
        public string? Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625