//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace FinnovationLabs.OpenBanking.Library.BankApiModels.UkObRw.V4p0.NSwagPisp.Models
{
    using System = global::System;

    

    /// <summary>
    /// Ultimate party to which an amount of money is due.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBUltimateCreditor1
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ultimate party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBUltimateDebtor1
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Regularity with which credit transfer instructions are to be created and processed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBFrequency6
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBFrequency6Code Type { get; set; }

        /// <summary>
        /// Number of instructions to be created and processed during the specified period .Specifies a frequency in terms of a count per period within a specified frequency type. Note: should not be used alongside `PointInTime`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountPerPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountPerPeriod { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PointInTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string? PointInTime { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Enumeration of codes that outlines the type of purpose behind a transaction, payment or risk. 
    /// <br/> For all enum values see `ExternalCategoryPurpose1Code` [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalCategoryPurpose1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BONU")]
        BONU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CBLK")]
        CBLK = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CCRD")]
        CCRD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CGWV")]
        CGWV = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CIPC")]
        CIPC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CONC")]
        CONC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CORT")]
        CORT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"DCRD")]
        DCRD = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVI")]
        DIVI = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"DVPM")]
        DVPM = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"EPAY")]
        EPAY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FCDT")]
        FCDT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FCIN")]
        FCIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FCOL")]
        FCOL = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVT")]
        GOVT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"GP2P")]
        GP2P = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"HEDG")]
        HEDG = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ICCP")]
        ICCP = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"IDCP")]
        IDCP = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INTC")]
        INTC = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INTE")]
        INTE = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LBOX")]
        LBOX = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2B")]
        MP2B = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2P")]
        MP2P = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHR")]
        OTHR = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"PENS")]
        PENS = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"RPRE")]
        RPRE = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"RRCT")]
        RRCT = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPM")]
        RVPM = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"SALA")]
        SALA = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"SECU")]
        SECU = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"SSBE")]
        SSBE = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPP")]
        SUPP = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"SWEP")]
        SWEP = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXS")]
        TAXS = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"TOPG")]
        TOPG = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAD")]
        TRAD = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"TREA")]
        TREA = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"VATX")]
        VATX = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"VOST")]
        VOST = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"WHLD")]
        WHLD = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"ZABA")]
        ZABA = 43,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record File
    {

    }

    /// <summary>
    /// Links relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Links
    {
        [Newtonsoft.Json.JsonProperty("Self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.Uri Self { get; set; }

        [Newtonsoft.Json.JsonProperty("First", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? First { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Prev", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Prev { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Next { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri? Last { get; set; } = default!;

    }

    /// <summary>
    /// Meta Data relevant to the payload
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Meta
    {
        [Newtonsoft.Json.JsonProperty("TotalPages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalPages { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstAvailableDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LastAvailableDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastAvailableDateTime { get; set; } = default!;

    }

    /// <summary>
    /// Amount of money associated with the charge type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBActiveOrHistoricCurrencyAndAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    /// <summary>
    /// Identifies the nature of the postal address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressTypeCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Correspondence")]
        Correspondence = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryTo")]
        DeliveryTo = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"MailTo")]
        MailTo = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POBox")]
        POBox = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Postal")]
        Postal = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Residential")]
        Residential = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Statement")]
        Statement = 7,

    }

    /// <summary>
    /// Identifies the nature of the postal address. For a full set of codes see `OBAddressType2Code` [here](https://github.com/OpenBankingUK/External_Internal_CodeSets).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBAddressType2Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BIZZ")]
        BIZZ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DLVY")]
        DLVY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MLTO")]
        MLTO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PBOX")]
        PBOX = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDR")]
        ADDR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HOME")]
        HOME = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CORR")]
        CORR = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"STAT")]
        STAT = 7,

    }

    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// <br/>This is the servicer of the beneficiary account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBBranchAndFinancialInstitutionIdentification6_0
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies which party/parties will bear the charges associated with the processing of the payment transaction. For a full list of values refer to `OBInternalChargeBearerType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalChargeBearerType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BorneByCreditor")]
        BorneByCreditor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BorneByDebtor")]
        BorneByDebtor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FollowingServiceLevel")]
        FollowingServiceLevel = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Shared")]
        Shared = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccountCreditor3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Name { get; set; }

        /// <summary>
        /// Secondary identification of the account, as assigned by the account servicing institution. This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ^ Only included in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBCashAccountDebtor4
    {
        /// <summary>
        /// ^ Name of the identification scheme, in a coded form as published in an external list. | Namespaced Enumeration OBInternalAccountIdentification4Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// ^ Identification assigned by an institution to identify an account. This identification is known by the account owner. | Max256Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Identification { get; set; } = default!;

        /// <summary>
        /// ^ Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// ^ This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination) | Max34Text
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBExternalMandateClassification1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FIXE")]
        FIXE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"USGB")]
        USGB = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VARI")]
        VARI = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBError1
    {
        [Newtonsoft.Json.JsonProperty("ErrorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public required string ErrorCode { get; set; }

        /// <summary>
        /// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
        /// <br/>OBL doesn't standardise this field
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Message { get; set; } = default!;

        /// <summary>
        /// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Url { get; set; } = default!;

    }

    /// <summary>
    /// An array of detail error codes, and messages, and URLs to documentation to help remediation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBErrorResponse1
    {
        /// <summary>
        /// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Deprecated &lt;br&gt;High level textual error code, to help categorise the errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? Code { get; set; } = default!;

        /// <summary>
        /// Deprecated &lt;br&gt;Brief Error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Message { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public required System.Collections.Generic.ICollection<OBError1> Errors { get; set; }

    }

    /// <summary>
    /// Specifies the type of creditor reference as published in an external creditor reference type code set. For more information see `ExternalCreditorReferenceType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalCreditorReferenceType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DISP")]
        DISP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FXDR")]
        FXDR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PUOR")]
        PUOR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RPIN")]
        RPIN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"RADM")]
        RADM = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SCOR")]
        SCOR = 5,

    }

    /// <summary>
    /// Specifies the document type as published in an external document type code list. For more information see `ExternalDocumentType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalDocumentType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CINV")]
        CINV = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CNFA")]
        CNFA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CONT")]
        CONT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CREN")]
        CREN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBN")]
        DEBN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"DISP")]
        DISP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DNFA")]
        DNFA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HIRI")]
        HIRI = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"INVS")]
        INVS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MSIN")]
        MSIN = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PROF")]
        PROF = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PUOR")]
        PUOR = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"QUOT")]
        QUOT = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SBIN")]
        SBIN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"SPRR")]
        SPRR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"TISH")]
        TISH = 15,

    }

    /// <summary>
    /// Specifies the extended type of account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBInternalExtendedAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Business")]
        Business = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessSavingsAccount")]
        BusinessSavingsAccount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Charity")]
        Charity = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Collection")]
        Collection = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Corporate")]
        Corporate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ewallet")]
        Ewallet = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Government")]
        Government = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Investment")]
        Investment = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ISA")]
        ISA = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"JointPersonal")]
        JointPersonal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Pension")]
        Pension = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Personal")]
        Personal = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalSavingsAccount")]
        PersonalSavingsAccount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Premier")]
        Premier = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Wealth")]
        Wealth = 14,

    }

    /// <summary>
    /// This is a partial list, For a full list see `ExternalPurpose1Code` [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalPurpose1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BKDF")]
        BKDF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BKFE")]
        BKFE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BKFM")]
        BKFM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BKIP")]
        BKIP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"BKPP")]
        BKPP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CBLK")]
        CBLK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCB")]
        CDCB = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCD")]
        CDCD = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CDCS")]
        CDCS = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CDDP")]
        CDDP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CDOC")]
        CDOC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CDQC")]
        CDQC = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ETUP")]
        ETUP = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FCOL")]
        FCOL = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"MTUP")]
        MTUP = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCT")]
        ACCT = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"CASH")]
        CASH = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"COLL")]
        COLL = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"CSDB")]
        CSDB = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPT")]
        DEPT = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"INTC")]
        INTC = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"INTP")]
        INTP = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"LIMA")]
        LIMA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NETT")]
        NETT = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"BFWD")]
        BFWD = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"CCIR")]
        CCIR = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPC")]
        CCPC = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPM")]
        CCPM = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"CCSM")]
        CCSM = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"CRDS")]
        CRDS = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"CRPR")]
        CRPR = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"CRSP")]
        CRSP = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"CRTL")]
        CRTL = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EQPT")]
        EQPT = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUS")]
        EQUS = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"EXPT")]
        EXPT = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"EXTD")]
        EXTD = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXI")]
        FIXI = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"FWBC")]
        FWBC = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"FWCC")]
        FWCC = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"FWSB")]
        FWSB = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"FWSC")]
        FWSC = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"MARG")]
        MARG = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"MBSB")]
        MBSB = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"MBSC")]
        MBSC = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"MGCC")]
        MGCC = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"MGSC")]
        MGSC = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"OCCC")]
        OCCC = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"OPBC")]
        OPBC = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"OPCC")]
        OPCC = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"OPSB")]
        OPSB = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"OPSC")]
        OPSC = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"OPTN")]
        OPTN = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"OTCD")]
        OTCD = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"REPO")]
        REPO = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"RPBC")]
        RPBC = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"RPCC")]
        RPCC = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"RPSB")]
        RPSB = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"RPSC")]
        RPSC = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPO")]
        RVPO = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"SBSC")]
        SBSC = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"SCIE")]
        SCIE = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"SCIR")]
        SCIR = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"SCRP")]
        SCRP = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"SHBC")]
        SHBC = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"SHCC")]
        SHCC = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"SHSL")]
        SHSL = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"SLEB")]
        SLEB = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"SLOA")]
        SLOA = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"SWBC")]
        SWBC = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"SWCC")]
        SWCC = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"SWPT")]
        SWPT = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"SWSB")]
        SWSB = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"SWSC")]
        SWSC = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"TBAS")]
        TBAS = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"TBBC")]
        TBBC = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"TBCC")]
        TBCC = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"TRCP")]
        TRCP = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"AGRT")]
        AGRT = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"AREN")]
        AREN = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"BEXP")]
        BEXP = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"BOCE")]
        BOCE = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"COMC")]
        COMC = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"CPYR")]
        CPYR = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"GDDS")]
        GDDS = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"GDSV")]
        GDSV = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"GSCB")]
        GSCB = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"LICF")]
        LICF = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2B")]
        MP2B = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"POPE")]
        POPE = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"ROYA")]
        ROYA = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"SCVE")]
        SCVE = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"SERV")]
        SERV = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"SUBS")]
        SUBS = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"SUPP")]
        SUPP = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"TRAD")]
        TRAD = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"CHAR")]
        CHAR = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"COMT")]
        COMT = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"MP2P")]
        MP2P = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPG")]
        ECPG = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPR")]
        ECPR = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"ECPU")]
        ECPU = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"EPAY")]
        EPAY = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"CLPR")]
        CLPR = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"COMP")]
        COMP = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"DBTC")]
        DBTC = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVI")]
        GOVI = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"HLRP")]
        HLRP = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"HLST")]
        HLST = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"INPC")]
        INPC = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"INPR")]
        INPR = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"INSC")]
        INSC = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"INSU")]
        INSU = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"INTE")]
        INTE = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"LBRI")]
        LBRI = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"LIFI")]
        LIFI = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAN")]
        LOAN = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"LOAR")]
        LOAR = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"PENO")]
        PENO = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"PPTI")]
        PPTI = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"RELG")]
        RELG = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"RINP")]
        RINP = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"TRFD")]
        TRFD = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"FORW")]
        FORW = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"FXNT")]
        FXNT = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMG")]
        ADMG = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"ADVA")]
        ADVA = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"BCDM")]
        BCDM = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"BCFG")]
        BCFG = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"BLDM")]
        BLDM = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"BNET")]
        BNET = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"CBFF")]
        CBFF = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"CBFR")]
        CBFR = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"CCRD")]
        CCRD = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"CDBL")]
        CDBL = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"CFEE")]
        CFEE = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"CGDD")]
        CGDD = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"CORT")]
        CORT = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"COST")]
        COST = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"CPKC")]
        CPKC = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"DCRD")]
        DCRD = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"DSMT")]
        DSMT = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"DVPM")]
        DVPM = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"EDUC")]
        EDUC = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"FACT")]
        FACT = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"FAND")]
        FAND = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"FCPM")]
        FCPM = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"FEES")]
        FEES = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"GIFT")]
        GIFT = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"GOVT")]
        GOVT = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"ICCP")]
        ICCP = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"IDCP")]
        IDCP = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"IHRP")]
        IHRP = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"INSM")]
        INSM = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"IVPT")]
        IVPT = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"MCDM")]
        MCDM = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"MCFG")]
        MCFG = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"MSVC")]
        MSVC = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"NOWS")]
        NOWS = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"OCDM")]
        OCDM = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"OCFG")]
        OCFG = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"OFEE")]
        OFEE = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"OTHR")]
        OTHR = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"PADD")]
        PADD = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"PTSP")]
        PTSP = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"RCKE")]
        RCKE = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"RCPT")]
        RCPT = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"REBT")]
        REBT = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"REFU")]
        REFU = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"RENT")]
        RENT = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"REOD")]
        REOD = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"RIMB")]
        RIMB = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"RPNT")]
        RPNT = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"RRBN")]
        RRBN = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"RRCT")]
        RRCT = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"RRTP")]
        RRTP = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"RVPM")]
        RVPM = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"SLPI")]
        SLPI = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"SPLT")]
        SPLT = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"STDY")]
        STDY = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"TBAN")]
        TBAN = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"TBIL")]
        TBIL = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"TCSC")]
        TCSC = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"TELI")]
        TELI = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"TMPG")]
        TMPG = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"TPRI")]
        TPRI = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"TPRP")]
        TPRP = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"TRNC")]
        TRNC = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"TRVC")]
        TRVC = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"WEBI")]
        WEBI = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"IPAY")]
        IPAY = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"IPCA")]
        IPCA = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"IPDO")]
        IPDO = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEA")]
        IPEA = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEC")]
        IPEC = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"IPEW")]
        IPEW = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"IPPS")]
        IPPS = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"IPRT")]
        IPRT = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"IPU2")]
        IPU2 = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"IPUW")]
        IPUW = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"ANNI")]
        ANNI = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"CAFI")]
        CAFI = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"CFDI")]
        CFDI = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"CMDT")]
        CMDT = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"DERI")]
        DERI = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"DIVD")]
        DIVD = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"FREX")]
        FREX = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"HEDG")]
        HEDG = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"INVS")]
        INVS = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"PRME")]
        PRME = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"SAVG")]
        SAVG = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"SECU")]
        SECU = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"SEPI")]
        SEPI = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"TREA")]
        TREA = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"FNET")]
        FNET = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"FUTR")]
        FUTR = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"ANTS")]
        ANTS = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"CVCF")]
        CVCF = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"DMEQ")]
        DMEQ = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"DNTS")]
        DNTS = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"HLTC")]
        HLTC = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"HLTI")]
        HLTI = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"HSPC")]
        HSPC = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"ICRF")]
        ICRF = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"LTCF")]
        LTCF = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"MAFC")]
        MAFC = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"MARF")]
        MARF = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"MDCS")]
        MDCS = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"VIEW")]
        VIEW = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"CDEP")]
        CDEP = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"SWFP")]
        SWFP = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"SWPP")]
        SWPP = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"SWRS")]
        SWRS = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"SWUF")]
        SWUF = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"ADCS")]
        ADCS = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"AEMP")]
        AEMP = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"ALLW")]
        ALLW = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"ALMY")]
        ALMY = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"BBSC")]
        BBSC = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"BECH")]
        BECH = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"BENE")]
        BENE = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"BONU")]
        BONU = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"CCHD")]
        CCHD = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"COMM")]
        COMM = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"CSLP")]
        CSLP = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"GFRP")]
        GFRP = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEA")]
        GVEA = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEB")]
        GVEB = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"GVEC")]
        GVEC = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"GVED")]
        GVED = 250,

        [System.Runtime.Serialization.EnumMember(Value = @"GWLT")]
        GWLT = 251,

        [System.Runtime.Serialization.EnumMember(Value = @"HREC")]
        HREC = 252,

        [System.Runtime.Serialization.EnumMember(Value = @"PAYR")]
        PAYR = 253,

        [System.Runtime.Serialization.EnumMember(Value = @"PEFC")]
        PEFC = 254,

        [System.Runtime.Serialization.EnumMember(Value = @"PENS")]
        PENS = 255,

        [System.Runtime.Serialization.EnumMember(Value = @"PRCP")]
        PRCP = 256,

        [System.Runtime.Serialization.EnumMember(Value = @"RHBS")]
        RHBS = 257,

        [System.Runtime.Serialization.EnumMember(Value = @"SALA")]
        SALA = 258,

        [System.Runtime.Serialization.EnumMember(Value = @"SPSP")]
        SPSP = 259,

        [System.Runtime.Serialization.EnumMember(Value = @"SSBE")]
        SSBE = 260,

        [System.Runtime.Serialization.EnumMember(Value = @"LBIN")]
        LBIN = 261,

        [System.Runtime.Serialization.EnumMember(Value = @"LCOL")]
        LCOL = 262,

        [System.Runtime.Serialization.EnumMember(Value = @"LFEE")]
        LFEE = 263,

        [System.Runtime.Serialization.EnumMember(Value = @"LMEQ")]
        LMEQ = 264,

        [System.Runtime.Serialization.EnumMember(Value = @"LMFI")]
        LMFI = 265,

        [System.Runtime.Serialization.EnumMember(Value = @"LMRK")]
        LMRK = 266,

        [System.Runtime.Serialization.EnumMember(Value = @"LREB")]
        LREB = 267,

        [System.Runtime.Serialization.EnumMember(Value = @"LREV")]
        LREV = 268,

        [System.Runtime.Serialization.EnumMember(Value = @"LSFL")]
        LSFL = 269,

        [System.Runtime.Serialization.EnumMember(Value = @"ESTX")]
        ESTX = 270,

        [System.Runtime.Serialization.EnumMember(Value = @"FWLV")]
        FWLV = 271,

        [System.Runtime.Serialization.EnumMember(Value = @"GSTX")]
        GSTX = 272,

        [System.Runtime.Serialization.EnumMember(Value = @"HSTX")]
        HSTX = 273,

        [System.Runtime.Serialization.EnumMember(Value = @"INTX")]
        INTX = 274,

        [System.Runtime.Serialization.EnumMember(Value = @"NITX")]
        NITX = 275,

        [System.Runtime.Serialization.EnumMember(Value = @"PTXP")]
        PTXP = 276,

        [System.Runtime.Serialization.EnumMember(Value = @"RDTX")]
        RDTX = 277,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXS")]
        TAXS = 278,

        [System.Runtime.Serialization.EnumMember(Value = @"VATX")]
        VATX = 279,

        [System.Runtime.Serialization.EnumMember(Value = @"WHLD")]
        WHLD = 280,

        [System.Runtime.Serialization.EnumMember(Value = @"TAXR")]
        TAXR = 281,

        [System.Runtime.Serialization.EnumMember(Value = @"B112")]
        B112 = 282,

        [System.Runtime.Serialization.EnumMember(Value = @"BR12")]
        BR12 = 283,

        [System.Runtime.Serialization.EnumMember(Value = @"TLRF")]
        TLRF = 284,

        [System.Runtime.Serialization.EnumMember(Value = @"TLRR")]
        TLRR = 285,

        [System.Runtime.Serialization.EnumMember(Value = @"AIRB")]
        AIRB = 286,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSB")]
        BUSB = 287,

        [System.Runtime.Serialization.EnumMember(Value = @"FERB")]
        FERB = 288,

        [System.Runtime.Serialization.EnumMember(Value = @"RLWY")]
        RLWY = 289,

        [System.Runtime.Serialization.EnumMember(Value = @"TRPT")]
        TRPT = 290,

        [System.Runtime.Serialization.EnumMember(Value = @"CBTV")]
        CBTV = 291,

        [System.Runtime.Serialization.EnumMember(Value = @"ELEC")]
        ELEC = 292,

        [System.Runtime.Serialization.EnumMember(Value = @"ENRG")]
        ENRG = 293,

        [System.Runtime.Serialization.EnumMember(Value = @"GASB")]
        GASB = 294,

        [System.Runtime.Serialization.EnumMember(Value = @"NWCH")]
        NWCH = 295,

        [System.Runtime.Serialization.EnumMember(Value = @"NWCM")]
        NWCM = 296,

        [System.Runtime.Serialization.EnumMember(Value = @"OTLC")]
        OTLC = 297,

        [System.Runtime.Serialization.EnumMember(Value = @"PHON")]
        PHON = 298,

        [System.Runtime.Serialization.EnumMember(Value = @"UBIL")]
        UBIL = 299,

        [System.Runtime.Serialization.EnumMember(Value = @"WTER")]
        WTER = 300,

        [System.Runtime.Serialization.EnumMember(Value = @"BOND")]
        BOND = 301,

        [System.Runtime.Serialization.EnumMember(Value = @"CABD")]
        CABD = 302,

        [System.Runtime.Serialization.EnumMember(Value = @"CAEQ")]
        CAEQ = 303,

        [System.Runtime.Serialization.EnumMember(Value = @"CBCR")]
        CBCR = 304,

        [System.Runtime.Serialization.EnumMember(Value = @"DBCR")]
        DBCR = 305,

        [System.Runtime.Serialization.EnumMember(Value = @"DICL")]
        DICL = 306,

        [System.Runtime.Serialization.EnumMember(Value = @"EQTS")]
        EQTS = 307,

        [System.Runtime.Serialization.EnumMember(Value = @"FLCR")]
        FLCR = 308,

        [System.Runtime.Serialization.EnumMember(Value = @"EFTC")]
        EFTC = 309,

        [System.Runtime.Serialization.EnumMember(Value = @"EFTD")]
        EFTD = 310,

        [System.Runtime.Serialization.EnumMember(Value = @"MOMA")]
        MOMA = 311,

        [System.Runtime.Serialization.EnumMember(Value = @"RAPI")]
        RAPI = 312,

        [System.Runtime.Serialization.EnumMember(Value = @"GAMB")]
        GAMB = 313,

        [System.Runtime.Serialization.EnumMember(Value = @"LOTT")]
        LOTT = 314,

        [System.Runtime.Serialization.EnumMember(Value = @"AMEX")]
        AMEX = 315,

        [System.Runtime.Serialization.EnumMember(Value = @"SASW")]
        SASW = 316,

        [System.Runtime.Serialization.EnumMember(Value = @"AUCO")]
        AUCO = 317,

        [System.Runtime.Serialization.EnumMember(Value = @"PCOM")]
        PCOM = 318,

        [System.Runtime.Serialization.EnumMember(Value = @"PDEP")]
        PDEP = 319,

        [System.Runtime.Serialization.EnumMember(Value = @"PLDS")]
        PLDS = 320,

        [System.Runtime.Serialization.EnumMember(Value = @"PLRF")]
        PLRF = 321,

        [System.Runtime.Serialization.EnumMember(Value = @"GAFA")]
        GAFA = 322,

        [System.Runtime.Serialization.EnumMember(Value = @"GAHO")]
        GAHO = 323,

        [System.Runtime.Serialization.EnumMember(Value = @"CPEN")]
        CPEN = 324,

        [System.Runtime.Serialization.EnumMember(Value = @"DEPD")]
        DEPD = 325,

        [System.Runtime.Serialization.EnumMember(Value = @"RETL")]
        RETL = 326,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBT")]
        DEBT = 327,

    }

    /// <summary>
    /// `OBFrequency6Code` on External Codset Repo
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBFrequency6Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADHO")]
        ADHO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"YEAR")]
        YEAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DAIL")]
        DAIL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FRTN")]
        FRTN = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INDA")]
        INDA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MNTH")]
        MNTH = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"QURT")]
        QURT = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MIAN")]
        MIAN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"WEEK")]
        WEEK = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"WODL")]
        WODL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FOWK")]
        FOWK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TWMH")]
        TWMH = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FOMH")]
        FOMH = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"FIMH")]
        FIMH = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ALMH")]
        ALMH = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBMandateRelatedInformation1
    {
        [Newtonsoft.Json.JsonProperty("MandateIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? MandateIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Classification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBExternalMandateClassification1Code? Classification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FirstPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstPaymentDateTime { get; set; } = default!;

        /// <summary>
        /// The date on which the first recurring payment for a Standing Order schedule will be made. 
        /// <br/>Usage: This must be populated only if the first recurring date is different to the first payment date. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecurringPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("FinalPaymentDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FinalPaymentDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Frequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBFrequency6 Frequency { get; set; }

        /// <summary>
        /// Reason for the direct debit mandate to allow the user to distinguish between different mandates for the same creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Reason { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPaymentStatusReason
    {
        /// <summary>
        /// Specifies the status reason in a code form 
        /// <br/> For more information and enum values see `OBExternalStatusReason1Code [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? StatusReasonCode { get; set; } = default!;

        /// <summary>
        /// Description supporting the StatusReasonCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        /// <summary>
        /// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies an alternate assumed name for the identification of the account.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBProxy1
    {
        /// <summary>
        /// Identification used to indicate the account identification under another specified name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2048, MinimumLength = 1)]
        public required string Identification { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExternalProxyAccountType1Code Code { get; set; }

        /// <summary>
        /// Type of the proxy identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Specifies the external proxy account type code, as published in the proxy account type external code set.&lt;br /&gt; For a full list of values see `ExternalProxyAccountType1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalProxyAccountType1Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TELE")]
        TELE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAL")]
        EMAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DNAM")]
        DNAM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CINC")]
        CINC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COTX")]
        COTX = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"COID")]
        COID = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CUST")]
        CUST = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"DRLC")]
        DRLC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EIDN")]
        EIDN = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"EWAL")]
        EWAL = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"PVTX")]
        PVTX = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"LEIC")]
        LEIC = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"MBNO")]
        MBNO = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NIDN")]
        NIDN = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"CCPT")]
        CCPT = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SHID")]
        SHID = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SOSE")]
        SOSE = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TOKN")]
        TOKN = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"UBIL")]
        UBIL = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"VIPN")]
        VIPN = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"BIID")]
        BIID = 20,

    }

    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBPostalAddress7
    {
        [Newtonsoft.Json.JsonProperty("AddressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBAddressType2Code? AddressType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Department { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SubDepartment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? SubDepartment { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? StreetName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? BuildingNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BuildingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? BuildingName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Floor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Floor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UnitNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? UnitNumber { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Room", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? Room { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostBox { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownLocationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TownLocationName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DistrictName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? DistrictName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CareOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? CareOf { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? PostCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("TownName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TownName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CountrySubDivision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? CountrySubDivision { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("AddressLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(7)]
        public System.Collections.Generic.ICollection<string>? AddressLine { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBReferredDocumentInformation
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDocumentType1Code? Code { get; set; } = default!;

        /// <summary>
        /// Identification of the issuer of the reference document type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

        /// <summary>
        /// Identification of the type specified for the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Number { get; set; } = default!;

        /// <summary>
        /// Date associated with the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RelatedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RelatedDate { get; set; } = default!;

        /// <summary>
        /// Set of elements used to provide the content of the referred document line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LineDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? LineDetails { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRemittanceInformation2
    {
        [Newtonsoft.Json.JsonProperty("Structured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBRemittanceInformationStructured>? Structured { get; set; } = default!;

        /// <summary>
        /// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Unstructured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Unstructured { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRemittanceInformationStructured
    {
        [Newtonsoft.Json.JsonProperty("ReferredDocumentInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBReferredDocumentInformation>? ReferredDocumentInformation { get; set; } = default!;

        /// <summary>
        /// Provides details on the amounts of the referred document.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReferredDocumentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferredDocumentAmount { get; set; } = default!;

        /// <summary>
        /// Reference information provided by the creditor to allow the identification of the underlying documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorReferenceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorReferenceInformation? CreditorReferenceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Invoicer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Invoicer { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Invoicee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Invoicee { get; set; } = default!;

        /// <summary>
        /// Provides remittance information about a payment made for tax-related purposes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TaxRemittance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? TaxRemittance { get; set; } = default!;

        /// <summary>
        /// Additional information, in free text form, to complement the structured remittance information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AdditionalRemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(3)]
        public System.Collections.Generic.ICollection<string>? AdditionalRemittanceInformation { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Entity requiring the regulatory reporting information. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRegulatoryAuthority2
    {
        /// <summary>
        /// Name of the entity requiring the regulatory reporting information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? CountryCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information needed due to regulatory and statutory requirements
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRegulatoryReporting1
    {
        /// <summary>
        /// Identifies whether the regulatory reporting information applies to the debit side, to the credit side or to both debit and credit sides of the transaction.  For a full list of values reefer to `OBExternalRegulatoryReportingType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebitCreditReportingIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBRegulatoryReporting1DebitCreditReportingIndicator? DebitCreditReportingIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Authority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRegulatoryAuthority2? Authority { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStructuredRegulatoryReporting3>? Details { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Risk section is sent by the initiating party to the ASPSP.
    /// <br/>It is used to specify additional details for risk scoring for Payments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBRisk1
    {
        /// <summary>
        /// Specifies the payment context, `OBInternalPaymentContext1Code`
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentContextCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBRisk1PaymentContextCode? PaymentContextCode { get; set; } = default!;

        /// <summary>
        /// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCategoryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 3)]
        public string? MerchantCategoryCode { get; set; } = default!;

        /// <summary>
        /// The unique customer identifier of the PSU with the merchant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MerchantCustomerIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(70, MinimumLength = 1)]
        public string? MerchantCustomerIdentification { get; set; } = default!;

        /// <summary>
        /// Indicates if Payee has a contractual relationship with the PISP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractPresentIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContractPresentIndicator { get; set; } = default!;

        /// <summary>
        /// Indicates if Payee has a contractual relationship with the PISP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractPresentInidicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ContractPresentInidicator { get; set; } = default!;
   
        public void AdjustBeforeSendToBank(bool preferMisspelt)
        {
            if (ContractPresentInidicator is not null)
            {
                throw new Exception("ContractPresentInidicator should be null.");
            }
            if (preferMisspelt)
            {
                ContractPresentInidicator = ContractPresentIndicator;
                ContractPresentIndicator = null;
            }
            
        }

        public void AdjustAfterReceiveFromBank()
        {
            if (ContractPresentIndicator is not null &&
                ContractPresentInidicator is not null)
            {
                throw new Exception("Both ContractPresentIndicator and ContractPresentInidicator received.");
            }

            if (ContractPresentInidicator is not null)
            {
                ContractPresentIndicator = ContractPresentInidicator;
                ContractPresentInidicator = null;
            }
        }
        
        /// <summary>
        /// Indicates if PISP has immutably prepopulated payment details in for the PSU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BeneficiaryPrepopulatedIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BeneficiaryPrepopulatedIndicator { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PaymentPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalPurpose1Code? PaymentPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CategoryPurposeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCategoryPurpose1Code? CategoryPurposeCode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("BeneficiaryAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalExtendedAccountType1Code? BeneficiaryAccountType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("DeliveryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? DeliveryAddress { get; set; } = default!;

    }

    /// <summary>
    /// Supporting Data provided by TPP, when requesting SCA Exemption.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBSCASupportData1
    {
        /// <summary>
        /// This field allows a PISP to request specific SCA Exemption for a Payment Initiation. For a full list of values reefer to `OBInternalSCAExemptionType1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedSCAExemptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBSCASupportData1RequestedSCAExemptionType? RequestedSCAExemptionType { get; set; } = default!;

        /// <summary>
        /// Specifies a character string with a maximum length of 40 characters.
        /// <br/>Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
        /// <br/>For a full list of values refer to `OBInternalAppliedAuthenticationApproach1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AppliedAuthenticationApproach", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBSCASupportData1AppliedAuthenticationApproach? AppliedAuthenticationApproach { get; set; } = default!;

        /// <summary>
        /// If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReferencePaymentOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? ReferencePaymentOrderId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStatusReason
    {
        /// <summary>
        /// Specifies the status reason in a code form. 
        /// <br/>For a full list of values refer to `OBExternalStatusReason1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? StatusReasonCode { get; set; } = default!;

        /// <summary>
        /// Description supporting the StatusReasonCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        /// <summary>
        /// Path is optional but relevant when the status reason refers to an object/field and hence conditional to provide JSON path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Set of elements used to provide details on the regulatory reporting information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBStructuredRegulatoryReporting3
    {
        /// <summary>
        /// Specifies the type of the information supplied in the regulatory reporting details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{2,2}$")]
        public string? Country { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBActiveOrHistoricCurrencyAndAmount? Amount { get; set; } = default!;

        /// <summary>
        /// Additional details that cater for specific domestic regulatory requirements. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Information { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBSupplementaryData1
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [SourceApiEquivalent(typeof(OBWriteDomesticConsent4))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomestic2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticConsent4
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data2 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticConsentResponse5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data3 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticResponse5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data4 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticScheduled2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data5 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticScheduledConsent4
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data6 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticScheduledConsentResponse5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data7 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticScheduledResponse5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data8 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticStandingOrder3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data9 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticStandingOrderConsent5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data10 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticStandingOrderConsentResponse6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data11 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteDomesticStandingOrderResponse6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data12 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteFile2
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data13 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteFileConsent3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data14 Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteFileConsentResponse4
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data15 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteFileResponse3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data16 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteFundsConfirmationResponse1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data17 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternational3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data18 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalConsent5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data19 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalConsentResponse6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data20 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalResponse5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data21 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalScheduled3
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data22 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalScheduledConsent5
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data23 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalScheduledConsentResponse6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data24 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalScheduledResponse6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data25 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalStandingOrder4
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data26 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalStandingOrderConsent6
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data27 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalStandingOrderConsentResponse7
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data28 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Risk", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBRisk1 Risk { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWriteInternationalStandingOrderResponse7
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data29 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWritePaymentDetailsResponse1
    {
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Data30 Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links? Links { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta? Meta { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record OBWritePaymentDetails1
    {
        /// <summary>
        /// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentTransactionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(210, MinimumLength = 1)]
        public required string PaymentTransactionId { get; set; }

        /// <summary>
        /// Status of a transfer, as assigned by the transaction administrator. For a full list of values see `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBWritePaymentDetails1Status Status { get; set; }

        /// <summary>
        /// Date and time at which the status was assigned to the transfer.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Payment status details as per underlying Payment Rail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetail? StatusDetail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorReferenceInformation
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalCreditorReferenceType1Code? Code { get; set; } = default!;

        /// <summary>
        /// Entity that assigns the identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Issuer { get; set; } = default!;

        /// <summary>
        /// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Reference { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBRegulatoryReporting1DebitCreditReportingIndicator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CRED")]
        CRED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DEBT")]
        DEBT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BOTH")]
        BOTH = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBRisk1PaymentContextCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BillingGoodsAndServicesInAdvance")]
        BillingGoodsAndServicesInAdvance = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BillingGoodsAndServicesInArrears")]
        BillingGoodsAndServicesInArrears = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceMerchantInitiatedPayment")]
        EcommerceMerchantInitiatedPayment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FaceToFacePointOfSale")]
        FaceToFacePointOfSale = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferToSelf")]
        TransferToSelf = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TransferToThirdParty")]
        TransferToThirdParty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBSCASupportData1RequestedSCAExemptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BillPayment")]
        BillPayment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ContactlessTravel")]
        ContactlessTravel = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceGoods")]
        EcommerceGoods = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EcommerceServices")]
        EcommerceServices = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Kiosk")]
        Kiosk = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Parking")]
        Parking = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PartyToParty")]
        PartyToParty = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBSCASupportData1AppliedAuthenticationApproach
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SCA")]
        SCA = 1,

    }

    [SourceApiEquivalent(
        typeof(Data2),
        ValueMappingSourceMembers = new[]
        {
            (string?) null
        },
        ValueMappingDestinationMembers = new[]
        {
            "ConsentId"
        },
        ValueMappings = new[]
        {
            ValueMapping.SetNull
        })
    ]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data2
    {
        /// <summary>
        /// Specifies to share the refund account details with PISP. For a full set of values refer to `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data2ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation2 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data3
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form. For a full list of values refer to `OBInternalConsentStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data3Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP. For a full list of values refer to `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data3ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation3 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation2? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data4
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic payment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DomesticPaymentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string DomesticPaymentId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the message was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment information group. For a full list of values refer to `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data4Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges2>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation4 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data5
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation5 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data6
    {
        /// <summary>
        /// Specifies the Open Banking service request types. For a full list of values see `OBInternalPermissions2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data6Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP. For a full list of values see `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data6ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation6 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation3? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data7
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form. For a full list of values see `OBInternalConsentStatus1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data7Status Status { get; set; }

        /// <summary>
        /// Date and time at which the consent resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Specifies the Open Banking service request types. For a full list of values see `OBInternalPermissions2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data7Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP. For a full list of values see `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data7ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges3>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation7 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation4? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data8
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic schedule payment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DomesticScheduledPaymentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string DomesticScheduledPaymentId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the message was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment order resource. For a full list of values see `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data8Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund2? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges4>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation8 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation2? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data9
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation9 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data10
    {
        /// <summary>
        /// Specifies the Open Banking service request types. For a full list of values see `OBInternalPermissions2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data10Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP. For a full list of values see `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data10ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation10 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation5? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data11
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form. For a full list of values see `OBInternalConsentStatus1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data11Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Specifies the Open Banking service request types. For a full list of values see `OBInternalPermissions2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data11Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP.  For a full list of values see `OBInternalReadRefundAccount1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data11ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges5>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation11 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation6? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data12
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic standing order resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DomesticStandingOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string DomesticStandingOrderId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment order resource. For a full list of values see `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data12Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund3? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges6>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation12 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation3? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data13
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation13 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data14
    {
        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation14 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation7? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data15
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data15Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Date and time at which the consent resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges7>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation15 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation8? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data16
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FilePaymentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string FilePaymentId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the message was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment order resource. See `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets) for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data16Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges8>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation16 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation4? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data17
    {
        /// <summary>
        /// Result of a funds availability check.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsAvailableResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FundsAvailableResult? FundsAvailableResult { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data18
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation17 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data19
    {
        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data19ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation18 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation9? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data20
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data20Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data20ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges9>? Charges { get; set; } = default!;

        /// <summary>
        /// Further detailed information on the exchange rate that has been used in the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation19 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation10? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data21
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the international payment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InternationalPaymentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string InternationalPaymentId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the message was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data21Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund4? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges10>? Charges { get; set; } = default!;

        /// <summary>
        /// Further detailed information on the exchange rate that has been used in the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation2? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation20 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation5? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data22
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation21 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data23
    {
        /// <summary>
        /// Specifies the Open Banking service request types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data23Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data23ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation22 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation11? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data24
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data24Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Specifies the Open Banking service request types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data24Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data24ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges11>? Charges { get; set; } = default!;

        /// <summary>
        /// Further detailed information on the exchange rate that has been used in the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation3? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation23 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation12? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data25
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the international scheduled payment resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InternationalScheduledPaymentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string InternationalScheduledPaymentId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the message was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of the payment order resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data25Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Expected execution date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedExecutionDateTime { get; set; } = default!;

        /// <summary>
        /// Expected settlement date and time for the payment resource. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpectedSettlementDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedSettlementDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund5? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges12>? Charges { get; set; } = default!;

        /// <summary>
        /// Further detailed information on the exchange rate that has been used in the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation4? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation24 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation6? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data26
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation25 Initiation { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data27
    {
        /// <summary>
        /// Specifies the Open Banking service request types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data27Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data27ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation26 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation13? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data28
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of consent resource in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data28Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        /// <summary>
        /// Specifies the Open Banking service request types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data28Permission Permission { get; set; }

        /// <summary>
        /// Specifies to share the refund account details with PISP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadRefundAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Data28ReadRefundAccount? ReadRefundAccount { get; set; } = default!;

        /// <summary>
        /// Specified cut-off date and time for the payment consent. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CutOffDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CutOffDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges13>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation27 Initiation { get; set; }

        /// <summary>
        /// The authorisation type request from the TPP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Authorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authorisation14? Authorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SCASupportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSCASupportData1? SCASupportData { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data29
    {
        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the international standing order resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InternationalStandingOrderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public required string InternationalStandingOrderId { get; set; }

        /// <summary>
        /// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConsentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public required string ConsentId { get; set; }

        /// <summary>
        /// Date and time at which the resource was created. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreationDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset CreationDateTime { get; set; }

        /// <summary>
        /// Specifies the status of resource in code form. For a list of values see `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Data29Status Status { get; set; }

        /// <summary>
        /// Date and time at which the resource status was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusUpdateDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset StatusUpdateDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBStatusReason>? StatusReason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Refund", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund6? Refund { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Charges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Charges14>? Charges { get; set; } = default!;

        /// <summary>
        /// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Initiation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Initiation28 Initiation { get; set; }

        /// <summary>
        /// The multiple authorisation flow response from the ASPSP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MultiAuthorisation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MultiAuthorisation7? MultiAuthorisation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Debtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBCashAccountDebtor4? Debtor { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Data30
    {
        [Newtonsoft.Json.JsonProperty("PaymentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OBWritePaymentDetails1>? PaymentStatus { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OBWritePaymentDetails1Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCC")]
        ACCC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record StatusDetail
    {
        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Status of a transfer, as assigned by the transaction administrator. For a full list of values see `ExternalPaymentTransactionStatus1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required StatusDetailStatus Status { get; set; }

        /// <summary>
        /// Reason Code provided for the status of a transfer. For a full list of values see code values for `OBExternalStatusReason1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string? StatusReason { get; set; } = default!;

        /// <summary>
        /// Reason provided for the status of a transfer. For a full list of values see the code name entries for `OBExternalStatusReason1Code` in *ISO_External_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StatusReasonDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? StatusReasonDescription { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [SourceApiEquivalent(typeof(Initiation2))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data2ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation2
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount2 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount2? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent2? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount2 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation
    {
        /// <summary>
        /// Type of authorisation flow requested. For a full set of values refer to `OBInternalAuthorisation1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data3ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation3
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount3 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount3? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent3? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount3 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation2
    {
        /// <summary>
        /// Type of authorisation flow requested. For a full list of values refer to `OBInternalAuthorisation1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Authorisation2AuthorisationType? AuthorisationType { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RCVD")]
        RCVD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCC")]
        ACCC = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund
    {
        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges2
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation4
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount4 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount4? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent4? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount4 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form. For a full list of values refer to `OBInternalStatus2Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisationStatus Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation5
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount5 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount5? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount5 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data6Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data6ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation6
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount6 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount6? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount6 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation3
    {
        /// <summary>
        /// Type of authorisation flow requested. For a full list of values refer to `OBInternalAuthorisation1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation3AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data7Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data7Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data7ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges3
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation7
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount7 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount7? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount7 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation4
    {
        /// <summary>
        /// Type of authorisation flow requested. For a full list of values refer to `OBInternalAuthorisation1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation4AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data8Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RCVD")]
        RCVD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANC")]
        CANC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund2
    {
        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account2 Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges4
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation8
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount8 InstructedAmount { get; set; }

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount8? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount8 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditorPostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? CreditorPostalAddress { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation2
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation2Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation9
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// The amount of the first Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required FirstPaymentAmount FirstPaymentAmount { get; set; }

        /// <summary>
        /// The amount of the recurring Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurringPaymentAmount? RecurringPaymentAmount { get; set; } = default!;

        /// <summary>
        /// The amount of the final Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinalPaymentAmount? FinalPaymentAmount { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount9? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount9 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data10Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data10ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation10
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// The amount of the first Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required FirstPaymentAmount2 FirstPaymentAmount { get; set; }

        /// <summary>
        /// The amount of the recurring Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurringPaymentAmount2? RecurringPaymentAmount { get; set; } = default!;

        /// <summary>
        /// The amount of the final Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinalPaymentAmount2? FinalPaymentAmount { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount10? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount10 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation5
    {
        /// <summary>
        /// Type of authorisation flow requested. For a full list of values refer to `OBInternalAuthorisation1Code` in *OB_Internal_CodeSet* [here](https://github.com/OpenBankingUK/External_Internal_CodeSets)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation5AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data11Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data11Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data11ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges5
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation11
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// The amount of the first Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required FirstPaymentAmount3 FirstPaymentAmount { get; set; }

        /// <summary>
        /// The amount of the recurring Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurringPaymentAmount3? RecurringPaymentAmount { get; set; } = default!;

        /// <summary>
        /// The amount of the final Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinalPaymentAmount3? FinalPaymentAmount { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount11? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount11 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation6
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation6AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data12Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RCVD")]
        RCVD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANC")]
        CANC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INFA")]
        INFA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INCO")]
        INCO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund3
    {
        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account3 Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges6
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation12
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// The amount of the first Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstPaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required FirstPaymentAmount4 FirstPaymentAmount { get; set; }

        /// <summary>
        /// The amount of the recurring Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RecurringPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurringPaymentAmount4? RecurringPaymentAmount { get; set; } = default!;

        /// <summary>
        /// The amount of the final Standing Order
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FinalPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinalPaymentAmount4? FinalPaymentAmount { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount12? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Identification assigned by an institution to identify an account. This identification is known by the account owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount12 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation3
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation3Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation13
    {
        /// <summary>
        /// Specifies the payment file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string FileType { get; set; }

        /// <summary>
        /// A base64 encoding of a SHA256 hash of the file to be uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileHash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 1)]
        public required string FileHash { get; set; }

        /// <summary>
        /// Reference for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? FileReference { get; set; } = default!;

        /// <summary>
        /// Number of individual transactions contained in the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string? NumberOfTransactions { get; set; } = default!;

        /// <summary>
        /// Total of all individual amounts included in the group, irrespective of currencies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ControlSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlSum { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedExecutionDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent5? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount13? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation14
    {
        /// <summary>
        /// Specifies the payment file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string FileType { get; set; }

        /// <summary>
        /// A base64 encoding of a SHA256 hash of the file to be uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileHash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 1)]
        public required string FileHash { get; set; }

        /// <summary>
        /// Reference for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? FileReference { get; set; } = default!;

        /// <summary>
        /// Number of individual transactions contained in the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string? NumberOfTransactions { get; set; } = default!;

        /// <summary>
        /// Total of all individual amounts included in the group, irrespective of currencies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ControlSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlSum { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedExecutionDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent6? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount14? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation7
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation7AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data15Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWUP")]
        AWUP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 4,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges7
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation15
    {
        /// <summary>
        /// Specifies the payment file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string FileType { get; set; }

        /// <summary>
        /// A base64 encoding of a SHA256 hash of the file to be uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileHash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 1)]
        public required string FileHash { get; set; }

        /// <summary>
        /// Reference for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? FileReference { get; set; } = default!;

        /// <summary>
        /// Number of individual transactions contained in the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string? NumberOfTransactions { get; set; } = default!;

        /// <summary>
        /// Total of all individual amounts included in the group, irrespective of currencies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ControlSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlSum { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedExecutionDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent7? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount15? DebtorAccount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation8
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation8AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data16Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INFA")]
        INFA = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INCO")]
        INCO = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 2,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges8
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation16
    {
        /// <summary>
        /// Specifies the payment file type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string FileType { get; set; }

        /// <summary>
        /// A base64 encoding of a SHA256 hash of the file to be uploaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileHash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(44, MinimumLength = 1)]
        public required string FileHash { get; set; }

        /// <summary>
        /// Reference for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FileReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string? FileReference { get; set; } = default!;

        /// <summary>
        /// Number of individual transactions contained in the payment information group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberOfTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9]{1,15}")]
        public string? NumberOfTransactions { get; set; } = default!;

        /// <summary>
        /// Total of all individual amounts included in the group, irrespective of currencies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ControlSum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ControlSum { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RequestedExecutionDateTime { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount16? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent8? CreditorAgent { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation4
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation4Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FundsAvailableResult
    {
        /// <summary>
        /// Date and time at which the funds availability check was generated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsAvailableDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset FundsAvailableDateTime { get; set; }

        /// <summary>
        /// Flag to indicate the availability of funds given the Amount in the consent request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FundsAvailable", Required = Newtonsoft.Json.Required.Always)]
        public required bool FundsAvailable { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation17
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation17InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount9 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation5? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount17? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent9? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount13 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data19ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation18
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation18InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount10 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation6? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount18? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor2? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent10? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount14 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation9
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation9AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data20Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data20ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges9
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Always)]
        public required double ExchangeRate { get; set; }

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformationRateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Specified date and time the exchange rate agreement will expire. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation19
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation19InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount11 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation7? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount19? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor3? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent11? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount15 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation10
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation10AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data21Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCC")]
        ACCC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund4
    {
        /// <summary>
        /// Set of elements used to identify a person or an organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor4? Creditor { get; set; } = default!;

        /// <summary>
        /// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent? Agent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account4 Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges10
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation2
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Always)]
        public required double ExchangeRate { get; set; }

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation2RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Specified date and time the exchange rate agreement will expire. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation20
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string EndToEndIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation20InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount12 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation8? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount20? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor5? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent12? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount16 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation5
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation5Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation21
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation21InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount13 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation9? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount21? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor6? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent13? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount17 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data23Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data23ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation22
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation22InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount14 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation10? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount22? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor7? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent14? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount18 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation11
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation11AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data24Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data24Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data24ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges11
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation3
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Always)]
        public required double ExchangeRate { get; set; }

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation3RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Specified date and time the exchange rate agreement will expire. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation23
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation23InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount15 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation11? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount23? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor8? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent15? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount19 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation12
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation12AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data25Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCC")]
        ACCC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund5
    {
        /// <summary>
        /// Set of elements used to identify a person or an organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor9? Creditor { get; set; } = default!;

        /// <summary>
        /// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent2? Agent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account5 Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges12
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation4
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Always)]
        public required double ExchangeRate { get; set; }

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation4RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

        /// <summary>
        /// Specified date and time the exchange rate agreement will expire. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation24
    {
        /// <summary>
        /// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
        /// <br/>Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionIdentification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public required string InstructionIdentification { get; set; }

        /// <summary>
        /// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
        /// <br/>Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
        /// <br/>OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EndToEndIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? EndToEndIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LocalInstrument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LocalInstrument { get; set; } = default!;

        /// <summary>
        /// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructionPriority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Initiation24InstructionPriority? InstructionPriority { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Date at which the initiating party requests the clearing agent to process the payment. 
        /// <br/>Usage: This is the date on which the debtor's account is to be debited. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestedExecutionDateTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required System.DateTimeOffset RequestedExecutionDateTime { get; set; }

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount16 InstructedAmount { get; set; }

        /// <summary>
        /// Provides details on the currency exchange rate and contract.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRateInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExchangeRateInformation12? ExchangeRateInformation { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount24? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor10? Creditor { get; set; } = default!;

        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent16? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount20 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation6
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation6Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation25
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount17 InstructedAmount { get; set; }

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount25? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor11? Creditor { get; set; } = default!;

        /// <summary>
        /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
        /// <br/>This is the servicer of the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent17? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount21 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data27Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data27ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation26
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount18 InstructedAmount { get; set; }

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount26? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor12? Creditor { get; set; } = default!;

        /// <summary>
        /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
        /// <br/>This is the servicer of the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent18? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount22 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation13
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation13AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data28Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AWAU")]
        AWAU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"COND")]
        COND = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data28Permission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data28ReadRefundAccount
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges13
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation27
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount19 InstructedAmount { get; set; }

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount27? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor13? Creditor { get; set; } = default!;

        /// <summary>
        /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
        /// <br/>This is the servicer of the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent19? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount23 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Authorisation14
    {
        /// <summary>
        /// Type of authorisation flow requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AuthorisationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required Authorisation14AuthorisationType AuthorisationType { get; set; }

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompletionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CompletionDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Data29Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RCVD")]
        RCVD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CANC")]
        CANC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"INFA")]
        INFA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"INCO")]
        INCO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Refund6
    {
        /// <summary>
        /// Set of elements used to identify a person or an organisation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor14? Creditor { get; set; } = default!;

        /// <summary>
        /// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Agent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agent3? Agent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required Account6 Account { get; set; }

    }

    /// <summary>
    /// Set of elements used to provide details of a charge for the payment initiation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Charges14
    {
        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required OBInternalChargeBearerType1Code ChargeBearer { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Initiation28
    {
        [Newtonsoft.Json.JsonProperty("RemittanceInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBRemittanceInformation2? RemittanceInformation { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("NumberOfPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? NumberOfPayments { get; set; } = default!;

        /// <summary>
        /// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExtendedPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? ExtendedPurpose { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("ChargeBearer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OBInternalChargeBearerType1Code? ChargeBearer { get; set; } = default!;

        /// <summary>
        /// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CurrencyOfTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string CurrencyOfTransfer { get; set; }

        /// <summary>
        /// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DestinationCountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[A-Z]{2,2}")]
        public string? DestinationCountryCode { get; set; } = default!;

        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// <br/>Usage: This amount has to be transported unchanged through the transaction chain.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InstructedAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required InstructedAmount20 InstructedAmount { get; set; }

        /// <summary>
        /// Provides the details to identify the debtor account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DebtorAccount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebtorAccount28? DebtorAccount { get; set; } = default!;

        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Creditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Creditor15? Creditor { get; set; } = default!;

        /// <summary>
        /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
        /// <br/>This is the servicer of the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAgent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditorAgent20? CreditorAgent { get; set; } = default!;

        /// <summary>
        /// Provides the details to identify the beneficiary account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CreditorAccount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required CreditorAccount24 CreditorAccount { get; set; }

        [Newtonsoft.Json.JsonProperty("UltimateCreditor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateCreditor1? UltimateCreditor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("UltimateDebtor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBUltimateDebtor1? UltimateDebtor { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("RegulatoryReporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<OBRegulatoryReporting1>? RegulatoryReporting { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("MandateRelatedInformation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public required OBMandateRelatedInformation1 MandateRelatedInformation { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplementaryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBSupplementaryData1? SupplementaryData { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record MultiAuthorisation7
    {
        /// <summary>
        /// Specifies the status of the authorisation flow in code form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required MultiAuthorisation7Status Status { get; set; }

        /// <summary>
        /// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberRequired { get; set; } = default!;

        /// <summary>
        /// Number of authorisations received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("NumberReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberReceived { get; set; } = default!;

        /// <summary>
        /// Last date and time at the authorisation flow was updated. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastUpdateDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdateDateTime { get; set; } = default!;

        /// <summary>
        /// Date and time at which the requested authorisation flow must be completed. All dates in the JSON payloads are represented in ISO 8601 date-time format. 
        /// <br/>All date-time fields in responses must include the timezone. An example is below:
        /// <br/>2017-04-05T10:43:07+00:00
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExpirationDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpirationDateTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatusDetailStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PDNG")]
        PDNG = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ACTC")]
        ACTC = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PATC")]
        PATC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCP")]
        ACCP = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ACFC")]
        ACFC = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSP")]
        ACSP = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWC")]
        ACWC = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ACSC")]
        ACSC = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"ACWP")]
        ACWP = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCC")]
        ACCC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"BLCK")]
        BLCK = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 11,

    }

    [SourceApiEquivalent(typeof(InstructedAmount2))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [SourceApiEquivalent(typeof(DebtorAccount2))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [SourceApiEquivalent(typeof(CreditorAccount2))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation2AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount4
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent4
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount4
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount5
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount5
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount5
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount6
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount6
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount6
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation3AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount7
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount7
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount7
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation4AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount8
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount8
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount8
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FirstPaymentAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecurringPaymentAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FinalPaymentAmount
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount9
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount9
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FirstPaymentAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecurringPaymentAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FinalPaymentAmount2
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount10
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount10
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation5AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FirstPaymentAmount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecurringPaymentAmount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FinalPaymentAmount3
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount11
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount11
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation6AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FirstPaymentAmount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record RecurringPaymentAmount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record FinalPaymentAmount4
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount12
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount12
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent5
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount13
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent6
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount14
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation7AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent7
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount15
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation8AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount16
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent8
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation4Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation17InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount9
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation5
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation5RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount17
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent9
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount13
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation18InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount10
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation6
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation6RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount18
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor2
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent10
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount14
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation9AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformationRateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation19InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount11
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation7
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation7RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount19
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor3
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent11
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount15
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation10AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor4
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Agent
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account4
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation2RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation20InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount12
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation8
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation8RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount20
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor5
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent12
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount16
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation21InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount13
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation9
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation9RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount21
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor6
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent13
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount17
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation22InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount14
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation10
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation10RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount22
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor7
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent14
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount18
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation11AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation3RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation23InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount15
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation11
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation11RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount23
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor8
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent15
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount19
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation12AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor9
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Agent2
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account5
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation4RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Initiation24InstructionPriority
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Urgent")]
        Urgent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount16
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record ExchangeRateInformation12
    {
        /// <summary>
        /// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnitCurrency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string UnitCurrency { get; set; }

        /// <summary>
        /// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ExchangeRate { get; set; } = default!;

        /// <summary>
        /// Specifies the type used to complete the currency exchange.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RateType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public required ExchangeRateInformation12RateType RateType { get; set; }

        /// <summary>
        /// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ContractIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? ContractIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount24
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor10
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent16
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount20
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation6Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount17
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount25
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor11
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent17
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of the servicing institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount21
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount18
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount26
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor12
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent18
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of the servicing institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount22
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation13AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount19
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount27
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor13
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent19
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of the servicing institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount23
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Authorisation14AuthorisationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Any")]
        Any = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor14
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Agent3
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Account6
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// Name of the account, as assigned by the account servicing institution.
        /// <br/>Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record InstructedAmount20
    {
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
        public required string Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("Currency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3,3}$")]
        public required string Currency { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record DebtorAccount28
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record Creditor15
    {
        /// <summary>
        /// Name by which a party is known and which is usually used to identify that party.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAgent20
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SchemeName { get; set; } = default!;

        /// <summary>
        /// Unique and unambiguous identification of the servicing institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string? Identification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(140, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("LEI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{4}[0]{2}[A-Z0-9]{12}[0-9]{2}")]
        public string? LEI { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("PostalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBPostalAddress7? PostalAddress { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial record CreditorAccount24
    {
        [Newtonsoft.Json.JsonProperty("SchemeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public required string SchemeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Identification", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public required string Identification { get; set; }

        /// <summary>
        /// The account name is the name or names of the account owner(s) represented at an account level.
        /// <br/>Note, the account name is not the product name or the nickname of the account.
        /// <br/>OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(350, MinimumLength = 1)]
        public required string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SecondaryIdentification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(34, MinimumLength = 1)]
        public string? SecondaryIdentification { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("Proxy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OBProxy1? Proxy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MultiAuthorisation7Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUTH")]
        AUTH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AWAF")]
        AWAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RJCT")]
        RJCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation5RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation6RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation7RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation8RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation9RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation10RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation11RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExchangeRateInformation12RateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Actual")]
        Actual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Agreed")]
        Agreed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Indicative")]
        Indicative = 2,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625